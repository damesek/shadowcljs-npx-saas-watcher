{
"version":3,
"file":"module$node_modules$vega_geo$build$vega_geo.js",
"lineCount":18,
"mappings":"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",
"sources":["node_modules/vega-geo/build/vega-geo.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_geo$build$vega_geo\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-array'), require('d3-contour'), require('vega-projection'), require('d3-geo')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-array', 'd3-contour', 'vega-projection', 'd3-geo'], factory) :\n  (global = global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.d3, global.d3, global.vega, global.d3));\n}(this, function (exports, vegaDataflow, vegaUtil, d3Array, d3Contour, vegaProjection, d3Geo) { 'use strict';\n\n  var CONTOUR_PARAMS = ['size', 'smooth'];\n  var DENSITY_PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];\n\n  /**\n   * Generate contours based on kernel-density estimation of point data.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.\n   *  If the values parameter is provided, this must be the dimensions of the input data.\n   *  If density estimation is performed, this is the output view dimensions in pixels.\n   * @param {Array<number>} [params.values] - An array of numeric values representing an\n   *  width x height grid of values over which to compute contours. If unspecified, this\n   *  transform will instead attempt to compute contours for the kernel density estimate\n   *  using values drawn from data tuples in the input pulse.\n   * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.\n   * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.\n   * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.\n   * @param {number} [params.cellSize] - Contour density calculation cell size.\n   * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.\n   * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n   *   this parameter is set, the count and nice parameters will be ignored.\n   * @param {number} [params.count] - The desired number of contours.\n   * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n   *   threshold values should be automatically aligned to \"nice\"\n   *   human-friendly values. Setting this flag may cause the number of\n   *   thresholds to deviate from the specified count.\n   * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n   *   polygons should be smoothed using linear interpolation. The default is\n   *   true. The parameter is ignored when using density estimation.\n   */\n  function Contour(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Contour.Definition = {\n    \"type\": \"Contour\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n      { \"name\": \"values\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"x\", \"type\": \"field\" },\n      { \"name\": \"y\", \"type\": \"field\" },\n      { \"name\": \"weight\", \"type\": \"field\" },\n      { \"name\": \"cellSize\", \"type\": \"number\" },\n      { \"name\": \"bandwidth\", \"type\": \"number\" },\n      { \"name\": \"count\", \"type\": \"number\" },\n      { \"name\": \"smooth\", \"type\": \"boolean\" },\n      { \"name\": \"nice\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"thresholds\", \"type\": \"number\", \"array\": true }\n    ]\n  };\n\n  var prototype = vegaUtil.inherits(Contour, vegaDataflow.Transform);\n\n  prototype.transform = function(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified())\n      return pulse.StopPropagation;\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        count = _.count || 10,\n        contour, params, values;\n\n    if (_.values) {\n      contour = d3Contour.contours();\n      params = CONTOUR_PARAMS;\n      values = _.values;\n    } else {\n      contour = d3Contour.contourDensity();\n      params = DENSITY_PARAMS;\n      values = pulse.materialize(pulse.SOURCE).source;\n    }\n\n    // set threshold parameter\n    contour.thresholds(_.thresholds || (_.nice ? count : quantize(count)));\n\n    // set all other parameters\n    params.forEach(function(param) {\n      if (_[param] != null) contour[param](_[param]);\n    });\n\n    if (this.value) out.rem = this.value;\n    values = values && values.length ? contour(values).map(vegaDataflow.ingest) : [];\n    this.value = out.source = out.add = values;\n\n    return out;\n  };\n\n  function quantize(k) {\n    return function(values) {\n      var ex = d3Array.extent(values), x0 = ex[0], dx = ex[1] - x0,\n          t = [], i = 1;\n      for (; i<=k; ++i) t.push(x0 + dx * i / (k + 1));\n      return t;\n    };\n  }\n\n  var Feature = 'Feature';\n  var FeatureCollection = 'FeatureCollection';\n  var MultiPoint = 'MultiPoint';\n\n  /**\n   * Consolidate an array of [longitude, latitude] points or GeoJSON features\n   * into a combined GeoJSON object. This transform is particularly useful for\n   * combining geo data for a Projection's fit argument. The resulting GeoJSON\n   * data is available as this transform's value. Input pulses are unchanged.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.fields] - A two-element array\n   *   of field accessors for the longitude and latitude values.\n   * @param {function(object): *} params.geojson - A field accessor for\n   *   retrieving GeoJSON feature data.\n   */\n  function GeoJSON(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  GeoJSON.Definition = {\n    \"type\": \"GeoJSON\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"length\": 2 },\n      { \"name\": \"geojson\", \"type\": \"field\" },\n    ]\n  };\n\n  var prototype$1 = vegaUtil.inherits(GeoJSON, vegaDataflow.Transform);\n\n  prototype$1.transform = function(_, pulse) {\n    var features = this._features,\n        points = this._points,\n        fields = _.fields,\n        lon = fields && fields[0],\n        lat = fields && fields[1],\n        geojson = _.geojson || (!fields && vegaUtil.identity),\n        flag = pulse.ADD,\n        mod;\n\n    mod = _.modified()\n      || pulse.changed(pulse.REM)\n      || pulse.modified(vegaUtil.accessorFields(geojson))\n      || (lon && (pulse.modified(vegaUtil.accessorFields(lon))))\n      || (lat && (pulse.modified(vegaUtil.accessorFields(lat))));\n\n    if (!this.value || mod) {\n      flag = pulse.SOURCE;\n      this._features = (features = []);\n      this._points = (points = []);\n    }\n\n    if (geojson) {\n      pulse.visit(flag, function(t) {\n        features.push(geojson(t));\n      });\n    }\n\n    if (lon && lat) {\n      pulse.visit(flag, function(t) {\n        var x = lon(t),\n            y = lat(t);\n        if (x != null && y != null && (x = +x) === x && (y = +y) === y) {\n          points.push([x, y]);\n        }\n      });\n      features = features.concat({\n        type: Feature,\n        geometry: {\n          type: MultiPoint,\n          coordinates: points\n        }\n      });\n    }\n\n    this.value = {\n      type: FeatureCollection,\n      features: features\n    };\n  };\n\n  /**\n   * Map GeoJSON data to an SVG path string.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {function(object): *} [params.field] - The field with GeoJSON data,\n   *   or null if the tuple itself is a GeoJSON feature.\n   * @param {string} [params.as='path'] - The output field in which to store\n   *   the generated path data (default 'path').\n   */\n  function GeoPath(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  GeoPath.Definition = {\n    \"type\": \"GeoPath\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"projection\", \"type\": \"projection\" },\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"pointRadius\", \"type\": \"number\", \"expr\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n    ]\n  };\n\n  var prototype$2 = vegaUtil.inherits(GeoPath, vegaDataflow.Transform);\n\n  prototype$2.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        path = this.value,\n        field = _.field || vegaUtil.identity,\n        as = _.as || 'path',\n        flag = out.SOURCE;\n\n    function set(t) { t[as] = path(field(t)); }\n\n    if (!path || _.modified()) {\n      // parameters updated, reset and reflow\n      this.value = path = vegaProjection.getProjectionPath(_.projection);\n      out.materialize().reflow();\n    } else {\n      flag = field === vegaUtil.identity || pulse.modified(field.fields)\n        ? out.ADD_MOD\n        : out.ADD;\n    }\n\n    var prev = initPath(path, _.pointRadius);\n    out.visit(flag, set);\n    path.pointRadius(prev);\n\n    return out.modifies(as);\n  };\n\n  function initPath(path, pointRadius) {\n    var prev = path.pointRadius();\n    path.context(null);\n    if (pointRadius != null) {\n      path.pointRadius(pointRadius);\n    }\n    return prev;\n  }\n\n  /**\n   * Geo-code a longitude/latitude point to an x/y coordinate.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {Array<function(object): *>} params.fields - A two-element array of\n   *   field accessors for the longitude and latitude values.\n   * @param {Array<string>} [params.as] - A two-element array of field names\n   *   under which to store the result. Defaults to ['x','y'].\n   */\n  function GeoPoint(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  GeoPoint.Definition = {\n    \"type\": \"GeoPoint\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"projection\", \"type\": \"projection\", \"required\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"x\", \"y\"] }\n    ]\n  };\n\n  var prototype$3 = vegaUtil.inherits(GeoPoint, vegaDataflow.Transform);\n\n  prototype$3.transform = function(_, pulse) {\n    var proj = _.projection,\n        lon = _.fields[0],\n        lat = _.fields[1],\n        as = _.as || ['x', 'y'],\n        x = as[0],\n        y = as[1],\n        mod;\n\n    function set(t) {\n      var xy = proj([lon(t), lat(t)]);\n      if (xy) {\n        t[x] = xy[0];\n        t[y] = xy[1];\n      } else {\n        t[x] = undefined;\n        t[y] = undefined;\n      }\n    }\n\n    if (_.modified()) {\n      // parameters updated, reflow\n      pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n    } else {\n      mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n      pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n    }\n\n    return pulse.modifies(as);\n  };\n\n  /**\n   * Annotate items with a geopath shape generator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(number, number): *} params.projection - The cartographic\n   *   projection to apply.\n   * @param {function(object): *} [params.field] - The field with GeoJSON data,\n   *   or null if the tuple itself is a GeoJSON feature.\n   * @param {string} [params.as='shape'] - The output field in which to store\n   *   the generated path data (default 'shape').\n   */\n  function GeoShape(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  GeoShape.Definition = {\n    \"type\": \"GeoShape\",\n    \"metadata\": {\"modifies\": true, \"nomod\": true},\n    \"params\": [\n      { \"name\": \"projection\", \"type\": \"projection\" },\n      { \"name\": \"field\", \"type\": \"field\", \"default\": \"datum\" },\n      { \"name\": \"pointRadius\", \"type\": \"number\", \"expr\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"shape\" }\n    ]\n  };\n\n  var prototype$4 = vegaUtil.inherits(GeoShape, vegaDataflow.Transform);\n\n  prototype$4.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        shape = this.value,\n        as = _.as || 'shape',\n        flag = out.ADD;\n\n    if (!shape || _.modified()) {\n      // parameters updated, reset and reflow\n      this.value = shape = shapeGenerator(\n        vegaProjection.getProjectionPath(_.projection),\n        _.field || vegaUtil.field('datum'),\n        _.pointRadius\n      );\n      out.materialize().reflow();\n      flag = out.SOURCE;\n    }\n\n    out.visit(flag, function(t) { t[as] = shape; });\n\n    return out.modifies(as);\n  };\n\n  function shapeGenerator(path, field, pointRadius) {\n    var shape = pointRadius == null\n      ? function(_) { return path(field(_)); }\n      : function(_) {\n        var prev = path.pointRadius(),\n            value = path.pointRadius(pointRadius)(field(_));\n        path.pointRadius(prev);\n        return value;\n      };\n    shape.context = function(_) {\n      path.context(_);\n      return shape;\n    };\n\n    return shape;\n  }\n\n  /**\n   * GeoJSON feature generator for creating graticules.\n   * @constructor\n   */\n  function Graticule(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.generator = d3Geo.geoGraticule();\n  }\n\n  Graticule.Definition = {\n    \"type\": \"Graticule\",\n    \"metadata\": {\"changes\": true, \"generates\": true},\n    \"params\": [\n      { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"extentMajor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"extentMinor\", \"type\": \"array\", \"array\": true, \"length\": 2,\n        \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n      { \"name\": \"step\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"stepMajor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [90, 360] },\n      { \"name\": \"stepMinor\", \"type\": \"number\", \"array\": true, \"length\": 2, \"default\": [10, 10] },\n      { \"name\": \"precision\", \"type\": \"number\", \"default\": 2.5 }\n    ]\n  };\n\n  var prototype$5 = vegaUtil.inherits(Graticule, vegaDataflow.Transform);\n\n  prototype$5.transform = function(_, pulse) {\n    var src = this.value,\n        gen = this.generator, t;\n\n    if (!src.length || _.modified()) {\n      for (var prop in _) {\n        if (vegaUtil.isFunction(gen[prop])) {\n          gen[prop](_[prop]);\n        }\n      }\n    }\n\n    t = gen();\n    if (src.length) {\n      pulse.mod.push(vegaDataflow.replace(src[0], t));\n    } else {\n      pulse.add.push(vegaDataflow.ingest(t));\n    }\n    src[0] = t;\n\n    return pulse;\n  };\n\n  /**\n   * Maintains a cartographic projection.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Projection(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  var prototype$6 = vegaUtil.inherits(Projection, vegaDataflow.Transform);\n\n  prototype$6.transform = function(_, pulse) {\n    var proj = this.value;\n\n    if (!proj || _.modified('type')) {\n      this.value = (proj = create(_.type));\n      vegaProjection.projectionProperties.forEach(function(prop) {\n        if (_[prop] != null) set(proj, prop, _[prop]);\n      });\n    } else {\n      vegaProjection.projectionProperties.forEach(function(prop) {\n        if (_.modified(prop)) set(proj, prop, _[prop]);\n      });\n    }\n\n    if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n    if (_.fit) fit(proj, _);\n\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n  };\n\n  function fit(proj, _) {\n    var data = collectGeoJSON(_.fit);\n    _.extent ? proj.fitExtent(_.extent, data)\n      : _.size ? proj.fitSize(_.size, data) : 0;\n  }\n\n  function create(type) {\n    var constructor = vegaProjection.projection((type || 'mercator').toLowerCase());\n    if (!constructor) vegaUtil.error('Unrecognized projection type: ' + type);\n    return constructor();\n  }\n\n  function set(proj, key, value) {\n     if (vegaUtil.isFunction(proj[key])) proj[key](value);\n  }\n\n  function collectGeoJSON(data) {\n    data = vegaUtil.array(data);\n    return data.length === 1 ? data[0]\n      : {\n          type: FeatureCollection,\n          features: data.reduce((a, f) => a.concat(featurize(f)), [])\n        };\n  }\n\n  function featurize(f) {\n    return f.type === FeatureCollection\n      ? f.features\n      : vegaUtil.array(f).filter(d => d != null).map(\n          d => d.type === Feature ? d : {type: Feature, geometry: d}\n        );\n  }\n\n  exports.contour = Contour;\n  exports.geojson = GeoJSON;\n  exports.geopath = GeoPath;\n  exports.geopoint = GeoPoint;\n  exports.geoshape = GeoShape;\n  exports.graticule = Graticule;\n  exports.projection = Projection;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","vega","transforms","d3","vegaDataflow","vegaUtil","d3Array","d3Contour","vegaProjection","d3Geo","Contour","params","Transform","call","quantize","k","values","ex","extent","x0","dx","t","i","push","GeoJSON","GeoPath","initPath","path","pointRadius","prev","context","GeoPoint","GeoShape","shapeGenerator","field","shape","_","value","shape.context","Graticule","generator","geoGraticule","Projection","modified","fit","proj","data","collectGeoJSON","fitExtent","size","fitSize","create","type","constructor","projection","toLowerCase","error","array","length","FeatureCollection","features","reduce","a","f","concat","featurize","filter","d","map","Feature","geometry","CONTOUR_PARAMS","DENSITY_PARAMS","Definition","inherits","prototype","transform","prototype.transform","pulse","changed","StopPropagation","out","fork","NO_SOURCE","NO_FIELDS","count","contour","contours","contourDensity","materialize","SOURCE","source","thresholds","nice","forEach","param","rem","ingest","add","prototype$1","prototype$1.transform","_features","points","_points","fields","lon","lat","geojson","identity","flag","ADD","mod","REM","accessorFields","visit","x","y","MultiPoint","coordinates","prototype$2","prototype$2.transform","ALL","as","getProjectionPath","reflow","ADD_MOD","set","modifies","prototype$3","prototype$3.transform","xy","undefined","prototype$4","prototype$4.transform","prototype$5","prototype$5.transform","src","gen","prop","isFunction","replace","prototype$6","prototype$6.transform","projectionProperties","geopath","geopoint","geoshape","graticule","Object","defineProperty"]
}
