{
"version":3,
"file":"module$node_modules$vega_statistics$build$vega_statistics.js",
"lineCount":37,
"mappings":"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",
"sources":["node_modules/vega-statistics/build/vega-statistics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_statistics$build$vega_statistics\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n  (global = global || self, factory(global.vega = {}, global.d3));\n}(this, function (exports, d3Array) { 'use strict';\n\n  function bin(_) {\n    // determine range\n    var maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2],\n        min  = _.extent[0],\n        max  = _.extent[1],\n        span = _.span || (max - min) || Math.abs(min) || 1,\n        step, level, minstep, precision, v, i, n, eps;\n\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n      for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n      step = _.steps[Math.max(0, i-1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(\n        minstep,\n        Math.pow(base, Math.round(Math.log(span) / logb) - level)\n      );\n\n      // increase step size if too many bins\n      while (Math.ceil(span/step) > maxb) { step *= base; }\n\n      // decrease step size if allowed\n      for (i=0, n=div.length; i<n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    }\n\n    // update precision, min and max\n    v = Math.log(step);\n    precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n    eps = Math.pow(base, -precision - 1);\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n\n    return {\n      start: min,\n      stop:  max === min ? min + step : max,\n      step:  step\n    };\n  }\n\n  function* numbers(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  exports.random = Math.random;\n\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI(array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n\n    var values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples,\n        a, i, j, mu;\n\n    for (j=0, mu=Array(m); j<m; ++j) {\n      for (a=0, i=0; i<n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n      mu[j] = a / n;\n    }\n\n    mu.sort(d3Array.ascending);\n\n    return [\n      d3Array.quantile(mu, alpha/2),\n      d3Array.quantile(mu, 1-(alpha/2))\n    ];\n  }\n\n  // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n  function dotbin(array, step, smooth, f) {\n    f = f || (_ => _);\n\n    let i = 0, j = 1,\n        n = array.length,\n        v = new Float64Array(n),\n        a = f(array[0]),\n        b = a,\n        w = a + step,\n        x;\n\n    for (; j<n; ++j) {\n      x = f(array[j]);\n      if (x >= w) {\n        b = (a + b) / 2;\n        for (; i<j; ++i) v[i] = b;\n        w = x + step;\n        a = x;\n      }\n      b = x;\n    }\n\n    b = (a + b) / 2;\n    for (; i<j; ++i) v[i] = b;\n\n    return smooth ? smoothing(v, step + step / 4) : v;\n  }\n\n  // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n  function smoothing(v, thresh) {\n    let n = v.length,\n        a = 0,\n        b = 1,\n        c, d;\n\n    // get left stack\n    while (v[a] === v[b]) ++b;\n\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n      while (v[b] === v[c]) ++c;\n\n      // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n      if (v[b] - v[b-1] < thresh) {\n        d = b + ((a + c - b - b) >> 1);\n        while (d < b) v[d++] = v[b];\n        while (d > b) v[d--] = v[a];\n      }\n\n      // update left stack indices\n      a = b;\n      b = c;\n    }\n\n    return v;\n  }\n\n  function quantiles(array, p, f) {\n    var values = Float64Array.from(numbers(array, f));\n\n    // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n    values.sort(d3Array.ascending);\n\n    return p.map(_ => d3Array.quantileSorted(values, _));\n  }\n\n  function quartiles(array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  }\n\n  function lcg(seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function() {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    var dist = {},\n        a, b, d;\n\n    dist.min = function(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    };\n\n    dist.max = function(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    };\n\n    dist.sample = function() {\n      return a + Math.floor(d * exports.random());\n    };\n\n    dist.pdf = function(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    };\n\n    dist.cdf = function(x) {\n      var v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    };\n\n    dist.icdf = function(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    };\n\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n\n  let nextSample = NaN;\n\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let x = 0, y = 0, rds, c;\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n      x *= c;\n      nextSample = y * c;\n    }\n    return mean + x * stdev;\n  }\n\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  }\n\n  // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n\n    let cd,\n        z = (value - mean) / stdev,\n        Z = Math.abs(z);\n\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      let sum, exp = Math.exp(-Z * Z / 2);\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n    return z > 0 ? 1 - cd : cd;\n  }\n\n  // Approximation of Probit function using inverse error function.\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  }\n\n  // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = - Math.log((1 - x) * (1 + x)), p;\n\n    if (w < 6.25) {\n        w -= 3.125;\n        p =  -3.6444120640178196996e-21;\n        p =   -1.685059138182016589e-19 + p * w;\n        p =   1.2858480715256400167e-18 + p * w;\n        p =    1.115787767802518096e-17 + p * w;\n        p =   -1.333171662854620906e-16 + p * w;\n        p =   2.0972767875968561637e-17 + p * w;\n        p =   6.6376381343583238325e-15 + p * w;\n        p =  -4.0545662729752068639e-14 + p * w;\n        p =  -8.1519341976054721522e-14 + p * w;\n        p =   2.6335093153082322977e-12 + p * w;\n        p =  -1.2975133253453532498e-11 + p * w;\n        p =  -5.4154120542946279317e-11 + p * w;\n        p =    1.051212273321532285e-09 + p * w;\n        p =  -4.1126339803469836976e-09 + p * w;\n        p =  -2.9070369957882005086e-08 + p * w;\n        p =   4.2347877827932403518e-07 + p * w;\n        p =  -1.3654692000834678645e-06 + p * w;\n        p =  -1.3882523362786468719e-05 + p * w;\n        p =    0.0001867342080340571352 + p * w;\n        p =  -0.00074070253416626697512 + p * w;\n        p =   -0.0060336708714301490533 + p * w;\n        p =      0.24015818242558961693 + p * w;\n        p =       1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n        w = Math.sqrt(w) - 3.25;\n        p =   2.2137376921775787049e-09;\n        p =   9.0756561938885390979e-08 + p * w;\n        p =  -2.7517406297064545428e-07 + p * w;\n        p =   1.8239629214389227755e-08 + p * w;\n        p =   1.5027403968909827627e-06 + p * w;\n        p =   -4.013867526981545969e-06 + p * w;\n        p =   2.9234449089955446044e-06 + p * w;\n        p =   1.2475304481671778723e-05 + p * w;\n        p =  -4.7318229009055733981e-05 + p * w;\n        p =   6.8284851459573175448e-05 + p * w;\n        p =   2.4031110387097893999e-05 + p * w;\n        p =   -0.0003550375203628474796 + p * w;\n        p =   0.00095328937973738049703 + p * w;\n        p =   -0.0016882755560235047313 + p * w;\n        p =    0.0024914420961078508066 + p * w;\n        p =   -0.0037512085075692412107 + p * w;\n        p =     0.005370914553590063617 + p * w;\n        p =       1.0052589676941592334 + p * w;\n        p =       3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n        w = Math.sqrt(w) - 5.0;\n        p =  -2.7109920616438573243e-11;\n        p =  -2.5556418169965252055e-10 + p * w;\n        p =   1.5076572693500548083e-09 + p * w;\n        p =  -3.7894654401267369937e-09 + p * w;\n        p =   7.6157012080783393804e-09 + p * w;\n        p =  -1.4960026627149240478e-08 + p * w;\n        p =   2.9147953450901080826e-08 + p * w;\n        p =  -6.7711997758452339498e-08 + p * w;\n        p =   2.2900482228026654717e-07 + p * w;\n        p =  -9.9298272942317002539e-07 + p * w;\n        p =   4.5260625972231537039e-06 + p * w;\n        p =  -1.9681778105531670567e-05 + p * w;\n        p =   7.5995277030017761139e-05 + p * w;\n        p =  -0.00021503011930044477347 + p * w;\n        p =  -0.00013871931833623122026 + p * w;\n        p =       1.0103004648645343977 + p * w;\n        p =       4.8499064014085844221 + p * w;\n    } else {\n        p = Infinity;\n    }\n\n    return p * x;\n  }\n\n  function gaussian(mean, stdev) {\n    var mu,\n        sigma,\n        dist = {\n          mean: function(_) {\n            if (arguments.length) {\n              mu = _ || 0;\n              return dist;\n            } else {\n              return mu;\n            }\n          },\n          stdev: function(_) {\n            if (arguments.length) {\n              sigma = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return sigma;\n            }\n          },\n          sample: () => sampleNormal(mu, sigma),\n          pdf: value => densityNormal(value, mu, sigma),\n          cdf: value => cumulativeNormal(value, mu, sigma),\n          icdf: p => quantileNormal(p, mu, sigma)\n        };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  // TODO: support for additional kernels?\n  function kde(support, bandwidth) {\n    var kernel = gaussian(),\n        dist = {},\n        n = 0;\n\n    dist.data = function(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    };\n\n    dist.bandwidth = function(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    };\n\n    dist.sample = function() {\n      return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n    };\n\n    dist.pdf = function(x) {\n      for (var y=0, i=0; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    };\n\n    dist.cdf = function(x) {\n      for (var y=0, i=0; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    };\n\n    dist.icdf = function() {\n      throw Error('KDE icdf not supported.');\n    };\n\n    return dist.data(support);\n  }\n\n  // Scott, D. W. (1992) Multivariate Density Estimation:\n  // Theory, Practice, and Visualization. Wiley.\n  function estimateBandwidth(array) {\n    var n = array.length,\n        q = quartiles(array),\n        h = (q[2] - q[0]) / 1.34;\n    return 1.06 * Math.min(Math.sqrt(d3Array.variance(array)), h) * Math.pow(n, -0.2);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n\n  function lognormal(mean, stdev) {\n    var mu,\n        sigma,\n        dist = {\n          mean: function(_) {\n            if (arguments.length) {\n              mu = _ || 0;\n              return dist;\n            } else {\n              return mu;\n            }\n          },\n          stdev: function(_) {\n            if (arguments.length) {\n              sigma = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return sigma;\n            }\n          },\n          sample: () => sampleLogNormal(mu, sigma),\n          pdf: value => densityLogNormal(value, mu, sigma),\n          cdf: value => cumulativeLogNormal(value, mu, sigma),\n          icdf: p => quantileLogNormal(p, mu, sigma)\n        };\n\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function mixture(dists, weights) {\n    var dist = {}, m = 0, w;\n\n    function normalize(x) {\n      var w = [], sum = 0, i;\n      for (i=0; i<m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n      for (i=0; i<m; ++i) { w[i] /= sum; }\n      return w;\n    }\n\n    dist.weights = function(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    };\n\n    dist.distributions = function(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    };\n\n    dist.sample = function() {\n      var r = exports.random(),\n          d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    };\n\n    dist.pdf = function(x) {\n      for (var p=0, i=0; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    };\n\n    dist.cdf = function(x) {\n      for (var p=0, i=0; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    };\n\n    dist.icdf = function() {\n      throw Error('Mixture icdf not supported.');\n    };\n\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return min + (max - min) * exports.random();\n  }\n\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (value >= min && value <= max) ? 1 / (max - min) : 0;\n  }\n\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n  }\n\n  function uniform(min, max) {\n    var a, b,\n        dist = {\n          min: function(_) {\n            if (arguments.length) {\n              a = _ || 0;\n              return dist;\n            } else {\n              return a;\n            }\n          },\n          max: function(_) {\n            if (arguments.length) {\n              b = _ == null ? 1 : _;\n              return dist;\n            } else {\n              return b;\n            }\n          },\n          sample: () => sampleUniform(a, b),\n          pdf: value => densityUniform(value, a, b),\n          cdf: value => cumulativeUniform(value, a, b),\n          icdf: p => quantileUniform(p, a, b)\n        };\n\n    if (max == null) {\n      max = (min == null ? 1 : min);\n      min = 0;\n    }\n    return dist.min(min).max(max);\n  }\n\n  // Ordinary Least Squares\n  function ols(uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n          intercept = uY - slope * uX;\n\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d), v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n\n    const X = new Float64Array(data.length),\n          Y = new Float64Array(data.length);\n\n    let i = 0;\n    for (let d of data) {\n      X[i] = x(d);\n      Y[i] = y(d);\n      ++i;\n    }\n\n    return [X, Y];\n  }\n\n  function visitPoints(data, x, y, callback) {\n    let index = -1, i = -1, u, v;\n\n    for (let d of data) {\n      u = x(d, ++index, data);\n      v = y(d, index, data);\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function rSquared(data, x, y, uY, predict) {\n    let SSE = 0, SST = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n            sst = dy - uY;\n\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n\n    return 1 - SSE / SST;\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function linear(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      X += dx;\n      Y += dy;\n      XY += dx * dy;\n      X2 += dx * dx;\n      ++n;\n    });\n\n    const coef = ols(X / n, Y / n, XY / n, X2 / n),\n          predict = x => coef[0] + coef[1] * x;\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y / n, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function log(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      dx = Math.log(dx);\n      X += dx;\n      Y += dy;\n      XY += dx * dy;\n      X2 += dx * dx;\n      ++n;\n    });\n\n    const coef = ols(X / n, Y / n, XY / n, X2 / n),\n          predict = x => coef[0] + coef[1] * Math.log(x);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y / n, predict)\n    };\n  }\n\n  function exp(data, x, y) {\n    let Y = 0, YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const ly = Math.log(dy),\n            xy = dx * dy;\n      Y += dy;\n      XY += xy;\n      X2Y += dx * xy;\n      YL += dy * ly;\n      XYL += xy * ly;\n      ++n;\n    });\n\n    const coef = ols(XY / Y, YL / Y, XYL / Y, X2Y / Y),\n          predict = x => coef[0] * Math.exp(coef[1] * x);\n\n    coef[0] = Math.exp(coef[0]);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y / n, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  function pow(data, x, y) {\n    let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n            ly = Math.log(dy);\n      X += lx;\n      Y += ly;\n      XY += lx * ly;\n      X2 += lx * lx;\n      YS += dy;\n      ++n;\n    });\n\n    const coef = ols(X / n, Y / n, XY / n, X2 / n),\n          predict = x => coef[0] * Math.pow(x, coef[1]);\n\n    coef[0] = Math.exp(coef[0]);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS / n, predict)\n    };\n  }\n\n  function quad(data, x, y) {\n    let X = 0, Y = 0, X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0, n = 0;\n\n    visitPoints(data, x, y, (dx, dy) => {\n      const x2 = dx * dx;\n      X += dx;\n      Y += dy;\n      X2 += x2;\n      X3 += x2 * dx;\n      X4 += x2 * x2;\n      XY += dx * dy;\n      X2Y += x2 * dy;\n      ++n;\n    });\n\n    Y = Y / n;\n    XY = XY - X * Y;\n    X2Y = X2Y - X2 * Y;\n\n    const XX = X2 - X * X / n,\n          XX2 = X3 - (X2 * X / n),\n          X2X2 = X4 - (X2 * X2 / n),\n          d = (XX * X2X2 - XX2 * XX2),\n          a = (X2Y * XX - XY * XX2) / d,\n          b = (XY * X2X2 - X2Y * XX2) / d,\n          c = Y - (b * (X / n)) - (a * (X2 / n)),\n          predict = x => a * x * x + b * x + c;\n\n    return {\n      coef: [c, b, a],\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  // Adapted from d3-regression by Harry Stevens\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n  function poly(data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 1) return linear(data, x, y);\n    if (order === 2) return quad(data, x, y);\n\n    const [xv, yv] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n\n    let Y = 0, i, j, l, v, c;\n\n    for (i = 0; i < n; ++i) {\n      Y += yv[i];\n    }\n\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n\n      c = new Float64Array(k);\n      for (j = 0; j < k; ++j) {\n        for (l = 0, v = 0; l < n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          predict = x => {\n            let y = 0, i = 0, n = coef.length;\n            for (; i < n; ++i) y += coef[i] * Math.pow(x, i);\n            return y;\n          };\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y / n, predict)\n    };\n  }\n\n  // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n          coef = [];\n\n    let i, j, k, r, t;\n\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n\n    return coef;\n  }\n\n  const maxiters = 2,\n        epsilon = 1e-12;\n\n  // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n  function loess(data, x, y, bandwidth) {\n    const [xv, yv] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n          yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters; ) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0,\n            denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        }\n\n        // linear regression fit\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = d3Array.median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n\n      for (let i = 0, arg, w; i < n; ++i){\n        arg = residuals[i] / (6 * medianResidual);\n        // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n        robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n      }\n    }\n\n    return output(xv, yhat);\n  }\n\n  // weighting kernel for local regression\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  }\n\n  // advance sliding window interval of nearest neighbors\n  function updateInterval(xv, i, interval) {\n    let val = xv[i],\n        left = interval[0],\n        right = interval[1] + 1;\n\n    if (right >= xv.length) return;\n\n    // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n    while (i > left && (xv[right] - val) <= (val - xv[left])) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  }\n\n  // generate smoothed output points\n  // average points with repeated x values\n  function output(xv, yhat) {\n    const n = xv.length,\n          out = [];\n\n    for (let i=0, cnt=0, prev=[], v; i<n; ++i) {\n      v = xv[i];\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / (++cnt);\n      } else {\n        // add new output point\n        cnt = 0;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n    return out;\n  }\n\n  // subdivide up to accuracy of 0.1 degrees\n  const MIN_RADIANS = 0.1 * Math.PI / 180;\n\n  // Adaptively sample an interpolated function over a domain extent\n  function sampleCurve(f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n\n    const point = x => [x, f(x)],\n          minX = extent[0],\n          maxX = extent[1],\n          span = maxX - minX,\n          stop = span / maxSteps,\n          prev = [point(minX)],\n          next = [];\n\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + (i / minSteps) * span));\n      }\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + (i / minSteps) * span));\n      }\n    }\n\n    let p0 = prev[0],\n        p1 = next[next.length - 1];\n\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n\n      if (pm[0] - p0[0] >= stop && angleDelta(p0, pm, p1) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n      p1 = next[next.length - 1];\n    }\n\n    return prev;\n  }\n\n  function angleDelta(p, q, r) {\n    const a0 = Math.atan2(r[1] - p[1], r[0] - p[0]),\n          a1 = Math.atan2(q[1] - p[1], q[0] - p[0]);\n    return Math.abs(a0 - a1);\n  }\n\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.dotbin = dotbin;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = kde;\n  exports.randomLCG = lcg;\n  exports.randomLogNormal = lognormal;\n  exports.randomMixture = mixture;\n  exports.randomNormal = gaussian;\n  exports.randomUniform = uniform;\n  exports.regressionExp = exp;\n  exports.regressionLinear = linear;\n  exports.regressionLoess = loess;\n  exports.regressionLog = log;\n  exports.regressionPoly = poly;\n  exports.regressionPow = pow;\n  exports.regressionQuad = quad;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.setRandom = setRandom;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","vega","d3","d3Array","numbers","values","valueof","index","value","undefined","smoothing","v","thresh","n","length","a","b","c","d","quantiles","array","p","f","Float64Array","from","sort","ascending","map","_","quantileSorted","quartiles","sampleNormal","mean","stdev","nextSample","x","NaN","random","y","rds","Math","sqrt","log","densityNormal","z","exp","SQRT2PI","cumulativeNormal","Z","abs","cd","quantileNormal","w","Number","isFinite","Infinity","SQRT2","gaussian","mu","sigma","dist","arguments","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","min","max","densityUniform","cumulativeUniform","quantileUniform","ols","uX","uY","uXY","uX2","delta","slope","points","data","filter","u","X","Y","i","visitPoints","callback","rSquared","predict","SSE","SST","dx","dy","sse","sst","linear","XY","X2","coef","quad","X3","X4","X2Y","x2","XX","XX2","X2X2","gaussianElimination","matrix","j","k","r","t","PI","MIN_RADIANS","bin","maxb","maxbins","base","logb","div","divide","extent","span","step","steps","level","ceil","minstep","pow","round","eps","precision","nice","floor","start","stop","bootstrapCI","samples","alpha","Array","quantile","dotbin","smooth","randomInteger","integer","dist.min","dist.max","dist.sample","dist.pdf","dist.cdf","dist.icdf","randomKDE","kde","support","bandwidth","kernel","dist.data","dist.bandwidth","q","h","variance","Error","randomLCG","lcg","seed","randomLogNormal","lognormal","randomMixture","mixture","dists","weights","m","dist.weights","sum","distributions","dist.distributions","randomNormal","randomUniform","uniform","regressionExp","YL","XYL","ly","xy","regressionLinear","regressionLoess","loess","xv","yv","bw","yhat","residuals","robustWeights","fill","iter","maxiters","interval","i0","i1","W","denom","edge","xk","yk","xkw","val","left","right","medianResidual","median","epsilon","arg","out","cnt","prev","push","regressionLog","regressionPoly","poly","order","lhs","rhs","l","regressionPow","YS","lx","regressionQuad","sampleCurve","minSteps","maxSteps","point","minX","maxX","next","p0","p1","pm","atan2","a0","a1","pop","setRandom","Object","defineProperty"]
}
