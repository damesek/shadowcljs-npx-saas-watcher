{
"version":3,
"file":"module$node_modules$vega_projection$build$vega_projection.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/vega-projection/build/vega-projection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_projection$build$vega_projection\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-geo')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-geo'], factory) :\n  (global = global || self, factory(global.vega = {}, global.d3));\n}(this, function (exports, d3Geo) { 'use strict';\n\n  var defaultPath = d3Geo.geoPath();\n\n  var projectionProperties = [\n    // standard properties in d3-geo\n    'clipAngle',\n    'clipExtent',\n    'scale',\n    'translate',\n    'center',\n    'rotate',\n    'parallels',\n    'precision',\n    'reflectX',\n    'reflectY',\n\n    // extended properties in d3-geo-projections\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n  ];\n\n  /**\n   * Augment projections with their type and a copy method.\n   */\n  function create(type, constructor) {\n    return function projection() {\n      var p = constructor();\n\n      p.type = type;\n\n      p.path = d3Geo.geoPath().projection(p);\n\n      p.copy = p.copy || function() {\n        var c = projection();\n        projectionProperties.forEach(function(prop) {\n          if (p[prop]) c[prop](p[prop]());\n        });\n        c.path.pointRadius(p.path.pointRadius());\n        return c;\n      };\n\n      return p;\n    };\n  }\n\n  function projection(type, proj) {\n    if (!type || typeof type !== 'string') {\n      throw new Error('Projection type must be a name string.');\n    }\n    type = type.toLowerCase();\n    if (arguments.length > 1) {\n      projections[type] = create(type, proj);\n      return this;\n    } else {\n      return projections[type] || null;\n    }\n  }\n\n  function getProjectionPath(proj) {\n    return (proj && proj.path) || defaultPath;\n  }\n\n  var projections = {\n    // base d3-geo projection types\n    albers:               d3Geo.geoAlbers,\n    albersusa:            d3Geo.geoAlbersUsa,\n    azimuthalequalarea:   d3Geo.geoAzimuthalEqualArea,\n    azimuthalequidistant: d3Geo.geoAzimuthalEquidistant,\n    conicconformal:       d3Geo.geoConicConformal,\n    conicequalarea:       d3Geo.geoConicEqualArea,\n    conicequidistant:     d3Geo.geoConicEquidistant,\n    equalEarth:           d3Geo.geoEqualEarth,\n    equirectangular:      d3Geo.geoEquirectangular,\n    gnomonic:             d3Geo.geoGnomonic,\n    identity:             d3Geo.geoIdentity,\n    mercator:             d3Geo.geoMercator,\n    naturalEarth1:        d3Geo.geoNaturalEarth1,\n    orthographic:         d3Geo.geoOrthographic,\n    stereographic:        d3Geo.geoStereographic,\n    transversemercator:   d3Geo.geoTransverseMercator\n  };\n\n  for (var key in projections) {\n    projection(key, projections[key]);\n  }\n\n  exports.getProjectionPath = getProjectionPath;\n  exports.projection = projection;\n  exports.projectionProperties = projectionProperties;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","vega","d3","d3Geo","create","type","constructor","projection","p","path","geoPath","copy","c","projectionProperties","forEach","prop","pointRadius","proj","Error","toLowerCase","arguments","length","projections","defaultPath","albers","geoAlbers","albersusa","geoAlbersUsa","azimuthalequalarea","geoAzimuthalEqualArea","azimuthalequidistant","geoAzimuthalEquidistant","conicconformal","geoConicConformal","conicequalarea","geoConicEqualArea","conicequidistant","geoConicEquidistant","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","gnomonic","geoGnomonic","identity","geoIdentity","mercator","geoMercator","naturalEarth1","geoNaturalEarth1","orthographic","geoOrthographic","stereographic","geoStereographic","transversemercator","geoTransverseMercator","key","getProjectionPath","Object","defineProperty","value"]
}
