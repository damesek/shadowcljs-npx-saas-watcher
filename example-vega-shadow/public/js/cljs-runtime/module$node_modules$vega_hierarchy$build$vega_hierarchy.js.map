{
"version":3,
"file":"module$node_modules$vega_hierarchy$build$vega_hierarchy.js",
"lineCount":19,
"mappings":"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,gBAA/B,CAAuCC,YAAvC,CAAqD,CACxI,SAAS,CAACL,MAAD,CAASM,OAAT,CAAkB,CACP,QAAnB,GAAA,MAAOF,iBAAP,EAAiD,WAAjD,GAA+B,MAAOD,OAAtC,CAA+DG,OAAA,CAAQF,gBAAR,CAAiBF,OAAA,CAAQ,uDAAR,CAAjB,CAA2CA,OAAA,CAAQ,+CAAR,CAA3C,CAAiEA,OAAA,CAAQ,oDAAR,CAAjE,CAA/D,CACkB,UAAlB,GAAA,MAAOK,OAAP,EAAgCA,MAAAC,IAAhC,CAA6CD,MAAA,CAAO,CAAC,SAAD;AAAY,eAAZ,CAA6B,WAA7B,CAA0C,cAA1C,CAAP,CAAkED,OAAlE,CAA7C,EACCN,MAAA,CAASA,MAAT,EAAmBS,IAAnB,CAAyBH,OAAA,EAASN,MAAAU,KAAA,CAAcV,MAAAU,KAAd,EAA6B,EAA7B,CAAiCV,MAAAU,KAAAC,WAAjC,CAA0D,EAAnE,EAAwEX,MAAAU,KAAxE,CAAqFV,MAAAU,KAArF,CAAkGV,MAAAY,GAAlG,CAD1B,CAF0B,CAA3B,CAAA,CAIC,IAJD,CAIO,QAAS,CAACR,OAAD,CAAUS,YAAV,CAAwBC,QAAxB,CAAkCC,WAAlC,CAA+C,CAG9DC,QAASA,OAAM,CAACC,IAAD,CAAOC,GAAP,CAAYC,MAAZ,CAAoB,CACjC,IAAIC,IAAM,EACVH,KAAAI,KAAA,CAAU,QAAQ,CAACC,IAAD,CAAO,CACvB,IAAIC,EAAID,IAAAE,KACJL,OAAA,CAAOI,CAAP,CAAJ,GAAeH,GAAA,CAAIF,GAAA,CAAIK,CAAJ,CAAJ,CAAf,CAA6BD,IAA7B,CAFuB,CAAzB,CAIAL,KAAAD,OAAA,CAAcI,GACd,OAAOH,KAP0B,CAoBnCQ,QAASA,KAAI,CAACC,MAAD,CAAS,CACpBb,YAAAc,UAAAC,KAAA,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCF,MAAxC,CADoB,CAetBG,QAASA,SAAQ,CAACC,CAAD,CAAI,CACnB,MAAOA,EAAAC,OADY,CAkDrBC,QAASA,cAAI,EAAG,CAIdC,QAASA,MAAK,CAACC,KAAD;AAAQC,KAAR,CAAe,CAC3B,GAAIA,KAAJ,EAAaC,IAAAC,OAAb,CACE,MAAOH,MAYT,KAd2B,IAKvBI,EAAK,EALkB,CAMvBR,EAAII,KAAAG,OANmB,CAOvBnB,IAAMkB,IAAA,CAAKD,KAAA,EAAL,CAPiB,CAQvBI,QARuB,CASvBC,KATuB,CAUvBC,YAAc,EAVS,CAWvBV,MAXuB,CAYvBW,OAAS,EAEb,CAAO,EAAEJ,CAAT,CAAaR,CAAb,CAAA,CACES,QACA,CADWrB,GAAA,CAAIsB,KAAJ,CAAYN,KAAA,CAAMI,CAAN,CAAZ,CACX,CADmC,EACnC,CAAA,CAAIP,MAAJ,CAAaU,WAAA,CAAYF,QAAZ,CAAb,EACER,MAAAY,KAAA,CAAYH,KAAZ,CADF,CAGEC,WAAA,CAAYF,QAAZ,CAHF,CAG0B,CAACC,KAAD,CAI5B,KAAKD,QAAL,GAAiBE,YAAjB,CACEC,MAAA,CAAOH,QAAP,CAAA,CAAmBN,KAAA,CAAMQ,WAAA,CAAYF,QAAZ,CAAN,CAA6BJ,KAA7B,CAGrB,OAAOO,OA3BoB,CA8B7BE,QAASA,QAAO,CAACxB,GAAD,CAAMe,KAAN,CAAa,CAC3B,GAAI,EAAEA,KAAN,CAAcC,IAAAC,OAAd,CAA2B,MAAOjB,IADP,KAEvBc,MAAQ,EAFe,CAEXW,CAChB,KAAKA,CAAL,GAAUzB,IAAV,CACEc,KAAAS,KAAA,CAAW,CAACzB,IAAK2B,CAAN,CAASd,OAAQa,OAAA,CAAQxB,GAAA,CAAIyB,CAAJ,CAAR,CAAgBV,KAAhB,CAAjB,CAAX,CAEF,OAAOD,MANoB,CAlCf,IACVE;AAAO,EADG,CAEVJ,IAyCJ,OAAOA,KAAP,CAAc,CACZY,QAASA,QAAA,CAAAV,KAAA,CAAS,CAAA,MAAAU,QAAA,CAAQX,KAAA,CAAMC,KAAN,CAAa,CAAb,CAAR,CAAyB,CAAzB,CAAA,CADN,CAEZhB,IAAKA,QAAA,CAAA4B,CAAA,CAAK,CAAEV,IAAAO,KAAA,CAAUG,CAAV,CAAc,OAAOd,KAAvB,CAFE,CA3CA,CAsDhBe,QAASA,gBAAe,CAACrB,MAAD,CAAS,CAC/Bb,YAAAc,UAAAC,KAAA,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCF,MAAxC,CAD+B,CAmCjCsB,QAASA,UAAS,CAACC,MAAD,CAASvB,MAAT,CAAiBwB,CAAjB,CAAoB,CACpC,IADoC,IAC3BC,CAD2B,CACxBb,EAAE,CADsB,CACnBR,EAAEJ,MAAAW,OAAnB,CAAkCC,CAAlC,CAAoCR,CAApC,CAAuC,EAAEQ,CAAzC,CAEE,GADAa,CACI,CADAzB,MAAA,CAAOY,CAAP,CACA,CAAAa,CAAA,GAAKD,EAAT,CAAYD,MAAA,CAAOE,CAAP,CAAA,CAAUD,CAAA,CAAEC,CAAF,CAAV,CAHsB,CAetCC,QAASA,kBAAiB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CAC/B,MAAOD,EAAAE,OAAA,GAAaD,CAAAC,OAAb,CAAwB,CAAxB,CAA4B,CADJ,CAYjCC,QAASA,KAAI,CAAC9B,MAAD,CAAS,CACpBqB,eAAAnB,KAAA,CAAqB,IAArB,CAA2BF,MAA3B,CADoB,CAiCtB+B,QAASA,UAAS,CAAC/B,MAAD,CAAS,CACzBqB,eAAAnB,KAAA,CAAqB,IAArB,CAA2BF,MAA3B,CADyB,CAiC3BgC,QAASA,SAAQ,CAAChC,MAAD,CAAS,CACxBb,YAAAc,UAAAC,KAAA,CAA4B,IAA5B;AAAkC,IAAlC,CAAwCF,MAAxC,CADwB,CA2D1BiC,QAASA,KAAI,CAACjC,MAAD,CAAS,CACpBqB,eAAAnB,KAAA,CAAqB,IAArB,CAA2BF,MAA3B,CADoB,CAwCtBkC,QAASA,UAAS,CAAClC,MAAD,CAAS,CACzBb,YAAAc,UAAAC,KAAA,CAA4B,IAA5B,CAAkC,EAAlC,CAAsCF,MAAtC,CADyB,CAsE3BmC,QAASA,QAAO,CAACnC,MAAD,CAAS,CACvBqB,eAAAnB,KAAA,CAAqB,IAArB,CAA2BF,MAA3B,CADuB,CA5ZzBD,IAAAqC,WAAA,CAAkB,CAChB,KAAQ,MADQ,CAEhB,SAAY,CAAC,WAAc,CAAA,CAAf,CAAqB,QAAW,CAAA,CAAhC,CAFI,CAGhB,OAAU,CACR,CAAE,KAAQ,MAAV,CAAkB,KAAQ,OAA1B,CAAmC,MAAS,CAAA,CAA5C,CADQ,CAER,CAAE,KAAQ,UAAV,CAAsB,KAAQ,SAA9B,CAFQ,CAHM,CASFhD,SAAAiD,SAAAC,CAAkBvC,IAAlBuC,CAAwBnD,YAAAc,UAAxBqC,CAMhBC,UAAA,CAAsBC,QAAQ,CAAChB,CAAD,CAAIiB,KAAJ,CAAW,CAClCA,KAAAC,OAAL,EACEtD,QAAAuD,MAAA,CAAe,kDAAf,CAFqC,KAKnCC;AAAMpB,CAAAqB,SAL6B,CAMnCC,IAAMtB,CAAAuB,SAAA,EAN6B,CAOnCC,IAAMP,KAAAQ,MAAA,EAP6B,CAQnC1D,KAAO,IAAAuB,MAEX,IAAI,CAACvB,IAAL,EAAauD,GAAb,EAAoBL,KAAAS,QAAA,EAApB,CAEM3D,IA2BJ,EA1BEA,IAAAI,KAAA,CAAU,QAAA,CAAAC,IAAA,CAAQ,CACZA,IAAAO,SAAJ,EAAqBhB,YAAAgE,QAAA,CAAqBvD,IAAAE,KAArB,CAArB,EACEkD,GAAAI,IAAAnC,KAAA,CAAarB,IAAAE,KAAb,CAFc,CAAlB,CA0BF,CAlBA,IAAAgB,MAkBA,CAlBavB,IAkBb,CAlBoBF,WAAAgE,UAAA,CAAsB,CACxChD,OAAQjB,QAAAoB,MAAA,CAAegB,CAAAd,KAAf,CAAA4C,OAAA,CACE,QAAA,CAAClD,CAAD,CAAIe,CAAJ,CAAU,CAAEf,CAAAZ,IAAA,CAAM2B,CAAN,CAAU,OAAOf,EAAnB,CADZ,CACqCE,aAAA,EADrC,CAAAY,QAAA,CAEG8B,GAAAN,OAFH,CADgC,CAAtB,CAIjBvC,QAJiB,CAkBpB,CAXIyC,GAWJ,EAVErD,IAAAI,KAAA,CAAU,QAAA,CAAAC,IAAA,CAAQ,CACZA,IAAAO,SAAJ,GACEP,IAEA,CAFOT,YAAAoE,OAAA,CAAoB3D,IAAAE,KAApB,CAEP,CADAkD,GAAAQ,IAAAvC,KAAA,CAAarB,IAAb,CACA,CAAAoD,GAAAN,OAAAzB,KAAA,CAAgBrB,IAAhB,CAHF,CADgB,CAAlB,CAUF,CAAAN,MAAA,CAAOC,IAAP,CAAaJ,YAAAsE,QAAb;AAAmCtE,YAAAsE,QAAnC,CAGFT,IAAAN,OAAAgB,KAAA,CAAkBnE,IAClB,OAAOyD,IA3CgC,CAwGvB5D,SAAAiD,SAAAsB,CAAkBtC,eAAlBsC,CAAmCxE,YAAAc,UAAnC0D,CAElBpB,UAAA,CAAwBqB,QAAQ,CAACpC,CAAD,CAAIiB,KAAJ,CAAW,CACpCA,KAAAC,OAAL,EAAsBD,KAAAC,OAAAgB,KAAtB,EACEtE,QAAAuD,MAAA,CAAe,IAAAkB,YAAAC,KAAf,CACI,iDADJ,CAFuC,KAMrCvC,OAAS,IAAAA,OAAA,CAAYC,CAAAuC,OAAZ,CAN4B,CAOrCC,OAAS,IAAAA,OAP4B,CAQrCN,KAAOjB,KAAAC,OAAAgB,KAR8B,CASrCO,GAAKzC,CAAAyC,GAALA,EAAaD,MAEbxC,EAAA0C,MAAJ,CAAaR,IAAAS,IAAA,CAAS3C,CAAA0C,MAAT,CAAb,CAAqCR,IAAAU,MAAA,EACjC5C,EAAA6C,KAAJ,EAAYX,IAAAW,KAAA,CAAUlF,YAAAmF,cAAA,CAA2B9C,CAAA6C,KAA3B,CAAmC,QAAA,CAAAjD,CAAA,CAAKtB,CAAAA,MAAAsB,EAAAtB,KAAAA,CAAxC,CAAV,CAEZwB,UAAA,CAAUC,MAAV,CAAkB,IAAAvB,OAAlB;AAA+BwB,CAA/B,CACID,OAAAgD,WAAJ,EACEhD,MAAAgD,WAAA,CAAmC,CAAA,CAAjB,GAAA/C,CAAA+C,WAAA,CAAyB7C,iBAAzB,CAA6CtC,QAAAoF,IAA/D,CAGF,IAAI,CACF,IAAA1D,MAAA,CAAaS,MAAA,CAAOmC,IAAP,CADX,CAEF,MAAOe,GAAP,CAAY,CACZrF,QAAAuD,MAAA,CAAe8B,GAAf,CADY,CAGdf,IAAA/D,KAAA,CAAU,QAAQ,CAACC,IAAD,CAAO,CAczB,IADA,IAAIC,EAbiCD,IAa7BE,KAAR,CACSc,EAAE,CADX,CACcR,EAd6B4D,MAc3BrD,OAAFP,CAAgB,CAA9B,CAAiCQ,CAAjC,CAAmCR,CAAnC,CAAsC,EAAEQ,CAAxC,CACEf,CAAA,CAfiDoE,EAe/C,CAAGrD,CAAH,CAAF,CAAA,CAfmChB,IAexB,CAf8BoE,MAezB,CAAOpD,CAAP,CAAL,CAEbf,EAAA,CAjBmDoE,EAiBjD,CAAG7D,CAAH,CAAF,CAAA,CAjBqCR,IAiB1BO,SAAA,CAjB0BP,IAiBVO,SAAAQ,OAAhB,CAAuC,CAjBzB,CAAzB,CAEA,OAAO8B,MAAAiC,OAAA,CAAalD,CAAAuB,SAAA,EAAb,CAAA4B,SAAA,CAAoCV,EAApC,CAAAU,SAAA,CAAiD,MAAjD,CA1BkC,CAgD3C,KAAIC,OAAS,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,OAAhB,CAAyB,UAAzB,CAYb9C,KAAAM,WAAA,CAAkB,CAChB,KAAQ,MADQ,CAEhB,SAAY,CAAC,KAAQ,CAAA,CAAT,CAAe,SAAY,CAAA,CAA3B,CAFI,CAGhB,OAAU,CACR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,OAA3B,CADQ;AAER,CAAE,KAAQ,MAAV,CAAkB,KAAQ,SAA1B,CAFQ,CAGR,CAAE,KAAQ,SAAV,CAAqB,KAAQ,QAA7B,CAAuC,UAAW,CAAlD,CAHQ,CAIR,CAAE,KAAQ,QAAV,CAAoB,KAAQ,OAA5B,CAAqC,UAAW,IAAhD,CAJQ,CAKR,CAAE,KAAQ,MAAV,CAAkB,KAAQ,QAA1B,CAAoC,MAAS,CAAA,CAA7C,CAAmD,OAAU,CAA7D,CALQ,CAMR,CAAE,KAAQ,IAAV,CAAgB,KAAQ,QAAxB,CAAkC,MAAS,CAAA,CAA3C,CAAiD,OAAUwC,MAAAjE,OAA3D,CAA0E,UAAWiE,MAArF,CANQ,CAHM,CAalB,KAAIC,YAAczF,QAAAiD,SAAA,CAAkBP,IAAlB,CAAwBT,eAAxB,CAElBwD,YAAAtD,OAAA,CAAqBlC,WAAAyF,KAErBD,YAAA7E,OAAA,CAAqB,CAAC,QAAD,CAAW,MAAX,CAAmB,SAAnB,CAErB6E,YAAAb,OAAA,CAAqBY,MAEjBG,OAAAA,CAAW,4BAAA,MAAA,CAAA,GAAA,CAYfhD,UAAAK,WAAA,CAAuB,CACrB,KAAQ,WADa,CAErB,SAAY,CAAC,KAAQ,CAAA,CAAT;AAAe,SAAY,CAAA,CAA3B,CAFS,CAGrB,OAAU,CACR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,OAA3B,CADQ,CAER,CAAE,KAAQ,MAAV,CAAkB,KAAQ,SAA1B,CAFQ,CAGR,CAAE,KAAQ,SAAV,CAAqB,KAAQ,QAA7B,CAAuC,UAAW,CAAlD,CAHQ,CAIR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,SAA3B,CAAsC,UAAW,CAAA,CAAjD,CAJQ,CAKR,CAAE,KAAQ,MAAV,CAAkB,KAAQ,QAA1B,CAAoC,MAAS,CAAA,CAA7C,CAAmD,OAAU,CAA7D,CALQ,CAMR,CAAE,KAAQ,IAAV,CAAgB,KAAQ,QAAxB,CAAkC,MAAS,CAAA,CAA3C,CAAiD,OAAU2C,MAAApE,OAA3D,CAA4E,UAAWoE,MAAvF,CANQ,CAHW,CAanBC,YAAAA,CAAc5F,QAAAiD,SAAA,CAAkBN,SAAlB,CAA6BV,eAA7B,CAElB2D,YAAAzD,OAAA,CAAqBlC,WAAA4F,UAErBD,YAAAhF,OAAA,CAAqB,CAAC,MAAD,CAAS,OAAT,CAAkB,SAAlB,CAErBgF,YAAAhB,OAAA,CAAqBe,MAcrB/C,SAAAI,WAAA,CAAsB,CACpB,KAAQ,UADY,CAEpB,SAAY,CAAC,WAAc,CAAA,CAAf,CAFQ;AAGpB,OAAU,CACR,CAAE,KAAQ,KAAV,CAAiB,KAAQ,OAAzB,CAAkC,SAAY,CAAA,CAA9C,CADQ,CAER,CAAE,KAAQ,WAAV,CAAuB,KAAQ,OAA/B,CAAwC,SAAY,CAAA,CAApD,CAFQ,CAHU,CASJhD,SAAAiD,SAAA6C,CAAkBlD,QAAlBkD,CAA4B/F,YAAAc,UAA5BiF,CAElB3C,UAAA,CAAwB4C,QAAQ,CAAC3D,CAAD,CAAIiB,KAAJ,CAAW,CACpCA,KAAAC,OAAL,EACEtD,QAAAuD,MAAA,CAAe,sDAAf,CAFuC,KAKrCpD,KAAO,IAAAuB,MAL8B,CAMrCgC,IAAMtB,CAAAuB,SAAA,EAN+B,CAOrCC,IAAMP,KAAA2C,KAAA,CAAW3C,KAAA4C,IAAX,CAAAC,YAAA,CAAkC7C,KAAA8C,OAAlC,CACNC,MAAAA,CAAM,CAAC,IAAA1E,MAAP0E,EACM1C,GADN0C,EAEM/C,KAAAS,QAAA,CAAcT,KAAAgD,QAAd,CAFND,EAGM/C,KAAAM,SAAA,CAAevB,CAAAhC,IAAAwE,OAAf,CAHNwB,EAIM/C,KAAAM,SAAA,CAAevB,CAAAkE,UAAA1B,OAAf,CAGVhB,IAAAN,OAAA,CAAaM,GAAAN,OAAAiD,MAAA,EAETH,MAAJ;CAEIjG,IAFJ,CACMyD,GAAAN,OAAA/B,OAAJ,CACSrB,MAAA,CACLD,WAAAuG,SAAA,EAAAC,GAAA,CAA0BrE,CAAAhC,IAA1B,CAAAsG,SAAA,CAA0CtE,CAAAkE,UAA1C,CAAA,CAAuD1C,GAAAN,OAAvD,CADK,CAEHlB,CAAAhC,IAFG,CAEIJ,QAAA2G,OAFJ,CADT,CAKSzG,MAAA,CAAOD,WAAAuG,SAAA,EAAA,CAAuB,CAAC,EAAD,CAAvB,CAAP,CAAqCpE,CAAAhC,IAArC,CAA4CgC,CAAAhC,IAA5C,CANX,CAUAwD,IAAAN,OAAAgB,KAAA,CAAkB,IAAA5C,MAAlB,CAA+BvB,IAC/B,OAAOyD,IA5BkC,CA+B3C,KAAIgD,QAAU,CACZC,KAAM5G,WAAAE,KADM,CAEZ2G,QAAS7G,WAAA6G,QAFG,CAKVC,OAAAA,CAAW,CAAC,GAAD,CAAM,GAAN,CAAW,OAAX,CAAoB,UAApB,CAYflE,KAAAG,WAAA,CAAkB,CAChB,KAAQ,MADQ,CAEhB,SAAY,CAAC,KAAQ,CAAA,CAAT,CAAe,SAAY,CAAA,CAA3B,CAFI,CAGhB,OAAU,CACR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,OAA3B,CADQ,CAER,CAAE,KAAQ,MAAV,CAAkB,KAAQ,SAA1B,CAFQ,CAGR,CAAE,KAAQ,QAAV,CAAoB,KAAQ,MAA5B,CAAoC,UAAW,MAA/C,CAAuD,OAAU,CAAC,MAAD,CAAS,SAAT,CAAjE,CAHQ;AAIR,CAAE,KAAQ,MAAV,CAAkB,KAAQ,QAA1B,CAAoC,MAAS,CAAA,CAA7C,CAAmD,OAAU,CAA7D,CAJQ,CAKR,CAAE,KAAQ,UAAV,CAAsB,KAAQ,QAA9B,CAAwC,MAAS,CAAA,CAAjD,CAAuD,OAAU,CAAjE,CALQ,CAMR,CAAE,KAAQ,YAAV,CAAwB,KAAQ,SAAhC,CAA2C,UAAW,CAAA,CAAtD,CANQ,CAOR,CAAE,KAAQ,IAAV,CAAgB,KAAQ,QAAxB,CAAkC,MAAS,CAAA,CAA3C,CAAiD,OAAU+D,MAAAxF,OAA3D,CAA4E,UAAWwF,MAAvF,CAPQ,CAHM,CAcdC,YAAAA,CAAchH,QAAAiD,SAAA,CAAkBJ,IAAlB,CAAwBZ,eAAxB,CAKlB+E,YAAA7E,OAAA,CAAqB8E,QAAQ,CAACtC,MAAD,CAAS,CAChCuC,MAAAA,CAAIvC,MAAJuC,EAAc,MAClB,IAAIlH,QAAAmH,eAAA,CAAwBP,OAAxB,CAAiCM,MAAjC,CAAJ,CAAyC,MAAON,QAAA,CAAQM,MAAR,CAAA,EAC3ClH,SAAAuD,MAAA,CAAe,mCAAf,CAAqD2D,MAArD,CAH+B,CAMtCF,YAAApG,OAAA,CAAqB,CAAC,MAAD,CAAS,UAAT,CAErBoG,YAAApC,OAAA;AAAqBmC,MAarBjE,UAAAE,WAAA,CAAuB,CACrB,KAAQ,WADa,CAErB,SAAY,CAAC,KAAQ,CAAA,CAAT,CAAe,UAAa,CAAA,CAA5B,CAAkC,QAAW,CAAA,CAA7C,CAFS,CAGrB,OAAU,EAHW,CAMLhD,SAAAiD,SAAAmE,CAAkBtE,SAAlBsE,CAA6BrH,YAAAc,UAA7BuG,CAElBjE,UAAA,CAAwBkE,QAAQ,CAACjF,CAAD,CAAIiB,KAAJ,CAAW,CACrCiE,CAAAA,CAAQ,IAAA5F,MAD6B,KAErCvB,KAAOkD,KAAAC,OAAPnD,EAAuBkD,KAAAC,OAAAgB,KAFc,CAGrCV,IAAMP,KAAA2C,KAAA,CAAW3C,KAAAkE,UAAX,CAH+B,CAIrCC,IAAM,EAELrH,KAAL,EAAWH,QAAAuD,MAAA,CAAe,kDAAf,CAEPF,MAAAS,QAAA,CAAcT,KAAAgD,QAAd,CAAJ,EAEEzC,GAAAI,IAaA,CAbUsD,CAaV,CAVAjE,KAAAoE,MAAA,CAAYpE,KAAA8C,OAAZ,CAA0B,QAAQ,CAAC1F,CAAD,CAAI,CAAE+G,GAAA,CAAIzH,YAAAsE,QAAA,CAAqB5D,CAArB,CAAJ,CAAA,CAA+B,CAAjC,CAAtC,CAUA,CAPAN,IAAAI,KAAA,CAAU,QAAQ,CAACC,IAAD,CAAO,CAAA,IACnBC,EAAID,IAAAE,KAER,EADI2B,IACJ;AADQ7B,IAAAiC,OACR,EADuBjC,IAAAiC,OAAA/B,KACvB,GAAS8G,GAAA,CAAIzH,YAAAsE,QAAA,CAAqB5D,CAArB,CAAJ,CAAT,EAAyC+G,GAAA,CAAIzH,YAAAsE,QAAA,CAAqBhC,IAArB,CAAJ,CAAzC,EACEuB,GAAAQ,IAAAvC,KAAA,CAAa9B,YAAAoE,OAAA,CAAoB,CAACb,OAAQjB,IAAT,CAAYqF,OAAQjH,CAApB,CAApB,CAAb,CAJqB,CAAzB,CAOA,CAAA,IAAAiB,MAAA,CAAakC,GAAAQ,IAff,EAkBSf,KAAAS,QAAA,CAAcT,KAAAsE,IAAd,CAlBT,GAoBEtE,KAAAoE,MAAA,CAAYpE,KAAAsE,IAAZ,CAAuB,QAAQ,CAAClH,CAAD,CAAI,CAAE+G,GAAA,CAAIzH,YAAAsE,QAAA,CAAqB5D,CAArB,CAAJ,CAAA,CAA+B,CAAjC,CAAnC,CAGA,CAAA6G,CAAAM,QAAA,CAAc,QAAQ,CAACC,IAAD,CAAO,CAC3B,CAAIL,GAAA,CAAIzH,YAAAsE,QAAA,CAAqBwD,IAAAvE,OAArB,CAAJ,CAAJ,EAA8CkE,GAAA,CAAIzH,YAAAsE,QAAA,CAAqBwD,IAAAH,OAArB,CAAJ,CAA9C,GACE9D,GAAAF,IAAA7B,KAAA,CAAagG,IAAb,CAFyB,CAA7B,CAvBF,CA8BA,OAAOjE,IAtCkC,CAyC3C,KAAIkE,MAAQ,CACVC,OAAQ9H,WAAA+H,cADE,CAEVC,KAAMhI,WAAAiI,YAFI,CAGV3B,MAAOtG,WAAAkI,aAHG;AAIVC,UAAWnI,WAAAoI,iBAJD,CAKVC,SAAUrI,WAAAsI,gBALA,CAMVC,WAAYvI,WAAAwI,kBANF,CASRC,OAAAA,CAAW,4BAAA,MAAA,CAAA,GAAA,CAYf3F,QAAAC,WAAA,CAAqB,CACnB,KAAQ,SADW,CAEnB,SAAY,CAAC,KAAQ,CAAA,CAAT,CAAe,SAAY,CAAA,CAA3B,CAFO,CAGnB,OAAU,CACR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,OAA3B,CADQ,CAER,CAAE,KAAQ,MAAV,CAAkB,KAAQ,SAA1B,CAFQ,CAGR,CAAE,KAAQ,QAAV,CAAoB,KAAQ,MAA5B,CAAoC,UAAW,UAA/C,CACE,OAAU,iDAAA,MAAA,CAAA,GAAA,CADZ,CAHQ,CAKR,CAAE,KAAQ,SAAV,CAAqB,KAAQ,QAA7B,CAAuC,UAAW,CAAlD,CALQ,CAMR,CAAE,KAAQ,cAAV,CAA0B,KAAQ,QAAlC,CAA4C,UAAW,CAAvD,CANQ;AAOR,CAAE,KAAQ,cAAV,CAA0B,KAAQ,QAAlC,CAA4C,UAAW,CAAvD,CAPQ,CAQR,CAAE,KAAQ,YAAV,CAAwB,KAAQ,QAAhC,CAA0C,UAAW,CAArD,CARQ,CASR,CAAE,KAAQ,cAAV,CAA0B,KAAQ,QAAlC,CAA4C,UAAW,CAAvD,CATQ,CAUR,CAAE,KAAQ,eAAV,CAA2B,KAAQ,QAAnC,CAA6C,UAAW,CAAxD,CAVQ,CAWR,CAAE,KAAQ,aAAV,CAAyB,KAAQ,QAAjC,CAA2C,UAAW,CAAtD,CAXQ,CAYR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,QAA3B,CAAqC,UAAW,iBAAhD,CAZQ,CAaR,CAAE,KAAQ,OAAV,CAAmB,KAAQ,SAA3B,CAAsC,UAAW,CAAA,CAAjD,CAbQ,CAcR,CAAE,KAAQ,MAAV,CAAkB,KAAQ,QAA1B,CAAoC,MAAS,CAAA,CAA7C,CAAmD,OAAU,CAA7D,CAdQ,CAeR,CAAE,KAAQ,IAAV,CAAgB,KAAQ,QAAxB,CAAkC,MAAS,CAAA,CAA3C,CAAiD,OAAU0F,MAAAnH,OAA3D,CAA4E,UAAWmH,MAAvF,CAfQ,CAHS,CAsBjBC,YAAAA,CAAc3I,QAAAiD,SAAA,CAAkBF,OAAlB,CAA2Bd,eAA3B,CAMlB0G;WAAAxG,OAAA,CAAqByG,QAAQ,EAAG,CAC9B,IAAIC,EAAI5I,WAAA6I,QAAA,EACRD,EAAAE,MAAA,CAAUC,QAAQ,CAAC5G,CAAD,CAAI,CACpB,IAAI3B,EAAIoI,CAAAI,KAAA,EACJxI,EAAAsI,MAAJ,EAAaF,CAAAI,KAAA,CAAOxI,CAAAsI,MAAA,CAAQ3G,CAAR,CAAP,CAFO,CAItByG,EAAAlE,OAAA,CAAWuE,QAAQ,CAAC9G,CAAD,CAAI,CACjBpC,QAAAmH,eAAA,CAAwBW,KAAxB,CAA+B1F,CAA/B,CAAJ,CAAuCyG,CAAAI,KAAA,CAAOnB,KAAA,CAAM1F,CAAN,CAAP,CAAvC,CACKpC,QAAAuD,MAAA,CAAe,sCAAf,CAAwDnB,CAAxD,CAFgB,CAIvB,OAAOyG,EAVuB,CAahCF,YAAA/H,OAAA,CAAqB,6GAAA,MAAA,CAAA,GAAA,CAMrB+H,YAAA/D,OAAA,CAAqB8D,MAErBpJ,QAAA4B,KAAA,CAAeP,IACfrB,QAAAoG,KAAA,CAAehD,IACfpD,QAAAuG,UAAA,CAAoBlD,SACpBrD,QAAAkH,SAAA;AAAmB5D,QACnBtD,QAAAa,KAAA,CAAe0C,IACfvD,QAAA6J,UAAA,CAAoBrG,SACpBxD,QAAAwJ,QAAA,CAAkB/F,OAElBqG,OAAAC,eAAA,CAAsB/J,OAAtB,CAA+B,YAA/B,CAA6C,CAAEoC,MAAO,CAAA,CAAT,CAA7C,CApf8D,CAJ/D,CADwI;",
"sources":["node_modules/vega-hierarchy/build/vega-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_hierarchy$build$vega_hierarchy\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-hierarchy')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-hierarchy'], factory) :\n  (global = global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.d3));\n}(this, function (exports, vegaDataflow, vegaUtil, d3Hierarchy) { 'use strict';\n\n  // Build lookup table mapping tuple keys to tree node instances\n  function lookup(tree, key, filter) {\n    var map = {};\n    tree.each(function(node) {\n      var t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n\n  /**\n    * Nest tuples into a tree structure, grouped by key values.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n    * @param {boolean} [params.generate=false] - A boolean flag indicating if\n    *   non-leaf nodes generated by this transform should be included in the\n    *   output. The default (false) includes only the input data (leaf nodes)\n    *   in the data stream.\n    */\n  function Nest(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Nest.Definition = {\n    \"type\": \"Nest\",\n    \"metadata\": {\"treesource\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"keys\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"generate\", \"type\": \"boolean\" }\n    ]\n  };\n\n  var prototype = vegaUtil.inherits(Nest, vegaDataflow.Transform);\n\n  function children(n) {\n    return n.values;\n  }\n\n  prototype.transform = function(_, pulse) {\n    if (!pulse.source) {\n      vegaUtil.error('Nest transform requires an upstream data source.');\n    }\n\n    var gen = _.generate,\n        mod = _.modified(),\n        out = pulse.clone(),\n        tree = this.value;\n\n    if (!tree || mod || pulse.changed()) {\n      // collect nodes to remove\n      if (tree) {\n        tree.each(node => {\n          if (node.children && vegaDataflow.isTuple(node.data)) {\n            out.rem.push(node.data);\n          }\n        });\n      }\n\n      // generate new tree structure\n      this.value = tree = d3Hierarchy.hierarchy({\n        values: vegaUtil.array(_.keys)\n          .reduce((n, k) => { n.key(k); return n; }, nest())\n          .entries(out.source)\n      }, children);\n\n      // collect nodes to add\n      if (gen) {\n        tree.each(node => {\n          if (node.children) {\n            node = vegaDataflow.ingest(node.data);\n            out.add.push(node);\n            out.source.push(node);\n          }\n        });\n      }\n\n      // build lookup table\n      lookup(tree, vegaDataflow.tupleid, vegaDataflow.tupleid);\n    }\n\n    out.source.root = tree;\n    return out;\n  };\n\n  function nest() {\n    var keys = [],\n        nest;\n\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n\n      var i = -1,\n          n = array.length,\n          key = keys[depth++],\n          keyValue,\n          value,\n          valuesByKey = {},\n          values,\n          result = {};\n\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      var array = [], k;\n      for (k in map) {\n        array.push({key: k, values: entries(map[k], depth)});\n      }\n      return array;\n    }\n\n    return nest = {\n      entries: array => entries(apply(array, 0), 0),\n      key: d => { keys.push(d); return nest; }\n    };\n  }\n\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function HierarchyLayout(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$1 = vegaUtil.inherits(HierarchyLayout, vegaDataflow.Transform);\n\n  prototype$1.transform = function(_, pulse) {\n    if (!pulse.source || !pulse.source.root) {\n      vegaUtil.error(this.constructor.name\n        + ' transform requires a backing tree data source.');\n    }\n\n    var layout = this.layout(_.method),\n        fields = this.fields,\n        root = pulse.source.root,\n        as = _.as || fields;\n\n    if (_.field) root.sum(_.field); else root.count();\n    if (_.sort) root.sort(vegaDataflow.stableCompare(_.sort, d => d.data));\n\n    setParams(layout, this.params, _);\n    if (layout.separation) {\n      layout.separation(_.separation !== false ? defaultSeparation : vegaUtil.one);\n    }\n\n    try {\n      this.value = layout(root);\n    } catch (err) {\n      vegaUtil.error(err);\n    }\n    root.each(function(node) { setFields(node, fields, as); });\n\n    return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n  };\n\n  function setParams(layout, params, _) {\n    for (var p, i=0, n=params.length; i<n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n\n  function setFields(node, fields, as) {\n    var t = node.data;\n    for (var i=0, n=fields.length-1; i<n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  function defaultSeparation(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  var Output = ['x', 'y', 'r', 'depth', 'children'];\n\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Pack.Definition = {\n    \"type\": \"Pack\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"radius\", \"type\": \"field\", \"default\": null },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output.length, \"default\": Output }\n    ]\n  };\n\n  var prototype$2 = vegaUtil.inherits(Pack, HierarchyLayout);\n\n  prototype$2.layout = d3Hierarchy.pack;\n\n  prototype$2.params = ['radius', 'size', 'padding'];\n\n  prototype$2.fields = Output;\n\n  var Output$1 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Partition.Definition = {\n    \"type\": \"Partition\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$1.length, \"default\": Output$1 }\n    ]\n  };\n\n  var prototype$3 = vegaUtil.inherits(Partition, HierarchyLayout);\n\n  prototype$3.layout = d3Hierarchy.partition;\n\n  prototype$3.params = ['size', 'round', 'padding'];\n\n  prototype$3.fields = Output$1;\n\n  /**\n    * Stratify a collection of tuples into a tree structure based on\n    * id and parent id fields.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    * @param {function(object): *} params.key - Unique key field for each tuple.\n    * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n    */\n  function Stratify(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Stratify.Definition = {\n    \"type\": \"Stratify\",\n    \"metadata\": {\"treesource\": true},\n    \"params\": [\n      { \"name\": \"key\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"parentKey\", \"type\": \"field\", \"required\": true  }\n    ]\n  };\n\n  var prototype$4 = vegaUtil.inherits(Stratify, vegaDataflow.Transform);\n\n  prototype$4.transform = function(_, pulse) {\n    if (!pulse.source) {\n      vegaUtil.error('Stratify transform requires an upstream data source.');\n    }\n\n    var tree = this.value,\n        mod = _.modified(),\n        out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n        run = !this.value\n           || mod\n           || pulse.changed(pulse.ADD_REM)\n           || pulse.modified(_.key.fields)\n           || pulse.modified(_.parentKey.fields);\n\n    // prevent upstream source pollution\n    out.source = out.source.slice();\n\n    if (run) {\n      if (out.source.length) {\n        tree = lookup(\n          d3Hierarchy.stratify().id(_.key).parentId(_.parentKey)(out.source)\n          , _.key, vegaUtil.truthy);\n      } else {\n        tree = lookup(d3Hierarchy.stratify()([{}]), _.key, _.key);\n      }\n    }\n\n    out.source.root = this.value = tree;\n    return out;\n  };\n\n  var Layouts = {\n    tidy: d3Hierarchy.tree,\n    cluster: d3Hierarchy.cluster\n  };\n\n  var Output$2 = ['x', 'y', 'depth', 'children'];\n\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Tree.Definition = {\n    \"type\": \"Tree\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"method\", \"type\": \"enum\", \"default\": \"tidy\", \"values\": [\"tidy\", \"cluster\"] },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"nodeSize\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"separation\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$2.length, \"default\": Output$2 }\n    ]\n  };\n\n  var prototype$5 = vegaUtil.inherits(Tree, HierarchyLayout);\n\n  /**\n   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n   */\n  prototype$5.layout = function(method) {\n    var m = method || 'tidy';\n    if (vegaUtil.hasOwnProperty(Layouts, m)) return Layouts[m]();\n    else vegaUtil.error('Unrecognized Tree layout method: ' + m);\n  };\n\n  prototype$5.params = ['size', 'nodeSize'];\n\n  prototype$5.fields = Output$2;\n\n  /**\n    * Generate tuples representing links between tree nodes.\n    * The resulting tuples will contain 'source' and 'target' fields,\n    * which point to parent and child node tuples, respectively.\n    * @constructor\n    * @param {object} params - The parameters for this operator.\n    */\n  function TreeLinks(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  TreeLinks.Definition = {\n    \"type\": \"TreeLinks\",\n    \"metadata\": {\"tree\": true, \"generates\": true, \"changes\": true},\n    \"params\": []\n  };\n\n  var prototype$6 = vegaUtil.inherits(TreeLinks, vegaDataflow.Transform);\n\n  prototype$6.transform = function(_, pulse) {\n    var links = this.value,\n        tree = pulse.source && pulse.source.root,\n        out = pulse.fork(pulse.NO_SOURCE),\n        lut = {};\n\n    if (!tree) vegaUtil.error('TreeLinks transform requires a tree data source.');\n\n    if (pulse.changed(pulse.ADD_REM)) {\n      // remove previous links\n      out.rem = links;\n\n      // build lookup table of valid tuples\n      pulse.visit(pulse.SOURCE, function(t) { lut[vegaDataflow.tupleid(t)] = 1; });\n\n      // generate links for all edges incident on valid tuples\n      tree.each(function(node) {\n        var t = node.data,\n            p = node.parent && node.parent.data;\n        if (p && lut[vegaDataflow.tupleid(t)] && lut[vegaDataflow.tupleid(p)]) {\n          out.add.push(vegaDataflow.ingest({source: p, target: t}));\n        }\n      });\n      this.value = out.add;\n    }\n\n    else if (pulse.changed(pulse.MOD)) {\n      // build lookup table of modified tuples\n      pulse.visit(pulse.MOD, function(t) { lut[vegaDataflow.tupleid(t)] = 1; });\n\n      // gather links incident on modified tuples\n      links.forEach(function(link) {\n        if (lut[vegaDataflow.tupleid(link.source)] || lut[vegaDataflow.tupleid(link.target)]) {\n          out.mod.push(link);\n        }\n      });\n    }\n\n    return out;\n  };\n\n  var Tiles = {\n    binary: d3Hierarchy.treemapBinary,\n    dice: d3Hierarchy.treemapDice,\n    slice: d3Hierarchy.treemapSlice,\n    slicedice: d3Hierarchy.treemapSliceDice,\n    squarify: d3Hierarchy.treemapSquarify,\n    resquarify: d3Hierarchy.treemapResquarify\n  };\n\n  var Output$3 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n\n  Treemap.Definition = {\n    \"type\": \"Treemap\",\n    \"metadata\": {\"tree\": true, \"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\" },\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"method\", \"type\": \"enum\", \"default\": \"squarify\",\n        \"values\": [\"squarify\", \"resquarify\", \"binary\", \"dice\", \"slice\", \"slicedice\"] },\n      { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingInner\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingOuter\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingTop\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingRight\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingBottom\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"paddingLeft\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"ratio\", \"type\": \"number\", \"default\": 1.618033988749895 },\n      { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output$3.length, \"default\": Output$3 }\n    ]\n  };\n\n  var prototype$7 = vegaUtil.inherits(Treemap, HierarchyLayout);\n\n  /**\n   * Treemap layout generator. Adds 'method' and 'ratio' parameters\n   * to configure the underlying tile method.\n   */\n  prototype$7.layout = function() {\n    var x = d3Hierarchy.treemap();\n    x.ratio = function(_) {\n      var t = x.tile();\n      if (t.ratio) x.tile(t.ratio(_));\n    };\n    x.method = function(_) {\n      if (vegaUtil.hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);\n      else vegaUtil.error('Unrecognized Treemap layout method: ' + _);\n    };\n    return x;\n  };\n\n  prototype$7.params = [\n    'method', 'ratio', 'size', 'round',\n    'padding', 'paddingInner', 'paddingOuter',\n    'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n  ];\n\n  prototype$7.fields = Output$3;\n\n  exports.nest = Nest;\n  exports.pack = Pack;\n  exports.partition = Partition;\n  exports.stratify = Stratify;\n  exports.tree = Tree;\n  exports.treelinks = TreeLinks;\n  exports.treemap = Treemap;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","vega","transforms","d3","vegaDataflow","vegaUtil","d3Hierarchy","lookup","tree","key","filter","map","each","node","t","data","Nest","params","Transform","call","children","n","values","nest","apply","array","depth","keys","length","i","keyValue","value","valuesByKey","result","push","entries","k","d","HierarchyLayout","setParams","layout","_","p","defaultSeparation","a","b","parent","Pack","Partition","Stratify","Tree","TreeLinks","Treemap","Definition","inherits","prototype","transform","prototype.transform","pulse","source","error","gen","generate","mod","modified","out","clone","changed","isTuple","rem","hierarchy","reduce","ingest","add","tupleid","root","prototype$1","prototype$1.transform","constructor","name","method","fields","as","field","sum","count","sort","stableCompare","separation","one","err","reflow","modifies","Output","prototype$2","pack","Output$1","prototype$3","partition","prototype$4","prototype$4.transform","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","slice","stratify","id","parentId","truthy","Layouts","tidy","cluster","Output$2","prototype$5","prototype$5.layout","m","hasOwnProperty","prototype$6","prototype$6.transform","links","NO_SOURCE","lut","visit","target","MOD","forEach","link","Tiles","binary","treemapBinary","dice","treemapDice","treemapSlice","slicedice","treemapSliceDice","squarify","treemapSquarify","resquarify","treemapResquarify","Output$3","prototype$7","prototype$7.layout","x","treemap","ratio","x.ratio","tile","x.method","treelinks","Object","defineProperty"]
}
