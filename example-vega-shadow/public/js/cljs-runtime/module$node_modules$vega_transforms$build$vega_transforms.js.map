{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":107,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('d3-array')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'd3-array'], factory) :\n  (global = global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega, global.vega, global.d3));\n}(this, function (exports, vegaUtil, vegaDataflow, vegaStatistics, d3Array) { 'use strict';\n\n  function multikey(f) {\n    return function(x) {\n      var n = f.length,\n          i = 1,\n          k = String(f[0](x));\n\n      for (; i<n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n\n  function groupkey(fields) {\n    return !fields || !fields.length ? function() { return ''; }\n      : fields.length === 1 ? fields[0]\n      : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || (op + (!field ? '' : '_' + field));\n  }\n\n  var AggregateOps = {\n    'values': measure({\n      name: 'values',\n      init: 'cell.store = true;',\n      set:  'cell.data.values()', idx: -1\n    }),\n    'count': measure({\n      name: 'count',\n      set:  'cell.num'\n    }),\n    '__count__': measure({\n      name: 'count',\n      set:  'this.missing + this.valid'\n    }),\n    'missing': measure({\n      name: 'missing',\n      set:  'this.missing'\n    }),\n    'valid': measure({\n      name: 'valid',\n      set:  'this.valid'\n    }),\n    'sum': measure({\n      name: 'sum',\n      init: 'this.sum = 0;',\n      add:  'this.sum += +v;',\n      rem:  'this.sum -= v;',\n      set:  'this.sum'\n    }),\n    'mean': measure({\n      name: 'mean',\n      init: 'this.mean = 0;',\n      add:  'var d = v - this.mean; this.mean += d / this.valid;',\n      rem:  'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',\n      set:  'this.valid ? this.mean : undefined'\n    }),\n    'average': measure({\n      name: 'average',\n      set:  'this.valid ? this.mean : undefined',\n      req:  ['mean'], idx: 1\n    }),\n    'variance': measure({\n      name: 'variance',\n      init: 'this.dev = 0;',\n      add:  'this.dev += d * (v - this.mean);',\n      rem:  'this.dev -= d * (v - this.mean);',\n      set:  'this.valid > 1 ? this.dev / (this.valid-1) : undefined',\n      req:  ['mean'], idx: 1\n    }),\n    'variancep': measure({\n      name: 'variancep',\n      set:  'this.valid > 1 ? this.dev / this.valid : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'stdev': measure({\n      name: 'stdev',\n      set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'stdevp': measure({\n      name: 'stdevp',\n      set:  'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'stderr': measure({\n      name: 'stderr',\n      set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',\n      req:  ['variance'], idx: 2\n    }),\n    'distinct': measure({\n      name: 'distinct',\n      set:  'cell.data.distinct(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'ci0': measure({\n      name: 'ci0',\n      set:  'cell.data.ci0(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'ci1': measure({\n      name: 'ci1',\n      set:  'cell.data.ci1(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'median': measure({\n      name: 'median',\n      set:  'cell.data.q2(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'q1': measure({\n      name: 'q1',\n      set:  'cell.data.q1(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'q3': measure({\n      name: 'q3',\n      set:  'cell.data.q3(this.get)',\n      req:  ['values'], idx: 3\n    }),\n    'argmin': measure({\n      name: 'argmin',\n      init: 'this.argmin = undefined;',\n      add:  'if (v < this.min) this.argmin = t;',\n      rem:  'if (v <= this.min) this.argmin = undefined;',\n      set:  'this.argmin || cell.data.argmin(this.get)',\n      req:  ['min'], str: ['values'], idx: 3\n    }),\n    'argmax': measure({\n      name: 'argmax',\n      init: 'this.argmax = undefined;',\n      add:  'if (v > this.max) this.argmax = t;',\n      rem:  'if (v >= this.max) this.argmax = undefined;',\n      set:  'this.argmax || cell.data.argmax(this.get)',\n      req:  ['max'], str: ['values'], idx: 3\n    }),\n    'min': measure({\n      name: 'min',\n      init: 'this.min = undefined;',\n      add:  'if (v < this.min || this.min === undefined) this.min = v;',\n      rem:  'if (v <= this.min) this.min = NaN;',\n      set:  'this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)',\n      str:  ['values'], idx: 4\n    }),\n    'max': measure({\n      name: 'max',\n      init: 'this.max = undefined;',\n      add:  'if (v > this.max || this.max === undefined) this.max = v;',\n      rem:  'if (v >= this.max) this.max = NaN;',\n      set:  'this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)',\n      str:  ['values'], idx: 4\n    })\n  };\n\n  var ValidAggregateOps = Object.keys(AggregateOps);\n\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function measure(base) {\n    return function(out) {\n      var m = vegaUtil.extend({init:'', add:'', rem:'', idx:0}, base);\n      m.out = out || base.name;\n      return m;\n    };\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg, stream) {\n    function collect(m, a) {\n      function helper(r) { if (!m[r]) collect(m, m[r] = AggregateOps[r]()); }\n      if (a.req) a.req.forEach(helper);\n      if (stream && a.str) a.str.forEach(helper);\n      return m;\n    }\n    var map = agg.reduce(\n      collect,\n      agg.reduce(function(m, a) {\n        m[a.name] = a;\n        return m;\n      }, {})\n    );\n    var values = [], key;\n    for (key in map) values.push(map[key]);\n    return values.sort(compareIndex);\n  }\n\n  function compileMeasures(agg, field) {\n    var get = field || vegaUtil.identity,\n        all = resolve(agg, true), // assume streaming removes may occur\n        init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',\n        ctr = 'this.cell = cell; this.init();',\n        add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',\n        rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',\n        set = 'var cell = this.cell;';\n\n    all.forEach(function(a) {\n      init += a.init;\n      add += a.add;\n      rem += a.rem;\n    });\n    agg.slice().sort(compareIndex).forEach(function(a) {\n      set += 't[' + vegaUtil.stringValue(a.out) + ']=' + a.set + ';';\n    });\n    set += 'return t;';\n\n    ctr = Function('cell', ctr);\n    ctr.prototype.init = Function(init);\n    ctr.prototype.add = Function('v', 't', add);\n    ctr.prototype.rem = Function('v', 't', rem);\n    ctr.prototype.set = Function('t', set);\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(function(_) { return _.out; });\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n\n  var prototype = TupleStore.prototype;\n\n  prototype.reset = function() {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype.add = function(v) {\n    this._add.push(v);\n  };\n\n  prototype.rem = function(v) {\n    this._rem.push(v);\n  };\n\n  prototype.values = function() {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n\n    var a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {}, i, j, v;\n\n    // use unique key field to clear removed values\n    for (i=0; i<m; ++i) {\n      map[k(r[i])] = 1;\n    }\n    for (i=0, j=0; i<n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return (this._add = x);\n  };\n\n  // memoizing statistics methods\n\n  prototype.distinct = function(get) {\n    var v = this.values(),\n        n = v.length,\n        map = {},\n        count = 0, s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype.extent = function(get) {\n    if (this._get !== get || !this._ext) {\n      var v = this.values(),\n          i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n    return this._ext;\n  };\n\n  prototype.argmin = function(get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype.argmax = function(get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype.min = function(get) {\n    var m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype.max = function(get) {\n    var m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype.quartile = function(get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n    return this._q;\n  };\n\n  prototype.q1 = function(get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype.q2 = function(get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype.q3 = function(get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype.ci = function(get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n    return this._ci;\n  };\n\n  prototype.ci0 = function(get) {\n    return this.ci(get)[0];\n  };\n\n  prototype.ci1 = function(get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n\n    this._adds = []; // array of added output tuples\n    this._mods = []; // array of modified output tuples\n    this._alen = 0;  // number of active added tuples\n    this._mlen = 0;  // number of active modified tuples\n    this._drop = true;   // should empty aggregation cells be removed\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = [];   // group-by dimension accessors\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n    this._countOnly = false; // flag indicating only count aggregation\n    this._counts = null; // collection of count fields\n    this._prev = null;   // previous aggregation cells\n\n    this._inputs = null;  // array of dependent input tuple field names\n    this._outputs = null; // array of output tuple field names\n  }\n\n  Aggregate.Definition = {\n    \"type\": \"Aggregate\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"ops\", \"type\": \"enum\", \"array\": true, \"values\": ValidAggregateOps },\n      { \"name\": \"fields\", \"type\": \"field\", \"null\": true, \"array\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n      { \"name\": \"drop\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"cross\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"key\", \"type\": \"field\" }\n    ]\n  };\n\n  var prototype$1 = vegaUtil.inherits(Aggregate, vegaDataflow.Transform);\n\n  prototype$1.transform = function(_, pulse) {\n    var aggr = this,\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // Indicate output fields and return aggregate tuples.\n    out.modifies(aggr._outputs);\n\n    // Should empty cells be dropped?\n    aggr._drop = _.drop !== false;\n\n    // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    return aggr.changes(out);\n  };\n\n  prototype$1.cross = function() {\n    var aggr = this,\n        curr = aggr.value,\n        dims = aggr._dnames,\n        vals = dims.map(function() { return {}; }),\n        n = dims.length;\n\n    // collect all group-by domain values\n    function collect(cells) {\n      var key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i=0; i<n; ++i) {\n          vals[i][(v = t[dims[i]])] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr);\n\n    // iterate over key cross-product, create cells as needed\n    function generate(base, tuple, index) {\n      var name = dims[index],\n          v = vals[index++],\n          k, key;\n\n      for (k in v) {\n        tuple[name] = v[k];\n        key = base ? base + '|' + k : k;\n        if (index < n) generate(key, tuple, index);\n        else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  };\n\n  prototype$1.init = function(_) {\n    // initialize input and output fields\n    var inputs = (this._inputs = []),\n        outputs = (this._outputs = []),\n        inputMap = {};\n\n    function inputVisit(get) {\n      var fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n          i = 0, n = fields.length, f;\n      for (; i<n; ++i) {\n        if (!inputMap[f=fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    }\n\n    // initialize group-by dimensions\n    this._dims = vegaUtil.array(_.groupby);\n    this._dnames = this._dims.map(function(d) {\n      var dname = vegaUtil.accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n    // initialize aggregate measures\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n\n    var fields = _.fields || [null],\n        ops = _.ops || ['count'],\n        as = _.as || [],\n        n = fields.length,\n        map = {},\n        field, op, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      vegaUtil.error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i=0; i<n; ++i) {\n      field = fields[i];\n      op = ops[i];\n\n      if (field == null && op !== 'count') {\n        vegaUtil.error('Null aggregate field specified.');\n      }\n      mname = vegaUtil.accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = (map[mname] = []);\n        m.field = field;\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n\n    this._measures = this._measures.map(function(m) {\n      return compileMeasures(m, m.field);\n    });\n\n    return {}; // aggregation cells (this.value)\n  };\n\n  // -- Cell Management -----\n\n  prototype$1.cellkey = groupkey();\n\n  prototype$1.cell = function(key, t) {\n    var cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  };\n\n  prototype$1.newcell = function(key, t) {\n    var cell = {\n      key:   key,\n      num:   0,\n      agg:   null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      var measures = this._measures,\n          n = measures.length, i;\n\n      cell.agg = Array(n);\n      for (i=0; i<n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  };\n\n  prototype$1.newtuple = function(t, p) {\n    var names = this._dnames,\n        dims = this._dims,\n        x = {}, i, n;\n\n    for (i=0, n=dims.length; i<n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n  };\n\n  // -- Process Tuples -----\n\n  prototype$1.add = function(t) {\n    var key = this.cellkey(t),\n        cell = this.cell(key, t),\n        agg, i, n;\n\n    cell.num += 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.add(t);\n\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  };\n\n  prototype$1.rem = function(t) {\n    var key = this.cellkey(t),\n        cell = this.cell(key, t),\n        agg, i, n;\n\n    cell.num -= 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.rem(t);\n\n    agg = cell.agg;\n    for (i=0, n=agg.length; i<n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  };\n\n  prototype$1.celltuple = function(cell) {\n    var tuple = cell.tuple,\n        counts = this._counts,\n        agg, i, n;\n\n    // consolidate stored values\n    if (cell.store) {\n      cell.data.values();\n    }\n\n    // update tuple properties\n    for (i=0, n=counts.length; i<n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      agg = cell.agg;\n      for (i=0, n=agg.length; i<n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  };\n\n  prototype$1.changes = function(out) {\n    var adds = this._adds,\n        mods = this._mods,\n        prev = this._prev,\n        drop = this._drop,\n        add = out.add,\n        rem = out.rem,\n        mod = out.mod,\n        cell, key, i, n;\n\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n    this._prev = null;\n    return out;\n  };\n\n  // epsilon bias to offset floating point error (#1737)\n  const EPSILON = 1e-14;\n\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Bin.Definition = {\n    \"type\": \"Bin\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"anchor\", \"type\": \"number\" },\n      { \"name\": \"maxbins\", \"type\": \"number\", \"default\": 20 },\n      { \"name\": \"base\", \"type\": \"number\", \"default\": 10 },\n      { \"name\": \"divide\", \"type\": \"number\", \"array\": true, \"default\": [5, 2] },\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2, \"required\": true },\n      { \"name\": \"span\", \"type\": \"number\" },\n      { \"name\": \"step\", \"type\": \"number\" },\n      { \"name\": \"steps\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"minstep\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"nice\", \"type\": \"boolean\", \"default\": true },\n      { \"name\": \"name\", \"type\": \"string\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"bin0\", \"bin1\"] }\n    ]\n  };\n\n  var prototype$2 = vegaUtil.inherits(Bin, vegaDataflow.Transform);\n\n  prototype$2.transform = function(_, pulse) {\n    var bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1],\n        flag;\n\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, function(t) {\n      var v = bins(t);\n      // minimum bin value (inclusive)\n      t[b0] = v;\n      // maximum bin value (exclusive)\n      // use convoluted math for better floating point agreement\n      // see https://github.com/vega/vega/issues/830\n      t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n    });\n\n    return pulse.modifies(as);\n  };\n\n  prototype$2._bins = function(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    var field = _.field,\n        bins  = vegaStatistics.bin(_),\n        start = bins.start,\n        stop  = bins.stop,\n        step  = bins.step,\n        a, d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    var f = function(t) {\n      var v = field(t);\n      if (v == null) {\n        return null;\n      } else {\n        v = Math.max(start, Math.min(+v, stop - step));\n        return start + step * Math.floor(EPSILON + (v - start) / step);\n      }\n    };\n\n    f.start = start;\n    f.stop = stop;\n    f.step = step;\n\n    return this.value = vegaUtil.accessor(\n      f,\n      vegaUtil.accessorFields(field),\n      _.name || 'bin_' + vegaUtil.accessorName(field)\n    );\n  };\n\n  function SortedList(idFunc, source, input) {\n    var $ = idFunc,\n        data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n\n    return {\n      add: function(t) { add.push(t); },\n      remove: function(t) { rem[$(t)] = ++cnt; },\n      size: function() { return data.length; },\n      data: function(compare, resort) {\n        if (cnt) {\n          data = data.filter(function(t) { return !rem[$(t)]; });\n          rem = {};\n          cnt = 0;\n        }\n        if (resort && compare) {\n          data.sort(compare);\n        }\n        if (add.length) {\n          data = compare\n            ? vegaUtil.merge(compare, data, add.sort(compare))\n            : data.concat(add);\n          add = [];\n        }\n        return data;\n      }\n    }\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Collect.Definition = {\n    \"type\": \"Collect\",\n    \"metadata\": {\"source\": true},\n    \"params\": [\n      { \"name\": \"sort\", \"type\": \"compare\" }\n    ]\n  };\n\n  var prototype$3 = vegaUtil.inherits(Collect, vegaDataflow.Transform);\n\n  prototype$3.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n        sort = _.sort,\n        mod = pulse.changed() || (sort &&\n              (_.modified('sort') || pulse.modified(sort.fields)));\n\n    out.visit(out.REM, list.remove);\n\n    this.modified(mod);\n    this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod);\n\n    // propagate tree root if defined\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  };\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n\n  function update(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  CountPattern.Definition = {\n    \"type\": \"CountPattern\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"case\", \"type\": \"enum\", \"values\": [\"upper\", \"lower\", \"mixed\"], \"default\": \"mixed\" },\n      { \"name\": \"pattern\", \"type\": \"string\", \"default\": \"[\\\\w\\\"]+\" },\n      { \"name\": \"stopwords\", \"type\": \"string\", \"default\": \"\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"text\", \"count\"] }\n    ]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper': text = text.toUpperCase(); break;\n      case 'lower': text = text.toLowerCase(); break;\n    }\n    return text.match(match);\n  }\n\n  var prototype$4 = vegaUtil.inherits(CountPattern, vegaDataflow.Transform);\n\n  prototype$4.transform = function(_, pulse) {\n    function process(update) {\n      return function(tuple) {\n        var tokens = tokenize(get(tuple), _.case, match) || [], t;\n        for (var i=0, n=tokens.length; i<n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n    }\n\n    var init = this._parameterCheck(_, pulse),\n        counts = this._counts,\n        match = this._match,\n        stop = this._stop,\n        get = _.field,\n        as = _.as || ['text', 'count'],\n        add = process(function(t) { counts[t] = 1 + (counts[t] || 0); }),\n        rem = process(function(t) { counts[t] -= 1; });\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  };\n\n  prototype$4._parameterCheck = function(_, pulse) {\n    var init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  };\n\n  prototype$4._finish = function(pulse, as) {\n    var counts = this._counts,\n        tuples = this._tuples || (this._tuples = {}),\n        text = as[0],\n        count = as[1],\n        out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = (t = vegaDataflow.ingest({}));\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  };\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Cross.Definition = {\n    \"type\": \"Cross\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"filter\", \"type\": \"expr\" },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"a\", \"b\"] }\n    ]\n  };\n\n  var prototype$5 = vegaUtil.inherits(Cross, vegaDataflow.Transform);\n\n  prototype$5.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        data = this.value,\n        as = _.as || ['a', 'b'],\n        a = as[0], b = as[1],\n        reset = !data\n            || pulse.changed(pulse.ADD_REM)\n            || _.modified('as')\n            || _.modified('filter');\n\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  };\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j, left;\n\n    for (; i<n; ++i) {\n      t[a] = left = input[i];\n      for (j=0; j<n; ++j) {\n        t[b] = input[j];\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  var Distributions = {\n    kde:       vegaStatistics.randomKDE,\n    mixture:   vegaStatistics.randomMixture,\n    normal:    vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform:   vegaStatistics.randomUniform\n  };\n\n  var DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n  function parse(def, data) {\n    var func = def[FUNCTION];\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n\n    var d = Distributions[func]();\n\n    for (var name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      }\n\n      // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n        d[name](def[name].map(function(_) { return parse(_, data); }));\n      }\n\n      // otherwise, simply set the parameter\n      else if (typeof d[name] === FUNCTION) {\n        d[name](def[name]);\n      }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var distributions = [\n    {\n      \"key\": {\"function\": \"normal\"},\n      \"params\": [\n        { \"name\": \"mean\", \"type\": \"number\", \"default\": 0 },\n        { \"name\": \"stdev\", \"type\": \"number\", \"default\": 1 }\n      ]\n    },\n    {\n      \"key\": {\"function\": \"lognormal\"},\n      \"params\": [\n        { \"name\": \"mean\", \"type\": \"number\", \"default\": 0 },\n        { \"name\": \"stdev\", \"type\": \"number\", \"default\": 1 }\n      ]\n    },\n    {\n      \"key\": {\"function\": \"uniform\"},\n      \"params\": [\n        { \"name\": \"min\", \"type\": \"number\", \"default\": 0 },\n        { \"name\": \"max\", \"type\": \"number\", \"default\": 1 }\n      ]\n    },\n    {\n      \"key\": {\"function\": \"kde\"},\n      \"params\": [\n        { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n        { \"name\": \"from\", \"type\": \"data\" },\n        { \"name\": \"bandwidth\", \"type\": \"number\", \"default\": 0 }\n      ]\n    }\n  ];\n\n  var mixture = {\n    \"key\": {\"function\": \"mixture\"},\n    \"params\": [\n      { \"name\": \"distributions\", \"type\": \"param\", \"array\": true,\n        \"params\": distributions },\n      { \"name\": \"weights\", \"type\": \"number\", \"array\": true }\n    ]\n  };\n\n  Density.Definition = {\n    \"type\": \"Density\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"steps\", \"type\": \"number\" },\n      { \"name\": \"minsteps\", \"type\": \"number\", \"default\": 25 },\n      { \"name\": \"maxsteps\", \"type\": \"number\", \"default\": 200 },\n      { \"name\": \"method\", \"type\": \"string\", \"default\": \"pdf\",\n        \"values\": [\"pdf\", \"cdf\"] },\n      { \"name\": \"distribution\", \"type\": \"param\",\n        \"params\": distributions.concat(mixture) },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true,\n        \"default\": [\"value\", \"density\"] }\n    ]\n  };\n\n  var prototype$6 = vegaUtil.inherits(Density, vegaDataflow.Transform);\n\n  prototype$6.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      var dist = parse(_.distribution, source(pulse)),\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200,\n          method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        vegaUtil.error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        vegaUtil.error('Missing density extent parameter.');\n      }\n      method = dist[method];\n\n      var as = _.as || ['value', 'density'],\n          domain = _.extent || vegaUtil.extent(dist.data()),\n          values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n            var tuple = {};\n            tuple[as[0]] = v[0];\n            tuple[as[1]] = v[1];\n            return vegaDataflow.ingest(tuple);\n          });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  function source(pulse) {\n    return function() { return pulse.materialize(pulse.SOURCE).source; };\n  }\n\n  // use either provided alias or accessor field name\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map(function(f, i) {\n      return as[i] || vegaUtil.accessorName(f);\n    });\n  }\n\n  function partition(data, groupby, field) {\n    var groups = [],\n        get = function(f) { return f(t); },\n        map, i, n, t, k, g;\n\n    // partition data points into groups\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map={}, i=0, n=data.length; i<n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n        if (!g) {\n          map[k] = (g = []);\n          g.dims = k;\n          groups.push(g);\n        }\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  DotBin.Definition = {\n    \"type\": \"DotBin\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"step\", \"type\": \"number\" },\n      { \"name\": \"smooth\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": Output }\n    ]\n  };\n\n  const prototype$7 = vegaUtil.inherits(DotBin, vegaDataflow.Transform);\n\n  prototype$7.transform = function(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(pulse.source, _.groupby, vegaUtil.identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length;\n\n    // compute dotplot bins per group\n    let min = Infinity, max = -Infinity, i = 0, j;\n    for (; i<n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n      for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  };\n\n  function autostep(data, field) {\n    return vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n  }\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n    this.modified(true);\n  }\n\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n\n  function update$1(_) {\n    var expr = _.expr;\n    return this.value && !_.modified('expr')\n      ? this.value\n      : vegaUtil.accessor(\n          datum => expr(datum, _),\n          vegaUtil.accessorFields(expr),\n          vegaUtil.accessorName(expr)\n        );\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n\n  Extent.Definition = {\n    \"type\": \"Extent\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true }\n    ]\n  };\n\n  var prototype$8 = vegaUtil.inherits(Extent, vegaDataflow.Transform);\n\n  prototype$8.transform = function(_, pulse) {\n    var extent = this.value,\n        field = _.field,\n        min = extent[0],\n        max = extent[1],\n        mod;\n\n    mod = pulse.changed()\n       || pulse.modified(field.fields)\n       || _.modified('field');\n\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function(t) {\n      var v = field(t);\n      if (v != null) {\n        // coerce to number\n        v = +v;\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = vegaUtil.accessorName(field);\n      if (name) name = ` for field \"${name}\"`;\n      pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  };\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n  }\n\n  var prototype$9 = vegaUtil.inherits(Subflow, vegaDataflow.Operator);\n\n  prototype$9.connect = function(target) {\n    this.targets().add(target);\n    return (target.source = this);\n  };\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  prototype$9.add = function(t) {\n    this.value.add.push(t);\n  };\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  prototype$9.rem = function(t) {\n    this.value.rem.push(t);\n  };\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  prototype$9.mod = function(t) {\n    this.value.mod.push(t);\n  };\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  prototype$9.init = function(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  };\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  prototype$9.evaluate = function() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  };\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n    var a = this._targets = [];\n    a.active = 0;\n    a.forEach = function(f) {\n      for (var i=0, n=a.active; i<n; ++i) f(a[i], i, a);\n    };\n  }\n\n  var prototype$a = vegaUtil.inherits(Facet, vegaDataflow.Transform);\n\n  prototype$a.activate = function(flow) {\n    this._targets[this._targets.active++] = flow;\n  };\n\n  prototype$a.subflow = function(key, flow, pulse, parent) {\n    var flows = this.value,\n        sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n        df, p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = df.add(new Subflow(pulse.fork(pulse.NO_SOURCE), this))\n        .connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  };\n\n  prototype$a.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        self = this,\n        key = _.key,\n        flow = _.subflow,\n        cache = this._keys,\n        rekey = _.modified('key');\n\n    function subflow(key) {\n      return self.subflow(key, flow, pulse);\n    }\n\n    this._group = _.group || {};\n    this._targets.active = 0; // reset list of active subflows\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = vegaDataflow.tupleid(t),\n          k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var k = key(t);\n      cache.set(vegaDataflow.tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, function(t) {\n        var id = vegaDataflow.tupleid(t),\n            k0 = cache.get(id),\n            k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, function(t) {\n        subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, function(t) {\n        var id = vegaDataflow.tupleid(t),\n            k0 = cache.get(id),\n            k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return pulse;\n  };\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n\n  function update$2(_) {\n    return (this.value && !_.modified()) ? this.value\n      : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(function(f) { return vegaUtil.field(f); })\n      : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n\n  Filter.Definition = {\n    \"type\": \"Filter\",\n    \"metadata\": {\"changes\": true},\n    \"params\": [\n      { \"name\": \"expr\", \"type\": \"expr\", \"required\": true }\n    ]\n  };\n\n  var prototype$b = vegaUtil.inherits(Filter, vegaDataflow.Transform);\n\n  prototype$b.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        cache = this.value, // cache ids of filtered tuples\n        output = pulse.fork(),\n        add = output.add,\n        rem = output.rem,\n        mod = output.mod,\n        test = _.expr,\n        isMod = true;\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = vegaDataflow.tupleid(t);\n      if (!cache.has(id)) rem.push(t);\n      else cache.delete(id);\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      if (test(t, _)) add.push(t);\n      else cache.set(vegaDataflow.tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      var id = vegaDataflow.tupleid(t),\n          b = test(t, _),\n          s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  };\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Flatten.Definition = {\n    \"type\": \"Flatten\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true }\n    ]\n  };\n\n  var prototype$c = vegaUtil.inherits(Flatten, vegaDataflow.Transform);\n\n  prototype$c.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        as = fieldNames(fields, _.as || []),\n        m = as.length;\n\n    // remove any previous results\n    out.rem = this.value;\n\n    // generate flattened tuples\n    pulse.visit(pulse.SOURCE, function(t) {\n      var arrays = fields.map(function(f) { return f(t); }),\n          maxlen = arrays.reduce(function(l, a) { return Math.max(l, a.length); }, 0),\n          i = 0, j, d, v;\n\n      for (; i<maxlen; ++i) {\n        d = vegaDataflow.derive(t);\n        for (j=0; j<m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  };\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Fold.Definition = {\n    \"type\": \"Fold\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": 2, \"default\": [\"key\", \"value\"] }\n    ]\n  };\n\n  var prototype$d = vegaUtil.inherits(Fold, vegaDataflow.Transform);\n\n  prototype$d.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        fields = _.fields,\n        fnames = fields.map(vegaUtil.accessorName),\n        as = _.as || ['key', 'value'],\n        k = as[0],\n        v = as[1],\n        n = fields.length;\n\n    out.rem = this.value;\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      for (var i=0, d; i<n; ++i) {\n        d = vegaDataflow.derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  };\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Formula.Definition = {\n    \"type\": \"Formula\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"expr\", \"type\": \"expr\", \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"required\": true },\n      { \"name\": \"initonly\", \"type\": \"boolean\" }\n    ]\n  };\n\n  var prototype$e = vegaUtil.inherits(Formula, vegaDataflow.Transform);\n\n  prototype$e.transform = function(_, pulse) {\n    var func = _.expr,\n        as = _.as,\n        mod = _.modified(),\n        flag = _.initonly ? pulse.ADD\n          : mod ? pulse.SOURCE\n          : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n          : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  };\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  var prototype$f = vegaUtil.inherits(Generate, vegaDataflow.Transform);\n\n  prototype$f.transform = function(_, pulse) {\n    var data = this.value,\n        out = pulse.fork(pulse.ALL),\n        num = _.size - data.length,\n        gen = _.generator,\n        add, rem, t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add=[]; --num >= 0;) {\n        add.push(t = vegaDataflow.ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length\n        ? out.materialize(out.ADD).add.concat(add)\n        : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length\n        ? out.materialize(out.REM).rem.concat(rem)\n        : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  };\n\n  var Methods = {\n    value: 'value',\n    median: d3Array.median,\n    mean: d3Array.mean,\n    min: d3Array.min,\n    max: d3Array.max\n  };\n\n  var Empty = [];\n\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  Impute.Definition = {\n    \"type\": \"Impute\",\n    \"metadata\": {\"changes\": true},\n    \"params\": [\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"key\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"keyvals\", \"array\": true },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"method\", \"type\": \"enum\", \"default\": \"value\",\n        \"values\": [\"value\", \"mean\", \"median\", \"max\", \"min\"] },\n      { \"name\": \"value\", \"default\": 0 }\n    ]\n  };\n\n  var prototype$g = vegaUtil.inherits(Impute, vegaDataflow.Transform);\n\n  function getValue(_) {\n    var m = _.method || Methods.value, v;\n\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return function() { return v; };\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    var f = _.field;\n    return function(t) { return t ? f(t) : NaN; };\n  }\n\n  prototype$g.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = vegaUtil.accessorName(_.field),\n        kName = vegaUtil.accessorName(_.key),\n        gNames = (_.groupby || []).map(vegaUtil.accessorName),\n        groups = partition$1(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group, value, gVals, kVal, g, i, j, l, n, t;\n\n    for (g=0, l=groups.length; g<l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN;\n\n      // add tuples for missing values\n      for (j=0; j<m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n\n        t = {_impute: true};\n        for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n        curr.push(vegaDataflow.ingest(t));\n      }\n    }\n\n    // update pulse with imputed tuples\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n\n    return out;\n  };\n\n  function partition$1(data, groupby, key, keyvals) {\n    var get = function(f) { return f(t); },\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {}, gVals, gKey,\n        group, i, j, k, n, t;\n\n    domain.forEach(function(k, i) { kMap[k] = i + 1; });\n\n    for (i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n      if (!(group = gMap[gKey])) {\n        group = (gMap[gKey] = []);\n        groups.push(group);\n        group.values = gVals;\n      }\n      group[j-1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n\n  JoinAggregate.Definition = {\n    \"type\": \"JoinAggregate\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"null\": true, \"array\": true },\n      { \"name\": \"ops\", \"type\": \"enum\", \"array\": true, \"values\": ValidAggregateOps },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n      { \"name\": \"key\", \"type\": \"field\" }\n    ]\n  };\n\n  var prototype$h = vegaUtil.inherits(JoinAggregate, Aggregate);\n\n  prototype$h.transform = function(_, pulse) {\n    var aggr = this,\n        mod = _.modified(),\n        cells;\n\n    // process all input tuples to calculate aggregates\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, function(t) { aggr.rem(t); });\n      pulse.visit(pulse.ADD, function(t) { aggr.add(t); });\n    }\n\n    // update aggregation cells\n    aggr.changes();\n\n    // write aggregate values to input tuples\n    pulse.visit(pulse.SOURCE, function(t) {\n      vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n\n    return pulse.reflow(mod).modifies(this._outputs);\n  };\n\n  prototype$h.changes = function() {\n    var adds = this._adds,\n        mods = this._mods,\n        i, n;\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  };\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero of unspecified, the bandwidth is automatically determined.\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  KDE.Definition = {\n    \"type\": \"KDE\",\n    \"metadata\": {\"generates\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"cumulative\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"counts\", \"type\": \"boolean\", \"default\": false },\n      { \"name\": \"bandwidth\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"extent\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n      { \"name\": \"resolve\", \"type\": \"enum\", \"values\": [\"shared\", \"independent\"], \"default\": \"independent\" },\n      { \"name\": \"steps\", \"type\": \"number\" },\n      { \"name\": \"minsteps\", \"type\": \"number\", \"default\": 25 },\n      { \"name\": \"maxsteps\", \"type\": \"number\", \"default\": 200 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"default\": [\"value\", \"density\"] }\n    ]\n  };\n\n  var prototype$i = vegaUtil.inherits(KDE, vegaDataflow.Transform);\n\n  prototype$i.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(vegaUtil.accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        vegaUtil.error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = vegaUtil.extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || vegaUtil.extent(g);\n\n        vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n          const t = {};\n          for (let i=0; i<names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = v[0];\n          t[as[1]] = v[1] * scale;\n          values.push(vegaDataflow.ingest(t));\n        });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  };\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n\n  function update$3(_) {\n    return (this.value && !_.modified()) ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n\n  var prototype$j = vegaUtil.inherits(Load, vegaDataflow.Transform);\n\n  prototype$j.transform = function(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (_.values) {\n      // parse and ingest values\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else {\n      // return promise for async loading\n      return df.request(_.url, _.format)\n        .then(res => output(this, pulse, vegaUtil.array(res.data)));\n    }\n  };\n\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.add = out.source = data;\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n\n  Lookup.Definition = {\n    \"type\": \"Lookup\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"index\", \"type\": \"index\", \"params\": [\n          {\"name\": \"from\", \"type\": \"data\", \"required\": true },\n          {\"name\": \"key\", \"type\": \"field\", \"required\": true }\n        ] },\n      { \"name\": \"values\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true, \"required\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true },\n      { \"name\": \"default\", \"default\": null }\n    ]\n  };\n\n  var prototype$k = vegaUtil.inherits(Lookup, vegaDataflow.Transform);\n\n  prototype$k.transform = function(_, pulse) {\n    var out = pulse,\n        as = _.as,\n        keys = _.fields,\n        index = _.index,\n        values = _.values,\n        defaultValue = _.default==null ? null : _.default,\n        reset = _.modified(),\n        flag = reset ? pulse.SOURCE : pulse.ADD,\n        n = keys.length,\n        set, m, mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        vegaUtil.error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(vegaUtil.accessorName);\n\n      set = function(t) {\n        for (var i=0, k=0, j, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n          else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        vegaUtil.error('Missing output field names.');\n      }\n\n      set = function(t) {\n        for (var i=0, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v==null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(function(k) { return pulse.modified(k.fields); });\n      flag |= (mods ? pulse.MOD : 0);\n    }\n    pulse.visit(flag, set);\n\n    return out.modifies(as);\n  };\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n  }\n\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n\n  function update$4(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    var min = +Infinity,\n        max = -Infinity,\n        ext = _.extents,\n        i, n, e;\n\n    for (i=0, n=ext.length; i<n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n\n  function update$5(_) {\n    return (this.value && !_.modified())\n      ? this.value\n      : _.values.reduce(function(data, _) { return data.concat(_); }, []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  vegaUtil.inherits(Params, vegaDataflow.Transform);\n\n  Params.prototype.transform = function(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  };\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n\n  Pivot.Definition = {\n    \"type\": \"Pivot\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"value\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"op\", \"type\": \"enum\", \"values\": ValidAggregateOps, \"default\": \"sum\" },\n      { \"name\": \"limit\", \"type\": \"number\", \"default\": 0 },\n      { \"name\": \"key\", \"type\": \"field\" }\n    ]\n  };\n\n  var prototype$l = vegaUtil.inherits(Pivot, Aggregate);\n\n  prototype$l._transform = prototype$l.transform;\n\n  prototype$l.transform = function(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  };\n\n  // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n  function aggregateParams(_, pulse) {\n    var key    = _.field,\n        value  = _.value,\n        op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n        keys   = pivotKeys(key, _.limit || 0, pulse);\n\n    // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n    return {\n      key:      _.key,\n      groupby:  _.groupby,\n      ops:      keys.map(function() { return op; }),\n      fields:   keys.map(function(k) { return get(k, key, value, fields); }),\n      as:       keys.map(function(k) { return k + ''; }),\n      modified: _.modified.bind(_)\n    };\n  }\n\n  // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(\n      function(d) { return key(d) === k ? value(d) : NaN; },\n      fields,\n      k + ''\n    );\n  }\n\n  // Collect (and optionally limit) all unique pivot values.\n  function pivotKeys(key, limit, pulse) {\n    var map = {},\n        list = [];\n\n    pulse.visit(pulse.SOURCE, function(t) {\n      var k = key(t);\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n\n    // TODO? Move this comparator to vega-util?\n    list.sort(function(u, v) {\n      return (u<v||u==null) && v!=null ? -1\n        : (u>v||v==null) && u!=null ? 1\n        : ((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))!==u && v===v ? -1\n        : v!==v && u===u ? 1 : 0;\n    });\n\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n\n  var prototype$m = vegaUtil.inherits(PreFacet, Facet);\n\n  prototype$m.transform = function(_, pulse) {\n    var self = this,\n        flow = _.subflow,\n        field = _.field;\n\n    if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n      vegaUtil.error('PreFacet does not support field modification.');\n    }\n\n    this._targets.active = 0; // reset list of active subflows\n\n    pulse.visit(pulse.MOD, function(t) {\n      var sf = self.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n      field ? field(t).forEach(function(_) { sf.mod(_); }) : sf.mod(t);\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var sf = self.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n      field ? field(t).forEach(function(_) { sf.add(vegaDataflow.ingest(_)); }) : sf.add(t);\n    });\n\n    pulse.visit(pulse.REM, function(t) {\n      var sf = self.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n      field ? field(t).forEach(function(_) { sf.rem(_); }) : sf.rem(t);\n    });\n\n    return pulse;\n  };\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Project.Definition = {\n    \"type\": \"Project\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"fields\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n    ]\n  };\n\n  var prototype$n = vegaUtil.inherits(Project, vegaDataflow.Transform);\n\n  prototype$n.transform = function(_, pulse) {\n    var fields = _.fields,\n        as = fieldNames(_.fields, _.as || []),\n        derive = fields\n          ? function(s, t) { return project(s, t, fields, as); }\n          : vegaDataflow.rederive,\n        out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    out = pulse.fork(pulse.NO_SOURCE);\n\n    pulse.visit(pulse.REM, function(t) {\n      var id = vegaDataflow.tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n\n    pulse.visit(pulse.ADD, function(t) {\n      var dt = derive(t, vegaDataflow.ingest({}));\n      lut[vegaDataflow.tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, function(t) {\n      out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n    });\n\n    return out;\n  };\n\n  function project(s, t, fields, as) {\n    for (var i=0, n=fields.length; i<n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$o = vegaUtil.inherits(Proxy, vegaDataflow.Transform);\n\n  prototype$o.transform = function(_, pulse) {\n    this.value = _.value;\n    return _.modified('value')\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  };\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Quantile.Definition = {\n    \"type\": \"Quantile\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"field\", \"type\": \"field\", \"required\": true },\n      { \"name\": \"probs\", \"type\": \"number\", \"array\": true },\n      { \"name\": \"step\", \"type\": \"number\", \"default\": 0.01 },\n      { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"default\": [\"prob\", \"value\"] }\n    ]\n  };\n\n  var prototype$p = vegaUtil.inherits(Quantile, vegaDataflow.Transform);\n\n  var EPSILON$1 = 1e-14;\n\n  prototype$p.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby, _.field),\n          names = (_.groupby || []).map(vegaUtil.accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || d3Array.range(step/2, 1 - EPSILON$1, step),\n          n = p.length;\n\n    groups.forEach(g => {\n      const q = vegaStatistics.quantiles(g, p);\n\n      for (let i=0; i<n; ++i) {\n        const t = {};\n        for (let i=0; i<names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(vegaDataflow.ingest(t));\n      }\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n\n    return out;\n  };\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$q = vegaUtil.inherits(Relay, vegaDataflow.Transform);\n\n  prototype$q.transform = function(_, pulse) {\n    var out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n\n      pulse.visit(pulse.REM, t => {\n        var id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        var dt = vegaDataflow.derive(t);\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        var dt = lut[vegaDataflow.tupleid(t)], k;\n        for (k in t) {\n          dt[k] = t[k];\n          // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  };\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n\n  Sample.Definition = {\n    \"type\": \"Sample\",\n    \"metadata\": {},\n    \"params\": [\n      { \"name\": \"size\", \"type\": \"number\", \"default\": 1000 }\n    ]\n  };\n\n  var prototype$r = vegaUtil.inherits(Sample, vegaDataflow.Transform);\n\n  prototype$r.transform = function(_, pulse) {\n    var out = pulse.fork(pulse.NO_SOURCE),\n        mod = _.modified('size'),\n        num = _.size,\n        res = this.value,\n        cnt = this.count,\n        cap = 0,\n        map = res.reduce(function(m, t) {\n          m[vegaDataflow.tupleid(t)] = 1;\n          return m;\n        }, {});\n\n    // sample reservoir update function\n    function update(t) {\n      var p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * vegaStatistics.random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, function(t) {\n        var id = vegaDataflow.tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      });\n\n      // filter removed tuples out of the sample reservoir\n      res = res.filter(function(t) { return map[vegaDataflow.tupleid(t)] !== -1; });\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, function(t) {\n        // update, but skip previously sampled tuples\n        if (!map[vegaDataflow.tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      for (var i=0, n=res.length-num; i<n; ++i) {\n        map[vegaDataflow.tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, function(t) {\n        if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(function(t) { return !map[vegaDataflow.tupleid(t)]; });\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  };\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  Sequence.Definition = {\n    \"type\": \"Sequence\",\n    \"metadata\": {\"generates\": true, \"changes\": true},\n    \"params\": [\n      { \"name\": \"start\", \"type\": \"number\", \"required\": true },\n      { \"name\": \"stop\", \"type\": \"number\", \"required\": true },\n      { \"name\": \"step\", \"type\": \"number\", \"default\": 1 },\n      { \"name\": \"as\", \"type\": \"string\", \"default\": \"data\" }\n    ]\n  };\n\n  var prototype$s = vegaUtil.inherits(Sequence, vegaDataflow.Transform);\n\n  prototype$s.transform = function(_, pulse) {\n    if (this.value && !_.modified()) return;\n\n    var out = pulse.materialize().fork(pulse.MOD),\n        as = _.as || 'data';\n\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n    this.value = d3Array.range(_.start, _.stop, _.step || 1).map(function(v) {\n      var t = {};\n      t[as] = v;\n      return vegaDataflow.ingest(t);\n    });\n\n    out.add = pulse.add.concat(this.value);\n\n    return out;\n  };\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n\n  var prototype$t = vegaUtil.inherits(Sieve, vegaDataflow.Transform);\n\n  prototype$t.transform = function(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed()\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  };\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n\n  var prototype$u = vegaUtil.inherits(TupleIndex, vegaDataflow.Transform);\n\n  prototype$u.transform = function(_, pulse) {\n    var df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        mod = true;\n\n    function set(t) { index.set(field(t), t); }\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, function(t) { index.delete(field(t)); });\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  };\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  var prototype$v = vegaUtil.inherits(Values, vegaDataflow.Transform);\n\n  prototype$v.transform = function(_, pulse) {\n    var run = !this.value\n      || _.modified('field')\n      || _.modified('sort')\n      || pulse.changed()\n      || (_.sort && pulse.modified(_.sort.fields));\n\n    if (run) {\n      this.value = (_.sort\n        ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort))\n        : pulse.source).map(_.field);\n    }\n  };\n\n  function WindowOp(op, field, param, as) {\n    let fn = WindowOps[op](field, param);\n    return {\n      init:   fn.init || vegaUtil.zero,\n      update: function(w, t) { t[as] = fn.next(w); }\n    };\n  }\n\n  const WindowOps = {\n    row_number: function() {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function() {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          let i = w.index,\n              data = w.data;\n          return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n        }\n      };\n    },\n    dense_rank: function() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          let i = w.index,\n              d = w.data;\n          return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function() {\n      let rank = WindowOps.rank(),\n          next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function() {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          let i = w.index,\n              d = w.data,\n              c = w.compare;\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n            cume = i;\n          }\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function(field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      let cume = WindowOps.cume_dist(),\n          next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n\n    lag: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          let i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function(field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          let i = w.index + offset,\n              d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n\n    first_value: function(field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function(field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      }\n    },\n    nth_value: function(field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          let i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      }\n    },\n\n    prev_value: function(field) {\n      let prev = null;\n      return {\n        next: w => {\n          let v = field(w.data[w.index]);\n          return v != null ? (prev = v) : prev;\n        }\n      }\n    },\n    next_value: function(field) {\n      let v = null,\n          i = -1;\n      return {\n        next: w => {\n          let d = w.data;\n          return w.index <= i ? v\n            : (i = find(field, d, w.index)) < 0\n              ? (i = d.length, v = null)\n              : (v = field(d[i]));\n        }\n      };\n    },\n\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      let v = field(data[index]);\n      if (v != null) return index;\n    }\n    return -1;\n  }\n\n  var ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    let self = this,\n        ops = vegaUtil.array(_.ops),\n        fields = vegaUtil.array(_.fields),\n        params = vegaUtil.array(_.params),\n        as = vegaUtil.array(_.as),\n        outputs = self.outputs = [],\n        windows = self.windows = [],\n        inputs = {},\n        map = {},\n        countOnly = true,\n        counts = [],\n        measures = [];\n\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n    visitInputs(_.sort);\n\n    ops.forEach(function(op, i) {\n      let field = fields[i],\n          mname = vegaUtil.accessorName(field),\n          name = measureName(op, mname, as[i]);\n\n      visitInputs(field);\n      outputs.push(name);\n\n      // Window operation\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      }\n\n      // Aggregate operation\n      else {\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        let m = map[mname];\n        if (!m) {\n          m = (map[mname] = []);\n          m.field = field;\n          measures.push(m);\n        }\n        m.push(createMeasure(op, name));\n      }\n    });\n\n    if (counts.length || measures.length) {\n      self.cell = cell(measures, counts, countOnly);\n    }\n\n    self.inputs = Object.keys(inputs);\n  }\n\n  const prototype$w = WindowState.prototype;\n\n  prototype$w.init = function() {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype$w.update = function(w, t) {\n    let self = this,\n        cell = self.cell,\n        wind = self.windows,\n        data = w.data,\n        m = wind && wind.length,\n        j;\n\n    if (cell) {\n      for (j=w.p0; j<w.i0; ++j) cell.rem(data[j]);\n      for (j=w.p1; j<w.i1; ++j) cell.add(data[j]);\n      cell.set(t);\n    }\n    for (j=0; j<m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n\n    let cell = {\n      num:   0,\n      agg:   null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n      for (; i<n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function(t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n      for (let i=0; i<n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function(t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n      for (let i=0; i<n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function(t) {\n      let i, n;\n\n      // consolidate stored values\n      if (store) store.values();\n\n      // update tuple properties\n      for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n      if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n    };\n\n    cell.init = function() {\n      cell.num = 0;\n      if (store) store.reset();\n      for (let i=0; i<n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n\n  Window.Definition = {\n    \"type\": \"Window\",\n    \"metadata\": {\"modifies\": true},\n    \"params\": [\n      { \"name\": \"sort\", \"type\": \"compare\" },\n      { \"name\": \"groupby\", \"type\": \"field\", \"array\": true },\n      { \"name\": \"ops\", \"type\": \"enum\", \"array\": true, \"values\": ValidWindowOps.concat(ValidAggregateOps) },\n      { \"name\": \"params\", \"type\": \"number\", \"null\": true, \"array\": true },\n      { \"name\": \"fields\", \"type\": \"field\", \"null\": true, \"array\": true },\n      { \"name\": \"as\", \"type\": \"string\", \"null\": true, \"array\": true },\n      { \"name\": \"frame\", \"type\": \"number\", \"null\": true, \"array\": true, \"length\": 2, \"default\": [null, 0] },\n      { \"name\": \"ignorePeers\", \"type\": \"boolean\", \"default\": false }\n    ]\n  };\n\n  var prototype$x = vegaUtil.inherits(Window, vegaDataflow.Transform);\n\n  prototype$x.transform = function(_, pulse) {\n    var self = this,\n        state = self.state,\n        mod = _.modified(),\n        cmp = vegaDataflow.stableCompare(_.sort),\n        i, n;\n\n    this.stamp = pulse.stamp;\n\n    // initialize window state\n    if (!state || mod) {\n      state = self.state = new WindowState(_);\n    }\n\n    // retrieve group for a tuple\n    var key = groupkey(_.groupby);\n    function group(t) { return self.group(key(t)); }\n\n    // partition input tuples\n    if (mod || pulse.modified(state.inputs)) {\n      self.value = {};\n      pulse.visit(pulse.SOURCE, function(t) { group(t).add(t); });\n    } else {\n      pulse.visit(pulse.REM, function(t) { group(t).remove(t); });\n      pulse.visit(pulse.ADD, function(t) { group(t).add(t); });\n    }\n\n    // perform window calculations for each modified partition\n    for (i=0, n=self._mlen; i<n; ++i) {\n      processPartition(self._mods[i], state, cmp, _);\n    }\n    self._mlen = 0;\n    self._mods = [];\n\n    // TODO don't reflow everything?\n    return pulse.reflow(mod).modifies(state.outputs);\n  };\n\n  prototype$x.group = function(key) {\n    var self = this,\n        group = self.value[key];\n\n    if (!group) {\n      group = self.value[key] = SortedList(vegaDataflow.tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < self.stamp) {\n      group.stamp = self.stamp;\n      self._mods[self._mlen++] = group;\n    }\n\n    return group;\n  };\n\n  function processPartition(list, state, cmp, _) {\n    var sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp), // use cmp for stable sort\n        n = data.length,\n        i = 0,\n        b = range ? d3Array.bisector(sort) : null,\n        w = {\n          i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n          data: data, compare: sort || vegaUtil.constant(-1)\n        };\n\n    for (state.init(); i<n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  }\n\n  // if frame type is 'range', adjust window for peer values\n  function adjustRange(w, bisect) {\n    var r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n\n    if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","vega","transforms","d3","vegaUtil","vegaDataflow","vegaStatistics","d3Array","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","base","out","m","extend","init","add","rem","idx","name","compareIndex","a","b","resolve","agg","stream","collect","helper","r","AggregateOps","req","forEach","str","map","reduce","values","key","push","sort","compileMeasures","field","get","identity","ctr","set","all","slice","stringValue","Function","prototype","_","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","t","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update","value","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","materialize","SOURCE","fieldNames","as","accessorName","partition","groupby","groups","g","dims","DotBin","Expression","update$1","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$2","isArray","array","Filter","Flatten","Fold","Formula","Generate","Impute","getValue","method","Methods","v","getField","NaN","partition$1","keyvals","domain","kMap","gMap","group","j","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$3","flat","Load","output","op","ingest","fork","NO_FIELDS","NO_SOURCE","Lookup","MultiExtent","update$4","min","Infinity","max","ext","extents","e","MultiValues","update$5","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","ops","bind","list","visit","u","Date","PreFacet","Project","Proxy","Quantile","Relay","Sample","count","Sequence","Sieve","TupleIndex","Values","WindowOp","param","fn","WindowOps","zero","w","next","WindowState","visitInputs","inputs","outputs","windows","countOnly","counts","measures","mname","cell","Object","num","store","Array","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","range","ignorePeers","frame","bisector","i0","i1","p0","p1","index","constant","Math","abs","r0","r1","c","bisect","left","right","ValidAggregateOps","prototype.reset","_add","_rem","_q","_get","_ext","prototype.add","prototype.rem","prototype.values","distinct","prototype.distinct","s","extent","prototype.extent","extentIndex","argmin","prototype.argmin","argmax","prototype.argmax","prototype.min","prototype.max","quartile","prototype.quartile","quartiles","q1","prototype.q1","q2","prototype.q2","q3","prototype.q3","ci","prototype.ci","_ci","bootstrapCI","ci0","prototype.ci0","ci1","prototype.ci1","Definition","prototype$1","inherits","transform","prototype$1.transform","aggr","mod","stamp","REM","ADD","modifies","drop","cross","changes","prototype$1.cross","cells","tuple","vals","generate","curr","prototype$1.init","inputVisit","inputMap","dname","cellkey","outname","prototype$1.cell","newcell","prototype$1.newcell","newtuple","prototype$1.newtuple","p","names","replace","prototype$1.add","prototype$1.rem","celltuple","prototype$1.celltuple","prototype$1.changes","adds","mods","prev","prototype$2","prototype$2.transform","bins","_bins","start","step","b0","b1","reflow","flag","ADD_MOD","prototype$2._bins","bin","stop","anchor","floor","EPSILON","prototype$3","prototype$3.transform","ALL","stableCompare","root","prototype$4","prototype$4.transform","match","case","text","toUpperCase","toLowerCase","tokens","test","_parameterCheck","_match","_stop","_finish","prototype$4._parameterCheck","RegExp","stopwords","pattern","prototype$4._finish","tuples","_tuples","prototype$5","prototype$5.transform","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","prototype$6","prototype$6.transform","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","prototype$7","prototype$7.transform","smooth","span","dotbin","prototype$8","prototype$8.transform","Number","isFinite","dataflow","warn","prototype$9","connect","prototype$9.connect","target","targets","prototype$9.add","prototype$9.rem","prototype$9.mod","prototype$9.init","evaluate","prototype$9.evaluate","prototype$a","activate","prototype$a.activate","flow","subflow","prototype$a.subflow","flows","sf","_group","df","prototype$a.transform","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","runAfter","clean","prototype$b","prototype$b.transform","revisit","isMod","has","prototype$c","prototype$c.transform","arrays","maxlen","l","derive","prototype$d","prototype$d.transform","fnames","prototype$e","prototype$e.transform","initonly","prototype$f","prototype$f.transform","gen","generator","median","mean","prototype$g","prototype$g.transform","impute","fName","kName","gNames","kVal","_impute","isNaN","prototype$h","prototype$h.transform","prototype$h.changes","prototype$i","prototype$i.transform","bandwidth","cumulative","density","scale","local","prototype$j","prototype$j.transform","format","request","url","then","res","prototype$k","prototype$k.transform","defaultValue","default","some","Params.prototype.transform","prototype$l","_transform","prototype$l.transform","prototype$m","prototype$m.transform","prototype$n","prototype$n.transform","rederive","lut","addAll","dt","prototype$o","prototype$o.transform","StopPropagation","prototype$p","prototype$p.transform","probs","EPSILON$1","q","quantiles","prototype$q","prototype$q.transform","prototype$r","prototype$r.transform","random","cap","prototype$s","prototype$s.transform","prototype$t","prototype$t.transform","prototype$u","prototype$u.transform","clear","prototype$v","prototype$v.transform","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","ceil","lag","offset","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype$w","prototype$w.init","prototype$w.update","wind","prototype$x","prototype$x.transform","prototype$x.group","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","tupleindex","window","defineProperty"]
}
