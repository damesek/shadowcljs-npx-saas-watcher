{
"version":3,
"file":"module$node_modules$d3_array$dist$d3_array.js",
"lineCount":42,
"mappings":"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",
"sources":["node_modules/d3-array/dist/d3-array.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_array$dist$d3_array\"] = function(global,process,require,module,exports,shadow$shims) {\n// https://d3js.org/d3-array/ v2.3.2 Copyright 2019 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}));\n}(this, function (exports) { 'use strict';\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction bisector(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n\nvar ascendingBisect = bisector(ascending);\nvar bisectRight = ascendingBisect.right;\nvar bisectLeft = ascendingBisect.left;\n\nfunction count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n\nfunction length(array) {\n  return array.length | 0;\n}\n\nfunction empty(length) {\n  return !(length > 0);\n}\n\nfunction arrayify(values) {\n  return typeof values !== \"object\" || \"length\" in values ? values : Array.from(values);\n}\n\nfunction reducer(reduce) {\n  return values => reduce(...values);\n}\n\nfunction cross(...values) {\n  const reduce = typeof values[values.length - 1] === \"function\" && reducer(values.pop());\n  values = values.map(arrayify);\n  const lengths = values.map(length);\n  const j = values.length - 1;\n  const index = new Array(j + 1).fill(0);\n  const product = [];\n  if (j < 0 || lengths.some(empty)) return product;\n  while (true) {\n    product.push(index.map((j, i) => values[i][j]));\n    let i = j;\n    while (++index[i] === lengths[i]) {\n      if (i === 0) return reduce ? product.map(reduce) : product;\n      index[i--] = 0;\n    }\n  }\n}\n\nfunction descending(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nfunction variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n\nfunction deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n\nfunction extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n\nfunction identity(x) {\n  return x;\n}\n\nfunction group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nfunction groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nfunction rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nfunction rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new Map();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n\nvar array = Array.prototype;\n\nvar slice = array.slice;\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n\nfunction sturges(values) {\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\n}\n\nfunction bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisectRight(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n\nfunction number(x) {\n  return x === null ? NaN : +x;\n}\n\nfunction* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n\nfunction quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  values.sort(ascending);\n  return quantileSorted(values, p);\n}\n\nfunction quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nfunction freedmanDiaconis(values, min, max) {\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));\n}\n\nfunction scott(values, min, max) {\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));\n}\n\nfunction max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n\nfunction maxIndex(values, valueof) {\n  let max;\n  let maxIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  }\n  return maxIndex;\n}\n\nfunction mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nfunction quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n\nfunction median(values, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!values.length) return;\n  const n = values.length;\n  const i = n >> 1;\n  quickselect(values, i - 1, 0);\n  if ((n & 1) === 0) quickselect(values, i, i);\n  return quantile(values, 0.5);\n}\n\nfunction* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nfunction merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n\nfunction min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n\nfunction minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n\nfunction pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nfunction pair(a, b) {\n  return [a, b];\n}\n\nfunction permute(source, keys) {\n  return Array.from(keys, key => source[key]);\n}\n\nfunction least(values, compare = ascending) {\n  let min;\n  let defined = false;\n  if (compare.length === 1) {\n    let minValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, minValue) < 0\n          : ascending(value, value) === 0) {\n        min = element;\n        minValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, min) < 0\n          : compare(value, value) === 0) {\n        min = value;\n        defined = true;\n      }\n    }\n  }\n  return min;\n}\n\nfunction leastIndex(values, compare = ascending) {\n  if (compare.length === 1) return minIndex(values, compare);\n  let minValue;\n  let min = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (min < 0\n        ? compare(value, value) === 0\n        : compare(value, minValue) < 0) {\n      minValue = value;\n      min = index;\n    }\n  }\n  return min;\n}\n\nfunction greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n\nfunction greatestIndex(values, compare = ascending) {\n  if (compare.length === 1) return maxIndex(values, compare);\n  let maxValue;\n  let max = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (max < 0\n        ? compare(value, value) === 0\n        : compare(value, maxValue) > 0) {\n      maxValue = value;\n      max = index;\n    }\n  }\n  return max;\n}\n\nfunction scan(values, compare) {\n  const index = leastIndex(values, compare);\n  return index < 0 ? undefined : index;\n}\n\nfunction shuffle(array, i0 = 0, i1 = array.length) {\n  var m = i1 - (i0 = +i0),\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m + i0];\n    array[m + i0] = array[i + i0];\n    array[i + i0] = t;\n  }\n\n  return array;\n}\n\nfunction sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n\nfunction transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length$1(d) {\n  return d.length;\n}\n\nfunction zip() {\n  return transpose(arguments);\n}\n\nexports.ascending = ascending;\nexports.bin = bin;\nexports.bisect = bisectRight;\nexports.bisectLeft = bisectLeft;\nexports.bisectRight = bisectRight;\nexports.bisector = bisector;\nexports.count = count;\nexports.cross = cross;\nexports.descending = descending;\nexports.deviation = deviation;\nexports.extent = extent;\nexports.greatest = greatest;\nexports.greatestIndex = greatestIndex;\nexports.group = group;\nexports.groups = groups;\nexports.histogram = bin;\nexports.least = least;\nexports.leastIndex = leastIndex;\nexports.max = max;\nexports.maxIndex = maxIndex;\nexports.mean = mean;\nexports.median = median;\nexports.merge = merge;\nexports.min = min;\nexports.minIndex = minIndex;\nexports.pairs = pairs;\nexports.permute = permute;\nexports.quantile = quantile;\nexports.quantileSorted = quantileSorted;\nexports.quickselect = quickselect;\nexports.range = range;\nexports.rollup = rollup;\nexports.rollups = rollups;\nexports.scan = scan;\nexports.shuffle = shuffle;\nexports.sum = sum;\nexports.thresholdFreedmanDiaconis = freedmanDiaconis;\nexports.thresholdScott = scott;\nexports.thresholdSturges = sturges;\nexports.tickIncrement = tickIncrement;\nexports.tickStep = tickStep;\nexports.ticks = ticks;\nexports.transpose = transpose;\nexports.variance = variance;\nexports.zip = zip;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","d3","ascending","a","b","NaN","bisector","compare","length","ascendingComparator","left","x","lo","hi","mid","right","f","d","count","values","valueof","undefined","value","index","array","empty","arrayify","Array","from","reducer","reduce","variance","delta","mean","sum","deviation","v","Math","sqrt","extent","min","max","identity","nest","map","keys","regroup","i","groups","Map","keyof","key","group","get","push","set","constant","range","start","stop","step","n","arguments","ceil","tickIncrement","power","floor","log","LN10","error","pow","e10","e5","e2","tickStep","step0","abs","step1","sturges","LN2","bin","histogram","data","isArray","xz","domain","x0","x1","tz","threshold","m","shift","pop","bins","bisectRight","histogram.value","_","histogram.domain","thresholds","histogram.thresholds","slice","call","number","numbers","quantile","p","Float64Array","sort","quantileSorted","i0","value0","value1","maxIndex","quickselect","k","z","s","exp","sd","newLeft","newRight","t","j","swap","flatten","arrays","minIndex","pair","leastIndex","minValue","transpose","matrix","length$1","row","ascendingBisect","bisectLeft","prototype","bisect","cross","lengths","fill","product","some","descending","greatest","defined","element","maxValue","greatestIndex","least","median","merge","pairs","pairof","first","previous","permute","source","rollup","rollups","scan","shuffle","i1","random","thresholdFreedmanDiaconis","freedmanDiaconis","thresholdScott","scott","thresholdSturges","ticks","reverse","isFinite","zip","Object","defineProperty"]
}
