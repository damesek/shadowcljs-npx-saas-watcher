shadow$provide.module$node_modules$vega_transforms$build$vega_transforms=function(global$jscomp$0,process$jscomp$0,require,module,exports$jscomp$0,shadow$shims){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0,require("module$node_modules$vega_util$build$vega_util"),require("module$node_modules$vega_dataflow$build$vega_dataflow"),require("module$node_modules$vega_statistics$build$vega_statistics"),require("module$node_modules$d3_array$dist$d3_array")):
"function"===typeof define&&define.amd?define(["exports","vega-util","vega-dataflow","vega-statistics","d3-array"],factory):(global=global||self,factory((global.vega=global.vega||{},global.vega.transforms={}),global.vega,global.vega,global.vega,global.d3))})(this,function(exports,vegaUtil,vegaDataflow,vegaStatistics,d3Array){function multikey(f){return function(x){for(var n=f.length,i=1,k=String(f[0](x));i<n;++i)k+="|"+f[i](x);return k}}function groupkey(fields){return fields&&fields.length?1===fields.length?
fields[0]:multikey(fields):function(){return""}}function measure(base){return function(out){var m=vegaUtil.extend({init:"",add:"",rem:"",idx:0},base);m.out=out||base.name;return m}}function compareIndex(a,b){return a.idx-b.idx}function resolve(agg,stream){function collect(m,a){function helper(r){m[r]||collect(m,m[r]=AggregateOps[r]())}a.req&&a.req.forEach(helper);stream&&a.str&&a.str.forEach(helper);return m}agg=agg.reduce(collect,agg.reduce(function(m,a){m[a.name]=a;return m},{}));var values=[],
key;for(key in agg)values.push(agg[key]);return values.sort(compareIndex)}function compileMeasures(agg,field){field=field||vegaUtil.identity;var init="var cell \x3d this.cell; this.valid \x3d 0; this.missing \x3d 0;",ctr="this.cell \x3d cell; this.init();",add="if(v\x3d\x3dnull){++this.missing; return;} if(v!\x3d\x3dv) return; ++this.valid;",rem="if(v\x3d\x3dnull){--this.missing; return;} if(v!\x3d\x3dv) return; --this.valid;",set="var cell \x3d this.cell;";resolve(agg,!0).forEach(function(a){init+=
a.init;add+=a.add;rem+=a.rem});agg.slice().sort(compareIndex).forEach(function(a){set+="t["+vegaUtil.stringValue(a.out)+"]\x3d"+a.set+";"});set+="return t;";ctr=Function("cell",ctr);ctr.prototype.init=Function(init);ctr.prototype.add=Function("v","t",add);ctr.prototype.rem=Function("v","t",rem);ctr.prototype.set=Function("t",set);ctr.prototype.get=field;ctr.fields=agg.map(function(_){return _.out});return ctr}function TupleStore(key){this._key=key?vegaUtil.field(key):vegaDataflow.tupleid;this.reset()}
function Aggregate(params){vegaDataflow.Transform.call(this,null,params);this._adds=[];this._mods=[];this._mlen=this._alen=0;this._drop=!0;this._cross=!1;this._dims=[];this._dnames=[];this._measures=[];this._countOnly=!1;this._outputs=this._inputs=this._prev=this._counts=null}function Bin(params){vegaDataflow.Transform.call(this,null,params)}function SortedList(idFunc,source,input){var data=source||[],add=input||[],rem={},cnt=0;return{add:function(t){add.push(t)},remove:function(t){rem[idFunc(t)]=
++cnt},size:function(){return data.length},data:function(compare,resort){cnt&&(data=data.filter(function(t){return!rem[idFunc(t)]}),rem={},cnt=0);resort&&compare&&data.sort(compare);add.length&&(data=compare?vegaUtil.merge(compare,data,add.sort(compare)):data.concat(add),add=[]);return data}}}function Collect(params){vegaDataflow.Transform.call(this,[],params)}function Compare(params){vegaDataflow.Operator.call(this,null,update$jscomp$0,params)}function update$jscomp$0(_){return this.value&&!_.modified()?
this.value:vegaUtil.compare(_.fields,_.orders)}function CountPattern(params){vegaDataflow.Transform.call(this,null,params)}function Cross(params){vegaDataflow.Transform.call(this,null,params)}function parse(def,data){var func=def["function"];vegaUtil.hasOwnProperty(Distributions,func)||vegaUtil.error("Unknown distribution function: "+func);func=Distributions[func]();for(var name in def)if("field"===name)func.data((def.from||data()).map(def[name]));else if("distributions"===name)func[name](def[name].map(function(_){return parse(_,
data)}));else if("function"===typeof func[name])func[name](def[name]);return func}function Density(params){vegaDataflow.Transform.call(this,null,params)}function source$jscomp$0(pulse){return function(){return pulse.materialize(pulse.SOURCE).source}}function fieldNames(fields,as){return fields?fields.map(function(f,i){return as[i]||vegaUtil.accessorName(f)}):null}function partition(data,groupby,field){var groups=[],get=function(f){return f(t)},n;if(null==groupby)groups.push(data.map(field));else{var map=
{};var i=0;for(n=data.length;i<n;++i){var t=data[i];var k=groupby.map(get);var g=map[k];g||(map[k]=g=[],g.dims=k,groups.push(g));g.push(field(t))}}return groups}function DotBin(params){vegaDataflow.Transform.call(this,null,params)}function Expression(params){vegaDataflow.Operator.call(this,null,update$1,params);this.modified(!0)}function update$1(_){var expr=_.expr;return this.value&&!_.modified("expr")?this.value:vegaUtil.accessor(function(datum){return expr(datum,_)},vegaUtil.accessorFields(expr),
vegaUtil.accessorName(expr))}function Extent(params){vegaDataflow.Transform.call(this,[void 0,void 0],params)}function Subflow(pulse,parent){vegaDataflow.Operator.call(this,pulse);this.parent=parent}function Facet(params){vegaDataflow.Transform.call(this,{},params);this._keys=vegaUtil.fastmap();var a=this._targets=[];a.active=0;a.forEach=function(f){for(var i=0,n=a.active;i<n;++i)f(a[i],i,a)}}function Field(params){vegaDataflow.Operator.call(this,null,update$2,params)}function update$2(_){return this.value&&
!_.modified()?this.value:vegaUtil.isArray(_.name)?vegaUtil.array(_.name).map(function(f){return vegaUtil.field(f)}):vegaUtil.field(_.name,_.as)}function Filter(params){vegaDataflow.Transform.call(this,vegaUtil.fastmap(),params)}function Flatten(params){vegaDataflow.Transform.call(this,[],params)}function Fold(params){vegaDataflow.Transform.call(this,[],params)}function Formula(params){vegaDataflow.Transform.call(this,null,params)}function Generate(params){vegaDataflow.Transform.call(this,[],params)}
function Impute(params){vegaDataflow.Transform.call(this,[],params)}function getValue(_){var m=_.method||Methods.value;if(null==Methods[m])vegaUtil.error("Unrecognized imputation method: "+m);else{if(m===Methods.value){var v=void 0!==_.value?_.value:0;return function(){return v}}return Methods[m]}}function getField(_){var f=_.field;return function(t){return t?f(t):NaN}}function partition$1(data,groupby,key,keyvals){var get=function(f){return f(t)},groups=[];keyvals=keyvals?keyvals.slice():[];var kMap=
{},gMap={},group,n;keyvals.forEach(function(k,i){kMap[k]=i+1});var i$jscomp$0=0;for(n=data.length;i$jscomp$0<n;++i$jscomp$0){var t=data[i$jscomp$0];var gVals=key(t);var j=kMap[gVals]||(kMap[gVals]=keyvals.push(gVals));var gKey=(gVals=groupby?groupby.map(get):Empty)+"";(group=gMap[gKey])||(group=gMap[gKey]=[],groups.push(group),group.values=gVals);group[j-1]=t}groups.domain=keyvals;return groups}function JoinAggregate(params){Aggregate.call(this,params)}function KDE(params){vegaDataflow.Transform.call(this,
null,params)}function Key(params){vegaDataflow.Operator.call(this,null,update$3,params)}function update$3(_){return this.value&&!_.modified()?this.value:vegaUtil.key(_.fields,_.flat)}function Load(params){vegaDataflow.Transform.call(this,[],params)}function output$jscomp$0(op,pulse,data){data.forEach(vegaDataflow.ingest);pulse=pulse.fork(pulse.NO_FIELDS&pulse.NO_SOURCE);pulse.rem=op.value;op.value=pulse.add=pulse.source=data;return pulse}function Lookup(params){vegaDataflow.Transform.call(this,{},
params)}function MultiExtent(params){vegaDataflow.Operator.call(this,null,update$4,params)}function update$4(_){if(this.value&&!_.modified())return this.value;var min=Infinity,max=-Infinity;_=_.extents;var n;var i=0;for(n=_.length;i<n;++i){var e=_[i];e[0]<min&&(min=e[0]);e[1]>max&&(max=e[1])}return[min,max]}function MultiValues(params){vegaDataflow.Operator.call(this,null,update$5,params)}function update$5(_$jscomp$0){return this.value&&!_$jscomp$0.modified()?this.value:_$jscomp$0.values.reduce(function(data,
_){return data.concat(_)},[])}function Params(params){vegaDataflow.Transform.call(this,null,params)}function Pivot(params){Aggregate.call(this,params)}function aggregateParams(_,pulse){var key=_.field,value=_.value,op=("count"===_.op?"__count__":_.op)||"sum",fields=vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),keys=pivotKeys(key,_.limit||0,pulse);pulse.changed()&&_.set("__pivot__",null,null,!0);return{key:_.key,groupby:_.groupby,ops:keys.map(function(){return op}),fields:keys.map(function(k){return get(k,
key,value,fields)}),as:keys.map(function(k){return k+""}),modified:_.modified.bind(_)}}function get(k,key,value,fields){return vegaUtil.accessor(function(d){return key(d)===k?value(d):NaN},fields,k+"")}function pivotKeys(key,limit,pulse){var map={},list=[];pulse.visit(pulse.SOURCE,function(t){t=key(t);map[t]||(map[t]=1,list.push(t))});list.sort(function(u,v){return(u<v||null==u)&&null!=v?-1:(u>v||null==v)&&null!=u?1:(v=v instanceof Date?+v:v,u=u instanceof Date?+u:u)!==u&&v===v?-1:v!==v&&u===u?1:
0});return limit?list.slice(0,limit):list}function PreFacet(params){Facet.call(this,params)}function Project(params){vegaDataflow.Transform.call(this,null,params)}function Proxy(params){vegaDataflow.Transform.call(this,null,params)}function Quantile(params){vegaDataflow.Transform.call(this,null,params)}function Relay(params){vegaDataflow.Transform.call(this,null,params)}function Sample(params){vegaDataflow.Transform.call(this,[],params);this.count=0}function Sequence(params){vegaDataflow.Transform.call(this,
null,params)}function Sieve(params){vegaDataflow.Transform.call(this,null,params);this.modified(!0)}function TupleIndex(params){vegaDataflow.Transform.call(this,vegaUtil.fastmap(),params)}function Values(params){vegaDataflow.Transform.call(this,null,params)}function WindowOp(op,field,param,as){var fn=WindowOps[op](field,param);return{init:fn.init||vegaUtil.zero,update:function(w,t){t[as]=fn.next(w)}}}function WindowState(_$jscomp$0){function visitInputs(f){vegaUtil.array(vegaUtil.accessorFields(f)).forEach(function(_){return inputs[_]=
1})}var ops=vegaUtil.array(_$jscomp$0.ops),fields=vegaUtil.array(_$jscomp$0.fields),params=vegaUtil.array(_$jscomp$0.params),as=vegaUtil.array(_$jscomp$0.as),outputs=this.outputs=[],windows=this.windows=[],inputs={},map={},countOnly=!0,counts=[],measures=[];visitInputs(_$jscomp$0.sort);ops.forEach(function(op,i){var field=fields[i],mname=vegaUtil.accessorName(field),name=as[i]||op+(mname?"_"+mname:"");visitInputs(field);outputs.push(name);vegaUtil.hasOwnProperty(WindowOps,op)?windows.push(WindowOp(op,
fields[i],params[i],name)):(null==field&&"count"!==op&&vegaUtil.error("Null aggregate field specified."),"count"===op?counts.push(name):(countOnly=!1,i=map[mname],i||(i=map[mname]=[],i.field=field,measures.push(i)),i.push(AggregateOps[op](name))))});if(counts.length||measures.length)this.cell=cell(measures,counts,countOnly);this.inputs=Object.keys(inputs)}function cell(measures,counts,countOnly){measures=measures.map(function(m){return compileMeasures(m,m.field)});var cell={num:0,agg:null,store:!1,
count:counts};if(!countOnly)for(var n$jscomp$0=measures.length,a=cell.agg=Array(n$jscomp$0),i$jscomp$0=0;i$jscomp$0<n$jscomp$0;++i$jscomp$0)a[i$jscomp$0]=new measures[i$jscomp$0](cell);if(cell.store)var store=cell.data=new TupleStore;cell.add=function(t){cell.num+=1;if(!countOnly){store&&store.add(t);for(var i$283=0;i$283<n$jscomp$0;++i$283)a[i$283].add(a[i$283].get(t),t)}};cell.rem=function(t){--cell.num;if(!countOnly){store&&store.rem(t);for(var i$284=0;i$284<n$jscomp$0;++i$284)a[i$284].rem(a[i$284].get(t),
t)}};cell.set=function(t){var n;store&&store.values();var i=0;for(n=counts.length;i<n;++i)t[counts[i]]=cell.num;if(!countOnly)for(i=0,n=a.length;i<n;++i)a[i].set(t)};cell.init=function(){cell.num=0;store&&store.reset();for(var i$285=0;i$285<n$jscomp$0;++i$285)a[i$285].init()};return cell}function Window(params){vegaDataflow.Transform.call(this,{},params);this._mlen=0;this._mods=[]}function processPartition(list,state,cmp,_){var sort=_.sort,range=sort&&!_.ignorePeers;_=_.frame||[null,0];list=list.data(cmp);
cmp=list.length;var i=0,b=range?d3Array.bisector(sort):null;sort={i0:0,i1:0,p0:0,p1:0,index:0,data:list,compare:sort||vegaUtil.constant(-1)};for(state.init();i<cmp;++i){var w=sort,f=_,i$jscomp$0=i,n=cmp;w.p0=w.i0;w.p1=w.i1;w.i0=null==f[0]?0:Math.max(0,i$jscomp$0-Math.abs(f[0]));w.i1=null==f[1]?n:Math.min(n,i$jscomp$0+Math.abs(f[1])+1);w.index=i$jscomp$0;if(range){w=sort;f=b;i$jscomp$0=w.i0;n=w.i1-1;var c=w.compare,d=w.data,n$jscomp$0=d.length-1;0<i$jscomp$0&&!c(d[i$jscomp$0],d[i$jscomp$0-1])&&(w.i0=
f.left(d,d[i$jscomp$0]));n<n$jscomp$0&&!c(d[n],d[n+1])&&(w.i1=f.right(d,d[n]))}state.update(sort,list[i])}}var AggregateOps={values:measure({name:"values",init:"cell.store \x3d true;",set:"cell.data.values()",idx:-1}),count:measure({name:"count",set:"cell.num"}),__count__:measure({name:"count",set:"this.missing + this.valid"}),missing:measure({name:"missing",set:"this.missing"}),valid:measure({name:"valid",set:"this.valid"}),sum:measure({name:"sum",init:"this.sum \x3d 0;",add:"this.sum +\x3d +v;",
rem:"this.sum -\x3d v;",set:"this.sum"}),mean:measure({name:"mean",init:"this.mean \x3d 0;",add:"var d \x3d v - this.mean; this.mean +\x3d d / this.valid;",rem:"var d \x3d v - this.mean; this.mean -\x3d this.valid ? d / this.valid : this.mean;",set:"this.valid ? this.mean : undefined"}),average:measure({name:"average",set:"this.valid ? this.mean : undefined",req:["mean"],idx:1}),variance:measure({name:"variance",init:"this.dev \x3d 0;",add:"this.dev +\x3d d * (v - this.mean);",rem:"this.dev -\x3d d * (v - this.mean);",
set:"this.valid \x3e 1 ? this.dev / (this.valid-1) : undefined",req:["mean"],idx:1}),variancep:measure({name:"variancep",set:"this.valid \x3e 1 ? this.dev / this.valid : undefined",req:["variance"],idx:2}),stdev:measure({name:"stdev",set:"this.valid \x3e 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined",req:["variance"],idx:2}),stdevp:measure({name:"stdevp",set:"this.valid \x3e 1 ? Math.sqrt(this.dev / this.valid) : undefined",req:["variance"],idx:2}),stderr:measure({name:"stderr",set:"this.valid \x3e 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined",
req:["variance"],idx:2}),distinct:measure({name:"distinct",set:"cell.data.distinct(this.get)",req:["values"],idx:3}),ci0:measure({name:"ci0",set:"cell.data.ci0(this.get)",req:["values"],idx:3}),ci1:measure({name:"ci1",set:"cell.data.ci1(this.get)",req:["values"],idx:3}),median:measure({name:"median",set:"cell.data.q2(this.get)",req:["values"],idx:3}),q1:measure({name:"q1",set:"cell.data.q1(this.get)",req:["values"],idx:3}),q3:measure({name:"q3",set:"cell.data.q3(this.get)",req:["values"],idx:3}),
argmin:measure({name:"argmin",init:"this.argmin \x3d undefined;",add:"if (v \x3c this.min) this.argmin \x3d t;",rem:"if (v \x3c\x3d this.min) this.argmin \x3d undefined;",set:"this.argmin || cell.data.argmin(this.get)",req:["min"],str:["values"],idx:3}),argmax:measure({name:"argmax",init:"this.argmax \x3d undefined;",add:"if (v \x3e this.max) this.argmax \x3d t;",rem:"if (v \x3e\x3d this.max) this.argmax \x3d undefined;",set:"this.argmax || cell.data.argmax(this.get)",req:["max"],str:["values"],idx:3}),
min:measure({name:"min",init:"this.min \x3d undefined;",add:"if (v \x3c this.min || this.min \x3d\x3d\x3d undefined) this.min \x3d v;",rem:"if (v \x3c\x3d this.min) this.min \x3d NaN;",set:"this.min \x3d (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)",str:["values"],idx:4}),max:measure({name:"max",init:"this.max \x3d undefined;",add:"if (v \x3e this.max || this.max \x3d\x3d\x3d undefined) this.max \x3d v;",rem:"if (v \x3e\x3d this.max) this.max \x3d NaN;",set:"this.max \x3d (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)",
str:["values"],idx:4})},ValidAggregateOps=Object.keys(AggregateOps),prototype=TupleStore.prototype;prototype.reset=function(){this._add=[];this._rem=[];this._q=this._get=this._ext=null};prototype.add=function(v){this._add.push(v)};prototype.rem=function(v){this._rem.push(v)};prototype.values=function(){this._get=null;if(0===this._rem.length)return this._add;var a=this._add,r=this._rem,k=this._key,n=a.length,m=r.length,x=Array(n-m),map={},i,v;for(i=0;i<m;++i)map[k(r[i])]=1;for(r=i=0;i<n;++i)map[k(v=
a[i])]?map[k(v)]=0:x[r++]=v;this._rem=[];return this._add=x};prototype.distinct=function(get){for(var v=this.values(),n=v.length,map={},count=0,s;0<=--n;)s=get(v[n])+"",vegaUtil.hasOwnProperty(map,s)||(map[s]=1,++count);return count};prototype.extent=function(get){if(this._get!==get||!this._ext){var v=this.values(),i=vegaUtil.extentIndex(v,get);this._ext=[v[i[0]],v[i[1]]];this._get=get}return this._ext};prototype.argmin=function(get){return this.extent(get)[0]||{}};prototype.argmax=function(get){return this.extent(get)[1]||
{}};prototype.min=function(get){var m=this.extent(get)[0];return null!=m?get(m):void 0};prototype.max=function(get){var m=this.extent(get)[1];return null!=m?get(m):void 0};prototype.quartile=function(get){this._get===get&&this._q||(this._q=vegaStatistics.quartiles(this.values(),get),this._get=get);return this._q};prototype.q1=function(get){return this.quartile(get)[0]};prototype.q2=function(get){return this.quartile(get)[1]};prototype.q3=function(get){return this.quartile(get)[2]};prototype.ci=function(get){this._get===
get&&this._ci||(this._ci=vegaStatistics.bootstrapCI(this.values(),1E3,.05,get),this._get=get);return this._ci};prototype.ci0=function(get){return this.ci(get)[0]};prototype.ci1=function(get){return this.ci(get)[1]};Aggregate.Definition={type:"Aggregate",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:ValidAggregateOps},{name:"fields",type:"field","null":!0,array:!0},{name:"as",type:"string","null":!0,array:!0},{name:"drop",
type:"boolean","default":!0},{name:"cross",type:"boolean","default":!1},{name:"key",type:"field"}]};prototype=vegaUtil.inherits(Aggregate,vegaDataflow.Transform);prototype.transform=function(_,pulse){var aggr=this,out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS),mod=_.modified();aggr.stamp=out.stamp;aggr.value&&(mod||pulse.modified(aggr._inputs,!0))?(aggr._prev=aggr.value,aggr.value=mod?aggr.init(_):{},pulse.visit(pulse.SOURCE,function(t){return aggr.add(t)})):(aggr.value=aggr.value||aggr.init(_),
pulse.visit(pulse.REM,function(t){return aggr.rem(t)}),pulse.visit(pulse.ADD,function(t){return aggr.add(t)}));out.modifies(aggr._outputs);aggr._drop=!1!==_.drop;_.cross&&1<aggr._dims.length&&(aggr._drop=!1,aggr.cross());return aggr.changes(out)};prototype.cross=function(){function collect(cells){var key,i,v;for(key in cells){var t=cells[key].tuple;for(i=0;i<n;++i)vals[i][v=t[dims[i]]]=v}}function generate(base,tuple,index){var name=dims[index],v=vals[index++],k;for(k in v){tuple[name]=v[k];var key=
base?base+"|"+k:k;index<n?generate(key,tuple,index):curr[key]||aggr.cell(key,tuple)}}var aggr=this,curr=aggr.value,dims=aggr._dnames,vals=dims.map(function(){return{}}),n=dims.length;collect(aggr._prev);collect(curr);generate("",{},0)};prototype.init=function(_){function inputVisit(get){get=vegaUtil.array(vegaUtil.accessorFields(get));for(var i=0,n=get.length,f;i<n;++i)inputMap[f=get[i]]||(inputMap[f]=1,inputs.push(f))}var inputs=this._inputs=[],outputs=this._outputs=[],inputMap={};this._dims=vegaUtil.array(_.groupby);
this._dnames=this._dims.map(function(d){var dname=vegaUtil.accessorName(d);inputVisit(d);outputs.push(dname);return dname});this.cellkey=_.key?_.key:groupkey(this._dims);this._countOnly=!0;this._counts=[];this._measures=[];var fields=_.fields||[null],ops=_.ops||["count"];_=_.as||[];var n$jscomp$0=fields.length,map={},i$jscomp$0;n$jscomp$0!==ops.length&&vegaUtil.error("Unmatched number of fields and aggregate ops.");for(i$jscomp$0=0;i$jscomp$0<n$jscomp$0;++i$jscomp$0){var field=fields[i$jscomp$0];
var op=ops[i$jscomp$0];null==field&&"count"!==op&&vegaUtil.error("Null aggregate field specified.");var mname=vegaUtil.accessorName(field);var outname=_[i$jscomp$0]||op+(mname?"_"+mname:"");outputs.push(outname);if("count"===op)this._counts.push(outname);else{var m$jscomp$0=map[mname];m$jscomp$0||(inputVisit(field),m$jscomp$0=map[mname]=[],m$jscomp$0.field=field,this._measures.push(m$jscomp$0));"count"!==op&&(this._countOnly=!1);m$jscomp$0.push(AggregateOps[op](outname))}}this._measures=this._measures.map(function(m){return compileMeasures(m,
m.field)});return{}};prototype.cellkey=groupkey();prototype.cell=function(key,t){var cell=this.value[key];cell?0===cell.num&&this._drop&&cell.stamp<this.stamp?(cell.stamp=this.stamp,this._adds[this._alen++]=cell):cell.stamp<this.stamp&&(cell.stamp=this.stamp,this._mods[this._mlen++]=cell):(cell=this.value[key]=this.newcell(key,t),this._adds[this._alen++]=cell);return cell};prototype.newcell=function(key,t){key={key:key,num:0,agg:null,tuple:this.newtuple(t,this._prev&&this._prev[key]),stamp:this.stamp,
store:!1};if(!this._countOnly){t=this._measures;var n=t.length,i;key.agg=Array(n);for(i=0;i<n;++i)key.agg[i]=new t[i](key)}key.store&&(key.data=new TupleStore);return key};prototype.newtuple=function(t,p){var names=this._dnames,dims=this._dims,x={},n;var i=0;for(n=dims.length;i<n;++i)x[names[i]]=dims[i](t);return p?vegaDataflow.replace(p.tuple,x):vegaDataflow.ingest(x)};prototype.add=function(t){var key=this.cellkey(t);key=this.cell(key,t);var n;key.num+=1;if(!this._countOnly){key.store&&key.data.add(t);
key=key.agg;var i=0;for(n=key.length;i<n;++i)key[i].add(key[i].get(t),t)}};prototype.rem=function(t){var key=this.cellkey(t);key=this.cell(key,t);var n;--key.num;if(!this._countOnly){key.store&&key.data.rem(t);key=key.agg;var i=0;for(n=key.length;i<n;++i)key[i].rem(key[i].get(t),t)}};prototype.celltuple=function(cell){var tuple=cell.tuple,counts=this._counts,n;cell.store&&cell.data.values();var i=0;for(n=counts.length;i<n;++i)tuple[counts[i]]=cell.num;if(!this._countOnly)for(cell=cell.agg,i=0,n=cell.length;i<
n;++i)cell[i].set(tuple);return tuple};prototype.changes=function(out){var adds=this._adds,mods=this._mods,prev=this._prev,drop=this._drop,add=out.add,rem=out.rem,mod=out.mod,key;if(prev)for(key in prev){var cell=prev[key];drop&&!cell.num||rem.push(cell.tuple)}prev=0;for(key=this._alen;prev<key;++prev)add.push(this.celltuple(adds[prev])),adds[prev]=null;prev=0;for(key=this._mlen;prev<key;++prev)cell=mods[prev],(0===cell.num&&drop?rem:mod).push(this.celltuple(cell)),mods[prev]=null;this._alen=this._mlen=
0;this._prev=null;return out};Bin.Definition={type:"Bin",metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"anchor",type:"number"},{name:"maxbins",type:"number","default":20},{name:"base",type:"number","default":10},{name:"divide",type:"number",array:!0,"default":[5,2]},{name:"extent",type:"number",array:!0,length:2,required:!0},{name:"span",type:"number"},{name:"step",type:"number"},{name:"steps",type:"number",array:!0},{name:"minstep",type:"number","default":0},{name:"nice",
type:"boolean","default":!0},{name:"name",type:"string"},{name:"as",type:"string",array:!0,length:2,"default":["bin0","bin1"]}]};prototype=vegaUtil.inherits(Bin,vegaDataflow.Transform);prototype.transform=function(_,pulse){var bins=this._bins(_),start=bins.start,step=bins.step,as=_.as||["bin0","bin1"],b0=as[0],b1=as[1];_.modified()?(pulse=pulse.reflow(!0),_=pulse.SOURCE):_=pulse.modified(vegaUtil.accessorFields(_.field))?pulse.ADD_MOD:pulse.ADD;pulse.visit(_,function(t){var v=bins(t);t[b0]=v;t[b1]=
null==v?null:start+step*(1+(v-start)/step)});return pulse.modifies(as)};prototype._bins=function(_){if(this.value&&!_.modified())return this.value;var field=_.field,bins=vegaStatistics.bin(_),start=bins.start,stop=bins.stop,step=bins.step;null!=(bins=_.anchor)&&(bins-=start+step*Math.floor((bins-start)/step),start+=bins,stop+=bins);bins=function(t){t=field(t);if(null==t)return null;t=Math.max(start,Math.min(+t,stop-step));return start+step*Math.floor(1E-14+(t-start)/step)};bins.start=start;bins.stop=
stop;bins.step=step;return this.value=vegaUtil.accessor(bins,vegaUtil.accessorFields(field),_.name||"bin_"+vegaUtil.accessorName(field))};Collect.Definition={type:"Collect",metadata:{source:!0},params:[{name:"sort",type:"compare"}]};vegaUtil.inherits(Collect,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.ALL),list=SortedList(vegaDataflow.tupleid,this.value,out.materialize(out.ADD).add),sort=_.sort;_=pulse.changed()||sort&&(_.modified("sort")||pulse.modified(sort.fields));
out.visit(out.REM,list.remove);this.modified(_);this.value=out.source=list.data(vegaDataflow.stableCompare(sort),_);pulse.source&&pulse.source.root&&(this.value.root=pulse.source.root);return out};vegaUtil.inherits(Compare,vegaDataflow.Operator);CountPattern.Definition={type:"CountPattern",metadata:{generates:!0,changes:!0},params:[{name:"field",type:"field",required:!0},{name:"case",type:"enum",values:["upper","lower","mixed"],"default":"mixed"},{name:"pattern",type:"string","default":'[\\w"]+'},
{name:"stopwords",type:"string","default":""},{name:"as",type:"string",array:!0,length:2,"default":["text","count"]}]};prototype=vegaUtil.inherits(CountPattern,vegaDataflow.Transform);prototype.transform=function(_,pulse){function process(update){return function(tuple){tuple=get(tuple);var match=match$jscomp$0;switch(_.case){case "upper":tuple=tuple.toUpperCase();break;case "lower":tuple=tuple.toLowerCase()}tuple=tuple.match(match)||[];var t;match=0;for(var n=tuple.length;match<n;++match)stop.test(t=
tuple[match])||update(t)}}var init=this._parameterCheck(_,pulse),counts=this._counts,match$jscomp$0=this._match,stop=this._stop,get=_.field,as=_.as||["text","count"],add=process(function(t){counts[t]=1+(counts[t]||0)}),rem=process(function(t){--counts[t]});init?pulse.visit(pulse.SOURCE,add):(pulse.visit(pulse.ADD,add),pulse.visit(pulse.REM,rem));return this._finish(pulse,as)};prototype._parameterCheck=function(_,pulse){var init=!1;if(_.modified("stopwords")||!this._stop)this._stop=new RegExp("^"+
(_.stopwords||"")+"$","i"),init=!0;if(_.modified("pattern")||!this._match)this._match=new RegExp(_.pattern||"[\\w']+","g"),init=!0;if(_.modified("field")||pulse.modified(_.field.fields))init=!0;init&&(this._counts={});return init};prototype._finish=function(pulse,as){var counts=this._counts,tuples=this._tuples||(this._tuples={}),text=as[0],count=as[1];pulse=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS);var w;for(w in counts){var t=tuples[w];var c=counts[w]||0;!t&&c?(tuples[w]=t=vegaDataflow.ingest({}),
t[text]=w,t[count]=c,pulse.add.push(t)):0===c?(t&&pulse.rem.push(t),counts[w]=null,tuples[w]=null):t[count]!==c&&(t[count]=c,pulse.mod.push(t))}return pulse.modifies(as)};Cross.Definition={type:"Cross",metadata:{generates:!0},params:[{name:"filter",type:"expr"},{name:"as",type:"string",array:!0,length:2,"default":["a","b"]}]};vegaUtil.inherits(Cross,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.NO_SOURCE),data=this.value,as=_.as||["a","b"],a=as[0],b=as[1];if(!data||
pulse.changed(pulse.ADD_REM)||_.modified("as")||_.modified("filter")){data&&(out.rem=data);pulse=data=pulse.materialize(pulse.SOURCE).source;_=_.filter||vegaUtil.truthy;data=[];for(var t={},n=pulse.length,i=0,j,left;i<n;++i)for(t[a]=left=pulse[i],j=0;j<n;++j)t[b]=pulse[j],_(t)&&(data.push(vegaDataflow.ingest(t)),t={},t[a]=left);out.add=this.value=data}else out.mod=data;out.source=this.value;return out.modifies(as)};var Distributions={kde:vegaStatistics.randomKDE,mixture:vegaStatistics.randomMixture,
normal:vegaStatistics.randomNormal,lognormal:vegaStatistics.randomLogNormal,uniform:vegaStatistics.randomUniform};prototype=[{key:{"function":"normal"},params:[{name:"mean",type:"number","default":0},{name:"stdev",type:"number","default":1}]},{key:{"function":"lognormal"},params:[{name:"mean",type:"number","default":0},{name:"stdev",type:"number","default":1}]},{key:{"function":"uniform"},params:[{name:"min",type:"number","default":0},{name:"max",type:"number","default":1}]},{key:{"function":"kde"},
params:[{name:"field",type:"field",required:!0},{name:"from",type:"data"},{name:"bandwidth",type:"number","default":0}]}];Density.Definition={type:"Density",metadata:{generates:!0},params:[{name:"extent",type:"number",array:!0,length:2},{name:"steps",type:"number"},{name:"minsteps",type:"number","default":25},{name:"maxsteps",type:"number","default":200},{name:"method",type:"string","default":"pdf",values:["pdf","cdf"]},{name:"distribution",type:"param",params:prototype.concat({key:{"function":"mixture"},
params:[{name:"distributions",type:"param",array:!0,params:prototype},{name:"weights",type:"number",array:!0}]})},{name:"as",type:"string",array:!0,"default":["value","density"]}]};vegaUtil.inherits(Density,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS);if(!this.value||pulse.changed()||_.modified()){var dist=parse(_.distribution,source$jscomp$0(pulse));pulse=_.steps||_.minsteps||25;var maxsteps=_.steps||_.maxsteps||200,method=_.method||"pdf";
"pdf"!==method&&"cdf"!==method&&vegaUtil.error("Invalid density method: "+method);_.extent||dist.data||vegaUtil.error("Missing density extent parameter.");method=dist[method];var as=_.as||["value","density"];_=_.extent||vegaUtil.extent(dist.data());_=vegaStatistics.sampleCurve(method,_,pulse,maxsteps).map(function(v){var tuple={};tuple[as[0]]=v[0];tuple[as[1]]=v[1];return vegaDataflow.ingest(tuple)});this.value&&(out.rem=this.value);this.value=out.add=out.source=_}return out};DotBin.Definition={type:"DotBin",
metadata:{modifies:!0},params:[{name:"field",type:"field",required:!0},{name:"groupby",type:"field",array:!0},{name:"step",type:"number"},{name:"smooth",type:"boolean","default":!1},{name:"as",type:"string","default":"bin"}]};vegaUtil.inherits(DotBin,vegaDataflow.Transform).transform=function(_,pulse){if(this.value&&!_.modified()&&!pulse.changed())return pulse;var source=pulse.materialize(pulse.SOURCE).source,groups=partition(pulse.source,_.groupby,vegaUtil.identity),smooth=_.smooth||!1,field=_.field;
source=_.step||vegaUtil.span(vegaUtil.extent(source,field))/30;var sort=vegaDataflow.stableCompare(function(a,b){return field(a)-field(b)});_=_.as||"bin";for(var n=groups.length,min=Infinity,max=-Infinity,i=0,j;i<n;++i){var g=groups[i].sort(sort);j=-1;for(var $jscomp$iter$72=$jscomp.makeIterator(vegaStatistics.dotbin(g,source,smooth,field)),$jscomp$key$v=$jscomp$iter$72.next();!$jscomp$key$v.done;$jscomp$key$v=$jscomp$iter$72.next())$jscomp$key$v=$jscomp$key$v.value,$jscomp$key$v<min&&(min=$jscomp$key$v),
$jscomp$key$v>max&&(max=$jscomp$key$v),g[++j][_]=$jscomp$key$v}this.value={start:min,stop:max,step:source};return pulse.reflow(!0).modifies(_)};vegaUtil.inherits(Expression,vegaDataflow.Operator);Extent.Definition={type:"Extent",metadata:{},params:[{name:"field",type:"field",required:!0}]};vegaUtil.inherits(Extent,vegaDataflow.Transform).transform=function(_,pulse){var extent=this.value,field=_.field,min=extent[0],max=extent[1];if((_=pulse.changed()||pulse.modified(field.fields)||_.modified("field"))||
null==min)min=Infinity,max=-Infinity;pulse.visit(_?pulse.SOURCE:pulse.ADD,function(t){t=field(t);null!=t&&(t=+t,t<min&&(min=t),t>max&&(max=t))});Number.isFinite(min)&&Number.isFinite(max)||((_=vegaUtil.accessorName(field))&&(_=' for field "'+_+'"'),pulse.dataflow.warn("Infinite extent"+_+": ["+min+", "+max+"]"),min=max=void 0);this.value=[min,max]};prototype=vegaUtil.inherits(Subflow,vegaDataflow.Operator);prototype.connect=function(target){this.targets().add(target);return target.source=this};prototype.add=
function(t){this.value.add.push(t)};prototype.rem=function(t){this.value.rem.push(t)};prototype.mod=function(t){this.value.mod.push(t)};prototype.init=function(pulse){this.value.init(pulse,pulse.NO_SOURCE)};prototype.evaluate=function(){return this.value};prototype=vegaUtil.inherits(Facet,vegaDataflow.Transform);prototype.activate=function(flow){this._targets[this._targets.active++]=flow};prototype.subflow=function(key,flow,pulse,parent){var flows=this.value,sf=vegaUtil.hasOwnProperty(flows,key)&&
flows[key];if(sf)sf.value.stamp<pulse.stamp&&(sf.init(pulse),this.activate(sf));else{var p=parent||(p=this._group[key])&&p.tuple;parent=pulse.dataflow;sf=parent.add(new Subflow(pulse.fork(pulse.NO_SOURCE),this)).connect(flow(parent,key,p));flows[key]=sf;this.activate(sf)}return sf};prototype.transform=function(_,pulse){function subflow(key){return self.subflow(key,flow,pulse)}var df=pulse.dataflow,self=this,key$jscomp$0=_.key,flow=_.subflow,cache=this._keys,rekey=_.modified("key");this._group=_.group||
{};this._targets.active=0;pulse.visit(pulse.REM,function(t){var id=vegaDataflow.tupleid(t),k=cache.get(id);void 0!==k&&(cache.delete(id),subflow(k).rem(t))});pulse.visit(pulse.ADD,function(t){var k=key$jscomp$0(t);cache.set(vegaDataflow.tupleid(t),k);subflow(k).add(t)});rekey||pulse.modified(key$jscomp$0.fields)?pulse.visit(pulse.MOD,function(t){var id=vegaDataflow.tupleid(t),k0=cache.get(id),k1=key$jscomp$0(t);k0===k1?subflow(k1).mod(t):(cache.set(id,k1),subflow(k0).rem(t),subflow(k1).add(t))}):
pulse.changed(pulse.MOD)&&pulse.visit(pulse.MOD,function(t){subflow(cache.get(vegaDataflow.tupleid(t))).mod(t)});rekey&&pulse.visit(pulse.REFLOW,function(t){var id=vegaDataflow.tupleid(t),k0=cache.get(id),k1=key$jscomp$0(t);k0!==k1&&(cache.set(id,k1),subflow(k0).rem(t),subflow(k1).add(t))});cache.empty>df.cleanThreshold&&df.runAfter(cache.clean);return pulse};vegaUtil.inherits(Field,vegaDataflow.Operator);Filter.Definition={type:"Filter",metadata:{changes:!0},params:[{name:"expr",type:"expr",required:!0}]};
vegaUtil.inherits(Filter,vegaDataflow.Transform).transform=function(_,pulse){function revisit(t){var id=vegaDataflow.tupleid(t),b=test(t,_),s=cache.get(id);b&&s?(cache.delete(id),add.push(t)):b||s?isMod&&b&&!s&&mod.push(t):(cache.set(id,1),rem.push(t))}var df=pulse.dataflow,cache=this.value,output=pulse.fork(),add=output.add,rem=output.rem,mod=output.mod,test=_.expr,isMod=!0;pulse.visit(pulse.REM,function(t){var id=vegaDataflow.tupleid(t);cache.has(id)?cache.delete(id):rem.push(t)});pulse.visit(pulse.ADD,
function(t){test(t,_)?add.push(t):cache.set(vegaDataflow.tupleid(t),1)});pulse.visit(pulse.MOD,revisit);_.modified()&&(isMod=!1,pulse.visit(pulse.REFLOW,revisit));cache.empty>df.cleanThreshold&&df.runAfter(cache.clean);return output};Flatten.Definition={type:"Flatten",metadata:{generates:!0},params:[{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0}]};vegaUtil.inherits(Flatten,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.NO_SOURCE),
fields=_.fields,as=fieldNames(fields,_.as||[]),m=as.length;out.rem=this.value;pulse.visit(pulse.SOURCE,function(t){for(var arrays=fields.map(function(f){return f(t)}),maxlen=arrays.reduce(function(l,a){return Math.max(l,a.length)},0),i=0,j,d,v;i<maxlen;++i){d=vegaDataflow.derive(t);for(j=0;j<m;++j)d[as[j]]=null==(v=arrays[j][i])?null:v;out.add.push(d)}});this.value=out.source=out.add;return out.modifies(as)};Fold.Definition={type:"Fold",metadata:{generates:!0},params:[{name:"fields",type:"field",
array:!0,required:!0},{name:"as",type:"string",array:!0,length:2,"default":["key","value"]}]};vegaUtil.inherits(Fold,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.NO_SOURCE),fields=_.fields,fnames=fields.map(vegaUtil.accessorName);_=_.as||["key","value"];var k=_[0],v=_[1],n=fields.length;out.rem=this.value;pulse.visit(pulse.SOURCE,function(t){for(var i=0,d;i<n;++i)d=vegaDataflow.derive(t),d[k]=fnames[i],d[v]=fields[i](t),out.add.push(d)});this.value=out.source=out.add;
return out.modifies(_)};Formula.Definition={type:"Formula",metadata:{modifies:!0},params:[{name:"expr",type:"expr",required:!0},{name:"as",type:"string",required:!0},{name:"initonly",type:"boolean"}]};vegaUtil.inherits(Formula,vegaDataflow.Transform).transform=function(_,pulse){var func=_.expr,as=_.as,mod=_.modified(),flag=_.initonly?pulse.ADD:mod?pulse.SOURCE:pulse.modified(func.fields)||pulse.modified(as)?pulse.ADD_MOD:pulse.ADD;mod&&(pulse=pulse.materialize().reflow(!0));_.initonly||pulse.modifies(as);
return pulse.visit(flag,function(t){return t[as]=func(t,_)})};vegaUtil.inherits(Generate,vegaDataflow.Transform).transform=function(_,pulse){var data=this.value;pulse=pulse.fork(pulse.ALL);var num=_.size-data.length,gen=_.generator,add,t;if(0<num){for(add=[];0<=--num;)add.push(t=vegaDataflow.ingest(gen(_))),data.push(t);pulse.add=pulse.add.length?pulse.materialize(pulse.ADD).add.concat(add):add}else _=data.slice(0,-num),pulse.rem=pulse.rem.length?pulse.materialize(pulse.REM).rem.concat(_):_,data=
data.slice(-num);pulse.source=this.value=data;return pulse};var Methods={value:"value",median:d3Array.median,mean:d3Array.mean,min:d3Array.min,max:d3Array.max},Empty=[];Impute.Definition={type:"Impute",metadata:{changes:!0},params:[{name:"field",type:"field",required:!0},{name:"key",type:"field",required:!0},{name:"keyvals",array:!0},{name:"groupby",type:"field",array:!0},{name:"method",type:"enum","default":"value",values:["value","mean","median","max","min"]},{name:"value","default":0}]};vegaUtil.inherits(Impute,
vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.ALL),impute=getValue(_),field=getField(_),fName=vegaUtil.accessorName(_.field),kName=vegaUtil.accessorName(_.key),gNames=(_.groupby||[]).map(vegaUtil.accessorName);_=partition$1(pulse.source,_.groupby,_.key,_.keyvals);pulse=[];var prev=this.value,m=_.domain.length,j,l,n;var g=0;for(l=_.length;g<l;++g){var group=_[g];var gVals=group.values;var value=NaN;for(j=0;j<m;++j)if(null==group[j]){var kVal=_.domain[j];var t={_impute:!0};
var i=0;for(n=gVals.length;i<n;++i)t[gNames[i]]=gVals[i];t[kName]=kVal;t[fName]=Number.isNaN(value)?value=impute(group,field):value;pulse.push(vegaDataflow.ingest(t))}}pulse.length&&(out.add=out.materialize(out.ADD).add.concat(pulse));prev.length&&(out.rem=out.materialize(out.REM).rem.concat(prev));this.value=pulse;return out};JoinAggregate.Definition={type:"JoinAggregate",metadata:{modifies:!0},params:[{name:"groupby",type:"field",array:!0},{name:"fields",type:"field","null":!0,array:!0},{name:"ops",
type:"enum",array:!0,values:ValidAggregateOps},{name:"as",type:"string","null":!0,array:!0},{name:"key",type:"field"}]};prototype=vegaUtil.inherits(JoinAggregate,Aggregate);prototype.transform=function(_,pulse){var aggr=this,mod=_.modified();if(aggr.value&&(mod||pulse.modified(aggr._inputs,!0))){var cells=aggr.value=mod?aggr.init(_):{};pulse.visit(pulse.SOURCE,function(t){aggr.add(t)})}else cells=aggr.value=aggr.value||this.init(_),pulse.visit(pulse.REM,function(t){aggr.rem(t)}),pulse.visit(pulse.ADD,
function(t){aggr.add(t)});aggr.changes();pulse.visit(pulse.SOURCE,function(t){vegaUtil.extend(t,cells[aggr.cellkey(t)].tuple)});return pulse.reflow(mod).modifies(this._outputs)};prototype.changes=function(){var adds=this._adds,mods=this._mods,n;var i=0;for(n=this._alen;i<n;++i)this.celltuple(adds[i]),adds[i]=null;i=0;for(n=this._mlen;i<n;++i)this.celltuple(mods[i]),mods[i]=null;this._alen=this._mlen=0};KDE.Definition={type:"KDE",metadata:{generates:!0},params:[{name:"groupby",type:"field",array:!0},
{name:"field",type:"field",required:!0},{name:"cumulative",type:"boolean","default":!1},{name:"counts",type:"boolean","default":!1},{name:"bandwidth",type:"number","default":0},{name:"extent",type:"number",array:!0,length:2},{name:"resolve",type:"enum",values:["shared","independent"],"default":"independent"},{name:"steps",type:"number"},{name:"minsteps",type:"number","default":25},{name:"maxsteps",type:"number","default":200},{name:"as",type:"string",array:!0,"default":["value","density"]}]};vegaUtil.inherits(KDE,
vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS);if(!this.value||pulse.changed()||_.modified()){pulse=pulse.materialize(pulse.SOURCE).source;var groups=partition(pulse,_.groupby,_.field),names=(_.groupby||[]).map(vegaUtil.accessorName),bandwidth=_.bandwidth,method=_.cumulative?"cdf":"pdf",as=_.as||["value","density"],values=[],domain=_.extent,minsteps=_.steps||_.minsteps||25,maxsteps=_.steps||_.maxsteps||200;"pdf"!==method&&"cdf"!==method&&vegaUtil.error("Invalid density method: "+
method);"shared"===_.resolve&&(domain||(domain=vegaUtil.extent(pulse,_.field)),minsteps=maxsteps=_.steps||maxsteps);groups.forEach(function(g){var density=vegaStatistics.randomKDE(g,bandwidth)[method],scale=_.counts?g.length:1,local=domain||vegaUtil.extent(g);vegaStatistics.sampleCurve(density,local,minsteps,maxsteps).forEach(function(v){for(var t={},i=0;i<names.length;++i)t[names[i]]=g.dims[i];t[as[0]]=v[0];t[as[1]]=v[1]*scale;values.push(vegaDataflow.ingest(t))})});this.value&&(out.rem=this.value);
this.value=out.add=out.source=values}return out};vegaUtil.inherits(Key,vegaDataflow.Operator);vegaUtil.inherits(Load,vegaDataflow.Transform).transform=function(_,pulse){var $jscomp$this=this,df=pulse.dataflow;return _.values?output$jscomp$0(this,pulse,df.parse(_.values,_.format)):df.request(_.url,_.format).then(function(res){return output$jscomp$0($jscomp$this,pulse,vegaUtil.array(res.data))})};Lookup.Definition={type:"Lookup",metadata:{modifies:!0},params:[{name:"index",type:"index",params:[{name:"from",
type:"data",required:!0},{name:"key",type:"field",required:!0}]},{name:"values",type:"field",array:!0},{name:"fields",type:"field",array:!0,required:!0},{name:"as",type:"string",array:!0},{name:"default","default":null}]};vegaUtil.inherits(Lookup,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse,as=_.as,keys=_.fields,index=_.index,values=_.values,defaultValue=null==_.default?null:_.default,reset=_.modified();_=reset?pulse.SOURCE:pulse.ADD;var n=keys.length;if(values){var m=values.length;
1<n&&!as&&vegaUtil.error('Multi-field lookup requires explicit "as" parameter.');as&&as.length!==n*m&&vegaUtil.error('The "as" parameter has too few output field names.');as=as||values.map(vegaUtil.accessorName);var set=function(t){for(var i=0,k=0,j,v;i<n;++i)if(v=index.get(keys[i](t)),null==v)for(j=0;j<m;++j,++k)t[as[k]]=defaultValue;else for(j=0;j<m;++j,++k)t[as[k]]=values[j](v)}}else as||vegaUtil.error("Missing output field names."),set=function(t){for(var i=0,v;i<n;++i)v=index.get(keys[i](t)),
t[as[i]]=null==v?defaultValue:v};reset?out=pulse.reflow(!0):(reset=keys.some(function(k){return pulse.modified(k.fields)}),_|=reset?pulse.MOD:0);pulse.visit(_,set);return out.modifies(as)};vegaUtil.inherits(MultiExtent,vegaDataflow.Operator);vegaUtil.inherits(MultiValues,vegaDataflow.Operator);vegaUtil.inherits(Params,vegaDataflow.Transform);Params.prototype.transform=function(_,pulse){this.modified(_.modified());this.value=_;return pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS)};Pivot.Definition={type:"Pivot",
metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"value",type:"field",required:!0},{name:"op",type:"enum",values:ValidAggregateOps,"default":"sum"},{name:"limit",type:"number","default":0},{name:"key",type:"field"}]};prototype=vegaUtil.inherits(Pivot,Aggregate);prototype._transform=prototype.transform;prototype.transform=function(_,pulse){return this._transform(aggregateParams(_,pulse),pulse)};vegaUtil.inherits(PreFacet,
Facet).transform=function(_$jscomp$0,pulse){var self=this,flow=_$jscomp$0.subflow,field=_$jscomp$0.field;(_$jscomp$0.modified("field")||field&&pulse.modified(vegaUtil.accessorFields(field)))&&vegaUtil.error("PreFacet does not support field modification.");this._targets.active=0;pulse.visit(pulse.MOD,function(t){var sf=self.subflow(vegaDataflow.tupleid(t),flow,pulse,t);field?field(t).forEach(function(_){sf.mod(_)}):sf.mod(t)});pulse.visit(pulse.ADD,function(t){var sf=self.subflow(vegaDataflow.tupleid(t),
flow,pulse,t);field?field(t).forEach(function(_){sf.add(vegaDataflow.ingest(_))}):sf.add(t)});pulse.visit(pulse.REM,function(t){var sf=self.subflow(vegaDataflow.tupleid(t),flow,pulse,t);field?field(t).forEach(function(_){sf.rem(_)}):sf.rem(t)});return pulse};Project.Definition={type:"Project",metadata:{generates:!0,changes:!0},params:[{name:"fields",type:"field",array:!0},{name:"as",type:"string","null":!0,array:!0}]};vegaUtil.inherits(Project,vegaDataflow.Transform).transform=function(_,pulse){var fields=
_.fields,as=fieldNames(_.fields,_.as||[]),derive=fields?function(s,t){for(var i=0,n=fields.length;i<n;++i)t[as[i]]=fields[i](s);return t}:vegaDataflow.rederive;if(this.value)var lut=this.value;else pulse=pulse.addAll(),lut=this.value={};var out=pulse.fork(pulse.NO_SOURCE);pulse.visit(pulse.REM,function(t){t=vegaDataflow.tupleid(t);out.rem.push(lut[t]);lut[t]=null});pulse.visit(pulse.ADD,function(t){var dt=derive(t,vegaDataflow.ingest({}));lut[vegaDataflow.tupleid(t)]=dt;out.add.push(dt)});pulse.visit(pulse.MOD,
function(t){out.mod.push(derive(t,lut[vegaDataflow.tupleid(t)]))});return out};vegaUtil.inherits(Proxy,vegaDataflow.Transform).transform=function(_,pulse){this.value=_.value;return _.modified("value")?pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS):pulse.StopPropagation};Quantile.Definition={type:"Quantile",metadata:{generates:!0,changes:!0},params:[{name:"groupby",type:"field",array:!0},{name:"field",type:"field",required:!0},{name:"probs",type:"number",array:!0},{name:"step",type:"number","default":.01},
{name:"as",type:"string",array:!0,"default":["prob","value"]}]};vegaUtil.inherits(Quantile,vegaDataflow.Transform).transform=function(_,pulse){var out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS),as=_.as||["prob","value"];if(this.value&&!_.modified()&&!pulse.changed())return out.source=this.value,out;pulse=pulse.materialize(pulse.SOURCE).source;pulse=partition(pulse,_.groupby,_.field);var names=(_.groupby||[]).map(vegaUtil.accessorName),values=[],step=_.step||.01,p=_.probs||d3Array.range(step/2,1-
1E-14,step),n=p.length;pulse.forEach(function(g){for(var q=vegaStatistics.quantiles(g,p),i=0;i<n;++i){for(var t={},i$282=0;i$282<names.length;++i$282)t[names[i$282]]=g.dims[i$282];t[as[0]]=p[i];t[as[1]]=q[i];values.push(vegaDataflow.ingest(t))}});this.value&&(out.rem=this.value);this.value=out.add=out.source=values;return out};vegaUtil.inherits(Relay,vegaDataflow.Transform).transform=function(_,pulse){if(this.value)var lut=this.value;else{var out=pulse=pulse.addAll();lut=this.value={}}_.derive&&(out=
pulse.fork(pulse.NO_SOURCE),pulse.visit(pulse.REM,function(t){t=vegaDataflow.tupleid(t);out.rem.push(lut[t]);lut[t]=null}),pulse.visit(pulse.ADD,function(t){var dt=vegaDataflow.derive(t);lut[vegaDataflow.tupleid(t)]=dt;out.add.push(dt)}),pulse.visit(pulse.MOD,function(t){var dt=lut[vegaDataflow.tupleid(t)],k;for(k in t)dt[k]=t[k],out.modifies(k);out.mod.push(dt)}));return out};Sample.Definition={type:"Sample",metadata:{},params:[{name:"size",type:"number","default":1E3}]};vegaUtil.inherits(Sample,
vegaDataflow.Transform).transform=function(_,pulse){function update(t){if(res.length<num)res.push(t);else{var idx=~~((cnt+1)*vegaStatistics.random());if(idx<res.length&&idx>=cap){var p=res[idx];map[vegaDataflow.tupleid(p)]&&out.rem.push(p);res[idx]=t}}++cnt}var out=pulse.fork(pulse.NO_SOURCE),mod=_.modified("size"),num=_.size,res=this.value,cnt=this.count,cap=0,map=res.reduce(function(m,t){m[vegaDataflow.tupleid(t)]=1;return m},{});pulse.rem.length&&(pulse.visit(pulse.REM,function(t){var id=vegaDataflow.tupleid(t);
map[id]&&(map[id]=-1,out.rem.push(t));--cnt}),res=res.filter(function(t){return-1!==map[vegaDataflow.tupleid(t)]}));(pulse.rem.length||mod)&&res.length<num&&pulse.source&&(cap=cnt=res.length,pulse.visit(pulse.SOURCE,function(t){map[vegaDataflow.tupleid(t)]||update(t)}),cap=-1);if(mod&&res.length>num){_=0;for(mod=res.length-num;_<mod;++_)map[vegaDataflow.tupleid(res[_])]=-1,out.rem.push(res[_]);res=res.slice(mod)}pulse.mod.length&&pulse.visit(pulse.MOD,function(t){map[vegaDataflow.tupleid(t)]&&out.mod.push(t)});
pulse.add.length&&pulse.visit(pulse.ADD,update);if(pulse.add.length||0>cap)out.add=res.filter(function(t){return!map[vegaDataflow.tupleid(t)]});this.count=cnt;this.value=out.source=res;return out};Sequence.Definition={type:"Sequence",metadata:{generates:!0,changes:!0},params:[{name:"start",type:"number",required:!0},{name:"stop",type:"number",required:!0},{name:"step",type:"number","default":1},{name:"as",type:"string","default":"data"}]};vegaUtil.inherits(Sequence,vegaDataflow.Transform).transform=
function(_,pulse){if(!this.value||_.modified()){var out=pulse.materialize().fork(pulse.MOD),as=_.as||"data";out.rem=this.value?pulse.rem.concat(this.value):pulse.rem;this.value=d3Array.range(_.start,_.stop,_.step||1).map(function(v){var t={};t[as]=v;return vegaDataflow.ingest(t)});out.add=pulse.add.concat(this.value);return out}};vegaUtil.inherits(Sieve,vegaDataflow.Transform).transform=function(_,pulse){this.value=pulse.source;return pulse.changed()?pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS):pulse.StopPropagation};
vegaUtil.inherits(TupleIndex,vegaDataflow.Transform).transform=function(_,pulse){function set(t){index.set(field(t),t)}var df=pulse.dataflow,field=_.field,index=this.value,mod=!0;_.modified("field")||pulse.modified(field.fields)?(index.clear(),pulse.visit(pulse.SOURCE,set)):pulse.changed()?(pulse.visit(pulse.REM,function(t){index.delete(field(t))}),pulse.visit(pulse.ADD,set)):mod=!1;this.modified(mod);index.empty>df.cleanThreshold&&df.runAfter(index.clean);return pulse.fork()};vegaUtil.inherits(Values,
vegaDataflow.Transform).transform=function(_,pulse){if(!this.value||_.modified("field")||_.modified("sort")||pulse.changed()||_.sort&&pulse.modified(_.sort.fields))this.value=(_.sort?pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort)):pulse.source).map(_.field)};var WindowOps={row_number:function(){return{next:function(w){return w.index+1}}},rank:function(){var rank;return{init:function(){return rank=1},next:function(w){var i=w.index,data=w.data;return i&&w.compare(data[i-1],data[i])?rank=
i+1:rank}}},dense_rank:function(){var drank;return{init:function(){return drank=1},next:function(w){var i=w.index,d=w.data;return i&&w.compare(d[i-1],d[i])?++drank:drank}}},percent_rank:function(){var rank=WindowOps.rank(),next=rank.next;return{init:rank.init,next:function(w){return(next(w)-1)/(w.data.length-1)}}},cume_dist:function(){var cume;return{init:function(){return cume=0},next:function(w){var i=w.index,d=w.data;w=w.compare;if(cume<i){for(;i+1<d.length&&!w(d[i],d[i+1]);)++i;cume=i}return(1+
cume)/d.length}}},ntile:function(field,num){num=+num;0<num||vegaUtil.error("ntile num must be greater than zero.");field=WindowOps.cume_dist();var next=field.next;return{init:field.init,next:function(w){return Math.ceil(num*next(w))}}},lag:function(field,offset){offset=+offset||1;return{next:function(w){var i=w.index-offset;return 0<=i?field(w.data[i]):null}}},lead:function(field,offset){offset=+offset||1;return{next:function(w){var i=w.index+offset;w=w.data;return i<w.length?field(w[i]):null}}},
first_value:function(field){return{next:function(w){return field(w.data[w.i0])}}},last_value:function(field){return{next:function(w){return field(w.data[w.i1-1])}}},nth_value:function(field,nth){nth=+nth;0<nth||vegaUtil.error("nth_value nth must be greater than zero.");return{next:function(w){var i=w.i0+(nth-1);return i<w.i1?field(w.data[i]):null}}},prev_value:function(field){var prev=null;return{next:function(w){w=field(w.data[w.index]);return null!=w?prev=w:prev}}},next_value:function(field){var v=
null,i=-1;return{next:function(w){var d=w.data;if(w.index<=i)d=v;else{a:{w=w.index;for(var n=d.length;w<n;++w)if(null!=field(d[w]))break a;w=-1}d=0>(i=w)?(i=d.length,v=null):v=field(d[i])}return d}}}};prototype=Object.keys(WindowOps);var prototype$w=WindowState.prototype;prototype$w.init=function(){this.windows.forEach(function(_){return _.init()});this.cell&&this.cell.init()};prototype$w.update=function(w,t){var cell=this.cell,wind=this.windows,data=w.data,m=wind&&wind.length,j;if(cell){for(j=w.p0;j<
w.i0;++j)cell.rem(data[j]);for(j=w.p1;j<w.i1;++j)cell.add(data[j]);cell.set(t)}for(j=0;j<m;++j)wind[j].update(w,t)};Window.Definition={type:"Window",metadata:{modifies:!0},params:[{name:"sort",type:"compare"},{name:"groupby",type:"field",array:!0},{name:"ops",type:"enum",array:!0,values:prototype.concat(ValidAggregateOps)},{name:"params",type:"number","null":!0,array:!0},{name:"fields",type:"field","null":!0,array:!0},{name:"as",type:"string","null":!0,array:!0},{name:"frame",type:"number","null":!0,
array:!0,length:2,"default":[null,0]},{name:"ignorePeers",type:"boolean","default":!1}]};ValidAggregateOps=vegaUtil.inherits(Window,vegaDataflow.Transform);ValidAggregateOps.transform=function(_,pulse){var self=this,state=self.state,mod=_.modified(),cmp=vegaDataflow.stableCompare(_.sort),n;this.stamp=pulse.stamp;if(!state||mod)state=self.state=new WindowState(_);var key=groupkey(_.groupby);mod||pulse.modified(state.inputs)?(self.value={},pulse.visit(pulse.SOURCE,function(t){self.group(key(t)).add(t)})):
(pulse.visit(pulse.REM,function(t){self.group(key(t)).remove(t)}),pulse.visit(pulse.ADD,function(t){self.group(key(t)).add(t)}));var i=0;for(n=self._mlen;i<n;++i)processPartition(self._mods[i],state,cmp,_);self._mlen=0;self._mods=[];return pulse.reflow(mod).modifies(state.outputs)};ValidAggregateOps.group=function(key){var group=this.value[key];group||(group=this.value[key]=SortedList(vegaDataflow.tupleid),group.stamp=-1);group.stamp<this.stamp&&(group.stamp=this.stamp,this._mods[this._mlen++]=group);
return group};exports.aggregate=Aggregate;exports.bin=Bin;exports.collect=Collect;exports.compare=Compare;exports.countpattern=CountPattern;exports.cross=Cross;exports.density=Density;exports.dotbin=DotBin;exports.expression=Expression;exports.extent=Extent;exports.facet=Facet;exports.field=Field;exports.filter=Filter;exports.flatten=Flatten;exports.fold=Fold;exports.formula=Formula;exports.generate=Generate;exports.impute=Impute;exports.joinaggregate=JoinAggregate;exports.kde=KDE;exports.key=Key;
exports.load=Load;exports.lookup=Lookup;exports.multiextent=MultiExtent;exports.multivalues=MultiValues;exports.params=Params;exports.pivot=Pivot;exports.prefacet=PreFacet;exports.project=Project;exports.proxy=Proxy;exports.quantile=Quantile;exports.relay=Relay;exports.sample=Sample;exports.sequence=Sequence;exports.sieve=Sieve;exports.subflow=Subflow;exports.tupleindex=TupleIndex;exports.values=Values;exports.window=Window;Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$vega_transforms$build$vega_transforms.js.map
