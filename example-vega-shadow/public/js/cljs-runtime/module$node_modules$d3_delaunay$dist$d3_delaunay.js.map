{
"version":3,
"file":"module$node_modules$d3_delaunay$dist$d3_delaunay.js",
"lineCount":56,
"mappings":"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",
"sources":["node_modules/d3-delaunay/dist/d3-delaunay.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_delaunay$dist$d3_delaunay\"] = function(global,process,require,module,exports,shadow$shims) {\n// https://github.com/d3/d3-delaunay v5.1.6 Copyright 2019 Mike Bostock\n// https://github.com/mapbox/delaunator v4.0.1. Copyright 2019 Mapbox, Inc.\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}));\n}(this, function (exports) { 'use strict';\n\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nclass Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n}\n\n// a more robust orientation test that's stable in a given triangle (to fix robustness issues)\nfunction orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n    orientIfSure(rx, ry, qx, qy, px, py) ||\n    orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n\nconst epsilon = 1e-6;\n\nclass Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n\nclass Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n\nclass Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      }\n      else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n\nconst tau = 2 * Math.PI;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nclass Delaunay {\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.sqrt((bounds[3] - bounds[1])**2 + (bounds[2] - bounds[0])**2);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles} = this;\n\n    // degenerate case with several collinear points\n    if (this.collinear) {\n      const l = this.collinear.indexOf(i);\n      if (l > 0) yield this.collinear[l - 1];\n      if (l < this.collinear.length - 1) yield this.collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = (x - points[i * 2]) ** 2 + (y - points[i * 2 + 1]) ** 2;\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = (x - points[t * 2]) ** 2 + (y - points[t * 2 + 1]) ** 2;\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if ((x - points[e * 2]) ** 2 + (y - points[e * 2 + 1]) ** 2 < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nDelaunay.from = function(points, fx = pointX, fy = pointY, that) {\n  return new Delaunay(\"length\" in points\n      ? flatArray(points, fx, fy, that)\n      : Float64Array.from(flatIterable(points, fx, fy, that)));\n};\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n\nexports.Delaunay = Delaunay;\nexports.Voronoi = Voronoi;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","d3","pseudoAngle","dx","dy","p","Math","abs","dist","ax","ay","bx","by","orientIfSure","px","py","rx","ry","qx","qy","l","r","orient","quicksort","ids","dists","left","right","i","temp","tempDist","j","swap","arr","tmp","defaultGetX","defaultGetY","pointX","pointY","collinear","d","triangles","coords","length","a","b","c","jitter","x","y","sin","cos","flatIterable","points","fx","fy","that","call","EPSILON","pow","EDGE_STACK","Uint32Array","Delaunator","constructor","n","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","Float64Array","update","from","getX","getY","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","cx","cy","minDist","i0","i0x","i0y","i1","i1x","i1y","minRadius","ex","ey","bl","cl","i2","i2x","i2y","hull","d0","id","subarray","halfedges","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","k","yp","xp","start","key","e","q","t","_legalize","floor","ar","a0","b0","p0","pr","pl","p1","bp","cp","hbl","_link","br","Path","_x0","_y0","_x1","_y1","_","moveTo","closePath","lineTo","arc","x0","y0","epsilon","rect","w","h","value","Polygon","push","slice","Voronoi","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","t1","t2","t3","x1","y1","x3","y3","x2","y2","ab","render","context","buffer","undefined","inedges","ti","tj","_renderSegment","xi","yi","xj","yj","h1","h0","_project","v","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","polygon","c0","_regioncode","c1","S","_clipSegment","contains","_step","_cell","e0","V","_clipInfinite","_clipFinite","P","e1","sx1","sy1","sx0","sy0","_edgecode","_edge","vx0","vy0","vxn","vyn","Array","unshift","splice","vx","vy","tau","PI","Delaunay","_delaunator","_hullIndex","sort","f","bounds","hullIndex","voronoi","neighbors","indexOf","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","t0","trianglePolygons","trianglePolygon","Delaunay.from","array","Object","defineProperty"]
}
