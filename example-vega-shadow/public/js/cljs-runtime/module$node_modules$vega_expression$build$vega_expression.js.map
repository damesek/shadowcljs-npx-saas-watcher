{
"version":3,
"file":"module$node_modules$vega_expression$build$vega_expression.js",
"lineCount":54,
"mappings":"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",
"sources":["node_modules/vega-expression/build/vega-expression.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_expression$build$vega_expression\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util'], factory) :\n  (global = global || self, factory(global.vega = {}, global.vega));\n}(this, function (exports, vegaUtil) { 'use strict';\n\n  var RawCode = 'RawCode';\n  var Literal = 'Literal';\n  var Property = 'Property';\n  var Identifier = 'Identifier';\n\n  var ArrayExpression = 'ArrayExpression';\n  var BinaryExpression = 'BinaryExpression';\n  var CallExpression = 'CallExpression';\n  var ConditionalExpression = 'ConditionalExpression';\n  var LogicalExpression = 'LogicalExpression';\n  var MemberExpression = 'MemberExpression';\n  var ObjectExpression = 'ObjectExpression';\n  var UnaryExpression = 'UnaryExpression';\n\n  function ASTNode(type) {\n    this.type = type;\n  }\n\n  ASTNode.prototype.visit = function(visitor) {\n    var node = this, c, i, n;\n\n    if (visitor(node)) return 1;\n\n    for (c=children(node), i=0, n=c.length; i<n; ++i) {\n      if (c[i].visit(visitor)) return 1;\n    }\n  };\n\n  function children(node) {\n    switch (node.type) {\n      case ArrayExpression:\n        return node.elements;\n      case BinaryExpression:\n      case LogicalExpression:\n        return [node.left, node.right];\n      case CallExpression:\n        var args = node.arguments.slice();\n        args.unshift(node.callee);\n        return args;\n      case ConditionalExpression:\n        return [node.test, node.consequent, node.alternate];\n      case MemberExpression:\n        return [node.object, node.property];\n      case ObjectExpression:\n        return node.properties;\n      case Property:\n        return [node.key, node.value];\n      case UnaryExpression:\n        return [node.argument];\n      case Identifier:\n      case Literal:\n      case RawCode:\n      default:\n        return [];\n    }\n  }\n\n  /*\n    The following expression parser is based on Esprima (http://esprima.org/).\n    Original header comment and license for Esprima is included here:\n\n    Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n    Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n    Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n    Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n    Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n    Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n    Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n    Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n      * Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n    THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n\n  var TokenName,\n      source,\n      index,\n      length,\n      lookahead;\n\n  var TokenBooleanLiteral = 1,\n      TokenEOF = 2,\n      TokenIdentifier = 3,\n      TokenKeyword = 4,\n      TokenNullLiteral = 5,\n      TokenNumericLiteral = 6,\n      TokenPunctuator = 7,\n      TokenStringLiteral = 8,\n      TokenRegularExpression = 9;\n\n  TokenName = {};\n  TokenName[TokenBooleanLiteral] = 'Boolean';\n  TokenName[TokenEOF] = '<end>';\n  TokenName[TokenIdentifier] = 'Identifier';\n  TokenName[TokenKeyword] = 'Keyword';\n  TokenName[TokenNullLiteral] = 'Null';\n  TokenName[TokenNumericLiteral] = 'Numeric';\n  TokenName[TokenPunctuator] = 'Punctuator';\n  TokenName[TokenStringLiteral] = 'String';\n  TokenName[TokenRegularExpression] = 'RegularExpression';\n\n  var SyntaxArrayExpression = 'ArrayExpression',\n      SyntaxBinaryExpression = 'BinaryExpression',\n      SyntaxCallExpression = 'CallExpression',\n      SyntaxConditionalExpression = 'ConditionalExpression',\n      SyntaxIdentifier = 'Identifier',\n      SyntaxLiteral = 'Literal',\n      SyntaxLogicalExpression = 'LogicalExpression',\n      SyntaxMemberExpression = 'MemberExpression',\n      SyntaxObjectExpression = 'ObjectExpression',\n      SyntaxProperty = 'Property',\n      SyntaxUnaryExpression = 'UnaryExpression';\n\n  // Error messages should be identical to V8.\n  var MessageUnexpectedToken = 'Unexpected token %0',\n      MessageUnexpectedNumber = 'Unexpected number',\n      MessageUnexpectedString = 'Unexpected string',\n      MessageUnexpectedIdentifier = 'Unexpected identifier',\n      MessageUnexpectedReserved = 'Unexpected reserved word',\n      MessageUnexpectedEOS = 'Unexpected end of input',\n      MessageInvalidRegExp = 'Invalid regular expression',\n      MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n      MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n      MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n\n  var ILLEGAL = 'ILLEGAL',\n      DISABLED = 'Disabled.';\n\n  // See also tools/generate-unicode-regex.py.\n  var RegexNonAsciiIdentifierStart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n      // eslint-disable-next-line no-misleading-character-class\n      RegexNonAsciiIdentifierPart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\");\n\n  // Ensure the condition is true, otherwise throw an error.\n  // This is only to have a better contract semantic, i.e. another safety net\n  // to catch a logic error. The condition shall be fulfilled in normal case.\n  // Do NOT use this to enforce a certain condition on any user input.\n\n  function assert(condition, message) {\n    /* istanbul ignore next */\n    if (!condition) {\n      throw new Error('ASSERT: ' + message);\n    }\n  }\n\n  function isDecimalDigit(ch) {\n    return (ch >= 0x30 && ch <= 0x39); // 0..9\n  }\n\n  function isHexDigit(ch) {\n    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n  }\n\n  function isOctalDigit(ch) {\n    return '01234567'.indexOf(ch) >= 0;\n  }\n\n  // 7.2 White Space\n\n  function isWhiteSpace(ch) {\n    return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n      (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n  }\n\n  // 7.3 Line Terminators\n\n  function isLineTerminator(ch) {\n    return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n  }\n\n  // 7.6 Identifier Names and Identifiers\n\n  function isIdentifierStart(ch) {\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\n      (ch === 0x5C) || // \\ (backslash)\n      ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n  }\n\n  function isIdentifierPart(ch) {\n    return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n      (ch >= 0x41 && ch <= 0x5A) || // A..Z\n      (ch >= 0x61 && ch <= 0x7A) || // a..z\n      (ch >= 0x30 && ch <= 0x39) || // 0..9\n      (ch === 0x5C) || // \\ (backslash)\n      ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n  }\n\n  // 7.6.1.1 Keywords\n\n  var keywords = {\n    'if':1, 'in':1, 'do':1,\n    'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\n    'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\n    'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\n    'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\n    'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\n    'function':1, 'continue':1, 'debugger':1,\n    'interface':1, 'protected':1,\n    'instanceof':1, 'implements':1\n  };\n\n  function skipComment() {\n    var ch;\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n\n      if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n  }\n\n  function scanHexEscape(prefix) {\n    var i, len, ch, code = 0;\n\n    len = (prefix === 'u') ? 4 : 2;\n    for (i = 0; i < len; ++i) {\n      if (index < length && isHexDigit(source[index])) {\n        ch = source[index++];\n        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n    return String.fromCharCode(code);\n  }\n\n  function scanUnicodeCodePointEscape() {\n    var ch, code, cu1, cu2;\n\n    ch = source[index];\n    code = 0;\n\n    // At least, one hex digit is required.\n    if (ch === '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    while (index < length) {\n      ch = source[index++];\n      if (!isHexDigit(ch)) {\n        break;\n      }\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    }\n\n    if (code > 0x10FFFF || ch !== '}') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    // UTF-16 Encoding\n    if (code <= 0xFFFF) {\n      return String.fromCharCode(code);\n    }\n    cu1 = ((code - 0x10000) >> 10) + 0xD800;\n    cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n    return String.fromCharCode(cu1, cu2);\n  }\n\n  function getEscapedIdentifier() {\n    var ch, id;\n\n    ch = source.charCodeAt(index++);\n    id = String.fromCharCode(ch);\n\n    // '\\u' (U+005C, U+0075) denotes an escaped character.\n    if (ch === 0x5C) {\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      ++index;\n      ch = scanHexEscape('u');\n      if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      id = ch;\n    }\n\n    while (index < length) {\n      ch = source.charCodeAt(index);\n      if (!isIdentifierPart(ch)) {\n        break;\n      }\n      ++index;\n      id += String.fromCharCode(ch);\n\n      // '\\u' (U+005C, U+0075) denotes an escaped character.\n      if (ch === 0x5C) {\n        id = id.substr(0, id.length - 1);\n        if (source.charCodeAt(index) !== 0x75) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n        ++index;\n        ch = scanHexEscape('u');\n        if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n        id += ch;\n      }\n    }\n\n    return id;\n  }\n\n  function getIdentifier() {\n    var start, ch;\n\n    start = index++;\n    while (index < length) {\n      ch = source.charCodeAt(index);\n      if (ch === 0x5C) {\n        // Blackslash (U+005C) marks Unicode escape sequence.\n        index = start;\n        return getEscapedIdentifier();\n      }\n      if (isIdentifierPart(ch)) {\n        ++index;\n      } else {\n        break;\n      }\n    }\n\n    return source.slice(start, index);\n  }\n\n  function scanIdentifier() {\n    var start, id, type;\n\n    start = index;\n\n    // Backslash (U+005C) starts an escaped character.\n    id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n    // There is no keyword or literal with only one character.\n    // Thus, it must be an identifier.\n    if (id.length === 1) {\n      type = TokenIdentifier;\n    } else if (keywords.hasOwnProperty(id)) { // eslint-disable-line no-prototype-builtins\n      type = TokenKeyword;\n    } else if (id === 'null') {\n      type = TokenNullLiteral;\n    } else if (id === 'true' || id === 'false') {\n      type = TokenBooleanLiteral;\n    } else {\n      type = TokenIdentifier;\n    }\n\n    return {\n      type: type,\n      value: id,\n      start: start,\n      end: index\n    };\n  }\n\n  // 7.7 Punctuators\n\n  function scanPunctuator() {\n    var start = index,\n      code = source.charCodeAt(index),\n      code2,\n      ch1 = source[index],\n      ch2,\n      ch3,\n      ch4;\n\n    switch (code) {\n\n      // Check for most common single-character punctuators.\n      case 0x2E: // . dot\n      case 0x28: // ( open bracket\n      case 0x29: // ) close bracket\n      case 0x3B: // ; semicolon\n      case 0x2C: // , comma\n      case 0x7B: // { open curly brace\n      case 0x7D: // } close curly brace\n      case 0x5B: // [\n      case 0x5D: // ]\n      case 0x3A: // :\n      case 0x3F: // ?\n      case 0x7E: // ~\n        ++index;\n        return {\n          type: TokenPunctuator,\n          value: String.fromCharCode(code),\n          start: start,\n          end: index\n        };\n\n      default:\n        code2 = source.charCodeAt(index + 1);\n\n        // '=' (U+003D) marks an assignment or comparison operator.\n        if (code2 === 0x3D) {\n          switch (code) {\n            case 0x2B: // +\n            case 0x2D: // -\n            case 0x2F: // /\n            case 0x3C: // <\n            case 0x3E: // >\n            case 0x5E: // ^\n            case 0x7C: // |\n            case 0x25: // %\n            case 0x26: // &\n            case 0x2A: // *\n              index += 2;\n              return {\n                type: TokenPunctuator,\n                value: String.fromCharCode(code) + String.fromCharCode(code2),\n                start: start,\n                end: index\n              };\n\n            case 0x21: // !\n            case 0x3D: // =\n              index += 2;\n\n              // !== and ===\n              if (source.charCodeAt(index) === 0x3D) {\n                ++index;\n              }\n              return {\n                type: TokenPunctuator,\n                value: source.slice(start, index),\n                start: start,\n                end: index\n              };\n          }\n        }\n    }\n\n    // 4-character punctuator: >>>=\n\n    ch4 = source.substr(index, 4);\n\n    if (ch4 === '>>>=') {\n      index += 4;\n      return {\n        type: TokenPunctuator,\n        value: ch4,\n        start: start,\n        end: index\n      };\n    }\n\n    // 3-character punctuators: === !== >>> <<= >>=\n\n    ch3 = ch4.substr(0, 3);\n\n    if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n      index += 3;\n      return {\n        type: TokenPunctuator,\n        value: ch3,\n        start: start,\n        end: index\n      };\n    }\n\n    // Other 2-character punctuators: ++ -- << >> && ||\n    ch2 = ch3.substr(0, 2);\n\n    if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n      index += 2;\n      return {\n        type: TokenPunctuator,\n        value: ch2,\n        start: start,\n        end: index\n      };\n    }\n\n    // 1-character punctuators: < > = ! + - * % & | ^ /\n\n    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: ch1,\n        start: start,\n        end: index\n      };\n    }\n\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  // 7.8.3 Numeric Literals\n\n  function scanHexLiteral(start) {\n    var number = '';\n\n    while (index < length) {\n      if (!isHexDigit(source[index])) {\n        break;\n      }\n      number += source[index++];\n    }\n\n    if (number.length === 0) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt('0x' + number, 16),\n      start: start,\n      end: index\n    };\n  }\n\n  function scanOctalLiteral(start) {\n    var number = '0' + source[index++];\n    while (index < length) {\n      if (!isOctalDigit(source[index])) {\n        break;\n      }\n      number += source[index++];\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseInt(number, 8),\n      octal: true,\n      start: start,\n      end: index\n    };\n  }\n\n  function scanNumericLiteral() {\n    var number, start, ch;\n\n    ch = source[index];\n    assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n      'Numeric literal must start with a decimal digit or a decimal point');\n\n    start = index;\n    number = '';\n    if (ch !== '.') {\n      number = source[index++];\n      ch = source[index];\n\n      // Hex number starts with '0x'.\n      // Octal number starts with '0'.\n      if (number === '0') {\n        if (ch === 'x' || ch === 'X') {\n          ++index;\n          return scanHexLiteral(start);\n        }\n        if (isOctalDigit(ch)) {\n          return scanOctalLiteral(start);\n        }\n\n        // decimal number starts with '0' such as '09' is illegal.\n        if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n          throwError({}, MessageUnexpectedToken, ILLEGAL);\n        }\n      }\n\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n      ch = source[index];\n    }\n\n    if (ch === '.') {\n      number += source[index++];\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n      ch = source[index];\n    }\n\n    if (ch === 'e' || ch === 'E') {\n      number += source[index++];\n\n      ch = source[index];\n      if (ch === '+' || ch === '-') {\n        number += source[index++];\n      }\n      if (isDecimalDigit(source.charCodeAt(index))) {\n        while (isDecimalDigit(source.charCodeAt(index))) {\n          number += source[index++];\n        }\n      } else {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    if (isIdentifierStart(source.charCodeAt(index))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenNumericLiteral,\n      value: parseFloat(number),\n      start: start,\n      end: index\n    };\n  }\n\n  // 7.8.4 String Literals\n\n  function scanStringLiteral() {\n    var str = '',\n      quote, start, ch, code, octal = false;\n\n    quote = source[index];\n    assert((quote === '\\'' || quote === '\"'),\n      'String literal must starts with a quote');\n\n    start = index;\n    ++index;\n\n    while (index < length) {\n      ch = source[index++];\n\n      if (ch === quote) {\n        quote = '';\n        break;\n      } else if (ch === '\\\\') {\n        ch = source[index++];\n        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n          switch (ch) {\n            case 'u':\n            case 'x':\n              if (source[index] === '{') {\n                ++index;\n                str += scanUnicodeCodePointEscape();\n              } else {\n                str += scanHexEscape(ch);\n              }\n              break;\n            case 'n':\n              str += '\\n';\n              break;\n            case 'r':\n              str += '\\r';\n              break;\n            case 't':\n              str += '\\t';\n              break;\n            case 'b':\n              str += '\\b';\n              break;\n            case 'f':\n              str += '\\f';\n              break;\n            case 'v':\n              str += '\\x0B';\n              break;\n\n            default:\n              if (isOctalDigit(ch)) {\n                code = '01234567'.indexOf(ch);\n\n                // \\0 is not octal escape sequence\n                if (code !== 0) {\n                  octal = true;\n                }\n\n                if (index < length && isOctalDigit(source[index])) {\n                  octal = true;\n                  code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                  // 3 digits are only allowed when string starts\n                  // with 0, 1, 2, 3\n                  if ('0123'.indexOf(ch) >= 0 &&\n                    index < length &&\n                    isOctalDigit(source[index])) {\n                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                  }\n                }\n                str += String.fromCharCode(code);\n              } else {\n                str += ch;\n              }\n              break;\n          }\n        } else {\n          if (ch === '\\r' && source[index] === '\\n') {\n            ++index;\n          }\n        }\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        break;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (quote !== '') {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    return {\n      type: TokenStringLiteral,\n      value: str,\n      octal: octal,\n      start: start,\n      end: index\n    };\n  }\n\n  function testRegExp(pattern, flags) {\n    var tmp = pattern;\n\n    if (flags.indexOf('u') >= 0) {\n      // Replace each astral symbol and every Unicode code point\n      // escape sequence with a single ASCII symbol to avoid throwing on\n      // regular expressions that are only valid in combination with the\n      // `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it\n      // would be replaced by `[x-b]` which throws an error.\n      tmp = tmp\n        .replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function($0, $1) {\n          if (parseInt($1, 16) <= 0x10FFFF) {\n            return 'x';\n          }\n          throwError({}, MessageInvalidRegExp);\n        })\n        .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n    }\n\n    // First, detect invalid regular expressions.\n    try {\n      new RegExp(tmp);\n    } catch (e) {\n      throwError({}, MessageInvalidRegExp);\n    }\n\n    // Return a regular expression object for this pattern-flag pair, or\n    // `null` in case the current environment doesn't support the flags it\n    // uses.\n    try {\n      return new RegExp(pattern, flags);\n    } catch (exception) {\n      return null;\n    }\n  }\n\n  function scanRegExpBody() {\n    var ch, str, classMarker, terminated, body;\n\n    ch = source[index];\n    assert(ch === '/', 'Regular expression literal must start with a slash');\n    str = source[index++];\n\n    classMarker = false;\n    terminated = false;\n    while (index < length) {\n      ch = source[index++];\n      str += ch;\n      if (ch === '\\\\') {\n        ch = source[index++];\n        // ECMA-262 7.8.5\n        if (isLineTerminator(ch.charCodeAt(0))) {\n          throwError({}, MessageUnterminatedRegExp);\n        }\n        str += ch;\n      } else if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      } else if (classMarker) {\n        if (ch === ']') {\n          classMarker = false;\n        }\n      } else {\n        if (ch === '/') {\n          terminated = true;\n          break;\n        } else if (ch === '[') {\n          classMarker = true;\n        }\n      }\n    }\n\n    if (!terminated) {\n      throwError({}, MessageUnterminatedRegExp);\n    }\n\n    // Exclude leading and trailing slash.\n    body = str.substr(1, str.length - 2);\n    return {\n      value: body,\n      literal: str\n    };\n  }\n\n  function scanRegExpFlags() {\n    var ch, str, flags;\n\n    str = '';\n    flags = '';\n    while (index < length) {\n      ch = source[index];\n      if (!isIdentifierPart(ch.charCodeAt(0))) {\n        break;\n      }\n\n      ++index;\n      if (ch === '\\\\' && index < length) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      } else {\n        flags += ch;\n        str += ch;\n      }\n    }\n\n    if (flags.search(/[^gimuy]/g) >= 0) {\n      throwError({}, MessageInvalidRegExp, flags);\n    }\n\n    return {\n      value: flags,\n      literal: str\n    };\n  }\n\n  function scanRegExp() {\n    var start, body, flags, value;\n\n    lookahead = null;\n    skipComment();\n    start = index;\n\n    body = scanRegExpBody();\n    flags = scanRegExpFlags();\n    value = testRegExp(body.value, flags.value);\n\n    return {\n      literal: body.literal + flags.literal,\n      value: value,\n      regex: {\n        pattern: body.value,\n        flags: flags.value\n      },\n      start: start,\n      end: index\n    };\n  }\n\n  function isIdentifierName(token) {\n    return token.type === TokenIdentifier ||\n      token.type === TokenKeyword ||\n      token.type === TokenBooleanLiteral ||\n      token.type === TokenNullLiteral;\n  }\n\n  function advance() {\n    var ch;\n\n    skipComment();\n\n    if (index >= length) {\n      return {\n        type: TokenEOF,\n        start: index,\n        end: index\n      };\n    }\n\n    ch = source.charCodeAt(index);\n\n    if (isIdentifierStart(ch)) {\n      return scanIdentifier();\n    }\n\n    // Very common: ( and ) and ;\n    if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n      return scanPunctuator();\n    }\n\n    // String literal starts with single quote (U+0027) or double quote (U+0022).\n    if (ch === 0x27 || ch === 0x22) {\n      return scanStringLiteral();\n    }\n\n\n    // Dot (.) U+002E can also start a floating-point number, hence the need\n    // to check the next character.\n    if (ch === 0x2E) {\n      if (isDecimalDigit(source.charCodeAt(index + 1))) {\n        return scanNumericLiteral();\n      }\n      return scanPunctuator();\n    }\n\n    if (isDecimalDigit(ch)) {\n      return scanNumericLiteral();\n    }\n\n    return scanPunctuator();\n  }\n\n  function lex() {\n    var token;\n\n    token = lookahead;\n    index = token.end;\n\n    lookahead = advance();\n\n    index = token.end;\n\n    return token;\n  }\n\n  function peek() {\n    var pos;\n\n    pos = index;\n\n    lookahead = advance();\n    index = pos;\n  }\n\n  function finishArrayExpression(elements) {\n    var node = new ASTNode(SyntaxArrayExpression);\n    node.elements = elements;\n    return node;\n  }\n\n  function finishBinaryExpression(operator, left, right) {\n    var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n    node.operator = operator;\n    node.left = left;\n    node.right = right;\n    return node;\n  }\n\n  function finishCallExpression(callee, args) {\n    var node = new ASTNode(SyntaxCallExpression);\n    node.callee = callee;\n    node.arguments = args;\n    return node;\n  }\n\n  function finishConditionalExpression(test, consequent, alternate) {\n    var node = new ASTNode(SyntaxConditionalExpression);\n    node.test = test;\n    node.consequent = consequent;\n    node.alternate = alternate;\n    return node;\n  }\n\n  function finishIdentifier(name) {\n    var node = new ASTNode(SyntaxIdentifier);\n    node.name = name;\n    return node;\n  }\n\n  function finishLiteral(token) {\n    var node = new ASTNode(SyntaxLiteral);\n    node.value = token.value;\n    node.raw = source.slice(token.start, token.end);\n    if (token.regex) {\n      if (node.raw === '//') {\n        node.raw = '/(?:)/';\n      }\n      node.regex = token.regex;\n    }\n    return node;\n  }\n\n  function finishMemberExpression(accessor, object, property) {\n    var node = new ASTNode(SyntaxMemberExpression);\n    node.computed = accessor === '[';\n    node.object = object;\n    node.property = property;\n    if (!node.computed) property.member = true;\n    return node;\n  }\n\n  function finishObjectExpression(properties) {\n    var node = new ASTNode(SyntaxObjectExpression);\n    node.properties = properties;\n    return node;\n  }\n\n  function finishProperty(kind, key, value) {\n    var node = new ASTNode(SyntaxProperty);\n    node.key = key;\n    node.value = value;\n    node.kind = kind;\n    return node;\n  }\n\n  function finishUnaryExpression(operator, argument) {\n    var node = new ASTNode(SyntaxUnaryExpression);\n    node.operator = operator;\n    node.argument = argument;\n    node.prefix = true;\n    return node;\n  }\n\n  // Throw an exception\n\n  function throwError(token, messageFormat) {\n    var error,\n      args = Array.prototype.slice.call(arguments, 2),\n      msg = messageFormat.replace(\n        /%(\\d)/g,\n        function(whole, index) {\n          assert(index < args.length, 'Message reference must be in range');\n          return args[index];\n        }\n      );\n\n\n    error = new Error(msg);\n    error.index = index;\n    error.description = msg;\n    throw error;\n  }\n\n  // Throw an exception because of the token.\n\n  function throwUnexpected(token) {\n    if (token.type === TokenEOF) {\n      throwError(token, MessageUnexpectedEOS);\n    }\n\n    if (token.type === TokenNumericLiteral) {\n      throwError(token, MessageUnexpectedNumber);\n    }\n\n    if (token.type === TokenStringLiteral) {\n      throwError(token, MessageUnexpectedString);\n    }\n\n    if (token.type === TokenIdentifier) {\n      throwError(token, MessageUnexpectedIdentifier);\n    }\n\n    if (token.type === TokenKeyword) {\n      throwError(token, MessageUnexpectedReserved);\n    }\n\n    // BooleanLiteral, NullLiteral, or Punctuator.\n    throwError(token, MessageUnexpectedToken, token.value);\n  }\n\n  // Expect the next token to match the specified punctuator.\n  // If not, an exception will be thrown.\n\n  function expect(value) {\n    var token = lex();\n    if (token.type !== TokenPunctuator || token.value !== value) {\n      throwUnexpected(token);\n    }\n  }\n\n  // Return true if the next token matches the specified punctuator.\n\n  function match(value) {\n    return lookahead.type === TokenPunctuator && lookahead.value === value;\n  }\n\n  // Return true if the next token matches the specified keyword\n\n  function matchKeyword(keyword) {\n    return lookahead.type === TokenKeyword && lookahead.value === keyword;\n  }\n\n  // 11.1.4 Array Initialiser\n\n  function parseArrayInitialiser() {\n    var elements = [];\n\n    index = lookahead.start;\n    expect('[');\n\n    while (!match(']')) {\n      if (match(',')) {\n        lex();\n        elements.push(null);\n      } else {\n        elements.push(parseConditionalExpression());\n\n        if (!match(']')) {\n          expect(',');\n        }\n      }\n    }\n\n    lex();\n\n    return finishArrayExpression(elements);\n  }\n\n  // 11.1.5 Object Initialiser\n\n  function parseObjectPropertyKey() {\n    var token;\n\n    index = lookahead.start;\n    token = lex();\n\n    // Note: This function is called only from parseObjectProperty(), where\n    // EOF and Punctuator tokens are already filtered out.\n\n    if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n      if (token.octal) {\n        throwError(token, MessageStrictOctalLiteral);\n      }\n      return finishLiteral(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseObjectProperty() {\n    var token, key, id, value;\n\n    index = lookahead.start;\n    token = lookahead;\n\n    if (token.type === TokenIdentifier) {\n      id = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', id, value);\n    }\n    if (token.type === TokenEOF || token.type === TokenPunctuator) {\n      throwUnexpected(token);\n    } else {\n      key = parseObjectPropertyKey();\n      expect(':');\n      value = parseConditionalExpression();\n      return finishProperty('init', key, value);\n    }\n  }\n\n  function parseObjectInitialiser() {\n    var properties = [],\n      property, name, key, map = {},\n      toString = String;\n\n    index = lookahead.start;\n    expect('{');\n\n    while (!match('}')) {\n      property = parseObjectProperty();\n\n      if (property.key.type === SyntaxIdentifier) {\n        name = property.key.name;\n      } else {\n        name = toString(property.key.value);\n      }\n\n      key = '$' + name;\n      if (Object.prototype.hasOwnProperty.call(map, key)) {\n        throwError({}, MessageStrictDuplicateProperty);\n      } else {\n        map[key] = true;\n      }\n\n      properties.push(property);\n\n      if (!match('}')) {\n        expect(',');\n      }\n    }\n\n    expect('}');\n\n    return finishObjectExpression(properties);\n  }\n\n  // 11.1.6 The Grouping Operator\n\n  function parseGroupExpression() {\n    var expr;\n\n    expect('(');\n\n    expr = parseExpression();\n\n    expect(')');\n\n    return expr;\n  }\n\n\n  // 11.1 Primary Expressions\n\n  var legalKeywords = {\n    \"if\": 1,\n    \"this\": 1\n  };\n\n  function parsePrimaryExpression() {\n    var type, token, expr;\n\n    if (match('(')) {\n      return parseGroupExpression();\n    }\n\n    if (match('[')) {\n      return parseArrayInitialiser();\n    }\n\n    if (match('{')) {\n      return parseObjectInitialiser();\n    }\n\n    type = lookahead.type;\n    index = lookahead.start;\n\n\n    if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n      expr = finishIdentifier(lex().value);\n    } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n      if (lookahead.octal) {\n        throwError(lookahead, MessageStrictOctalLiteral);\n      }\n      expr = finishLiteral(lex());\n    } else if (type === TokenKeyword) {\n      throw new Error(DISABLED);\n    } else if (type === TokenBooleanLiteral) {\n      token = lex();\n      token.value = (token.value === 'true');\n      expr = finishLiteral(token);\n    } else if (type === TokenNullLiteral) {\n      token = lex();\n      token.value = null;\n      expr = finishLiteral(token);\n    } else if (match('/') || match('/=')) {\n      expr = finishLiteral(scanRegExp());\n      peek();\n    } else {\n      throwUnexpected(lex());\n    }\n\n    return expr;\n  }\n\n  // 11.2 Left-Hand-Side Expressions\n\n  function parseArguments() {\n    var args = [];\n\n    expect('(');\n\n    if (!match(')')) {\n      while (index < length) {\n        args.push(parseConditionalExpression());\n        if (match(')')) {\n          break;\n        }\n        expect(',');\n      }\n    }\n\n    expect(')');\n\n    return args;\n  }\n\n  function parseNonComputedProperty() {\n    var token;\n    index = lookahead.start;\n    token = lex();\n\n    if (!isIdentifierName(token)) {\n      throwUnexpected(token);\n    }\n\n    return finishIdentifier(token.value);\n  }\n\n  function parseNonComputedMember() {\n    expect('.');\n\n    return parseNonComputedProperty();\n  }\n\n  function parseComputedMember() {\n    var expr;\n\n    expect('[');\n\n    expr = parseExpression();\n\n    expect(']');\n\n    return expr;\n  }\n\n  function parseLeftHandSideExpressionAllowCall() {\n    var expr, args, property;\n\n    expr = parsePrimaryExpression();\n\n    for (;;) {\n      if (match('.')) {\n        property = parseNonComputedMember();\n        expr = finishMemberExpression('.', expr, property);\n      } else if (match('(')) {\n        args = parseArguments();\n        expr = finishCallExpression(expr, args);\n      } else if (match('[')) {\n        property = parseComputedMember();\n        expr = finishMemberExpression('[', expr, property);\n      } else {\n        break;\n      }\n    }\n\n    return expr;\n  }\n\n  // 11.3 Postfix Expressions\n\n  function parsePostfixExpression() {\n    var expr = parseLeftHandSideExpressionAllowCall();\n\n    if (lookahead.type === TokenPunctuator) {\n      if ((match('++') || match('--'))) {\n        throw new Error(DISABLED);\n      }\n    }\n\n    return expr;\n  }\n\n  // 11.4 Unary Operators\n\n  function parseUnaryExpression() {\n    var token, expr;\n\n    if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n      expr = parsePostfixExpression();\n    } else if (match('++') || match('--')) {\n      throw new Error(DISABLED);\n    } else if (match('+') || match('-') || match('~') || match('!')) {\n      token = lex();\n      expr = parseUnaryExpression();\n      expr = finishUnaryExpression(token.value, expr);\n    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n      throw new Error(DISABLED);\n    } else {\n      expr = parsePostfixExpression();\n    }\n\n    return expr;\n  }\n\n  function binaryPrecedence(token) {\n    var prec = 0;\n\n    if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n      return 0;\n    }\n\n    switch (token.value) {\n      case '||':\n        prec = 1;\n        break;\n\n      case '&&':\n        prec = 2;\n        break;\n\n      case '|':\n        prec = 3;\n        break;\n\n      case '^':\n        prec = 4;\n        break;\n\n      case '&':\n        prec = 5;\n        break;\n\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        prec = 6;\n        break;\n\n      case '<':\n      case '>':\n      case '<=':\n      case '>=':\n      case 'instanceof':\n      case 'in':\n        prec = 7;\n        break;\n\n      case '<<':\n      case '>>':\n      case '>>>':\n        prec = 8;\n        break;\n\n      case '+':\n      case '-':\n        prec = 9;\n        break;\n\n      case '*':\n      case '/':\n      case '%':\n        prec = 11;\n        break;\n\n      default:\n        break;\n    }\n\n    return prec;\n  }\n\n  // 11.5 Multiplicative Operators\n  // 11.6 Additive Operators\n  // 11.7 Bitwise Shift Operators\n  // 11.8 Relational Operators\n  // 11.9 Equality Operators\n  // 11.10 Binary Bitwise Operators\n  // 11.11 Binary Logical Operators\n\n  function parseBinaryExpression() {\n    var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n    marker = lookahead;\n    left = parseUnaryExpression();\n\n    token = lookahead;\n    prec = binaryPrecedence(token);\n    if (prec === 0) {\n      return left;\n    }\n    token.prec = prec;\n    lex();\n\n    markers = [marker, lookahead];\n    right = parseUnaryExpression();\n\n    stack = [left, token, right];\n\n    while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n        right = stack.pop();\n        operator = stack.pop().value;\n        left = stack.pop();\n        markers.pop();\n        expr = finishBinaryExpression(operator, left, right);\n        stack.push(expr);\n      }\n\n      // Shift.\n      token = lex();\n      token.prec = prec;\n      stack.push(token);\n      markers.push(lookahead);\n      expr = parseUnaryExpression();\n      stack.push(expr);\n    }\n\n    // Final reduce to clean-up the stack.\n    i = stack.length - 1;\n    expr = stack[i];\n    markers.pop();\n    while (i > 1) {\n      markers.pop();\n      expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n      i -= 2;\n    }\n\n    return expr;\n  }\n\n  // 11.12 Conditional Operator\n\n  function parseConditionalExpression() {\n    var expr, consequent, alternate;\n\n    expr = parseBinaryExpression();\n\n    if (match('?')) {\n      lex();\n      consequent = parseConditionalExpression();\n      expect(':');\n      alternate = parseConditionalExpression();\n\n      expr = finishConditionalExpression(expr, consequent, alternate);\n    }\n\n    return expr;\n  }\n\n  // 11.14 Comma Operator\n\n  function parseExpression() {\n    var expr = parseConditionalExpression();\n\n    if (match(',')) {\n      throw new Error(DISABLED); // no sequence expressions\n    }\n\n    return expr;\n  }\n\n  function parser(code) {\n    source = code;\n    index = 0;\n    length = source.length;\n    lookahead = null;\n\n    peek();\n\n    var expr = parseExpression();\n\n    if (lookahead.type !== TokenEOF) {\n      throw new Error(\"Unexpect token after expression.\");\n    }\n    return expr;\n  }\n\n  var Constants = {\n    NaN:       'NaN',\n    E:         'Math.E',\n    LN2:       'Math.LN2',\n    LN10:      'Math.LN10',\n    LOG2E:     'Math.LOG2E',\n    LOG10E:    'Math.LOG10E',\n    PI:        'Math.PI',\n    SQRT1_2:   'Math.SQRT1_2',\n    SQRT2:     'Math.SQRT2',\n    MIN_VALUE: 'Number.MIN_VALUE',\n    MAX_VALUE: 'Number.MAX_VALUE'\n  };\n\n  function Functions(codegen) {\n\n    function fncall(name, args, cast, type) {\n      var obj = codegen(args[0]);\n      if (cast) {\n        obj = cast + '(' + obj + ')';\n        if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n      }\n      return obj + '.' + name + (type < 0 ? '' : type === 0 ?\n        '()' :\n        '(' + args.slice(1).map(codegen).join(',') + ')');\n    }\n\n    function fn(name, cast, type) {\n      return function(args) {\n        return fncall(name, args, cast, type);\n      };\n    }\n\n    var DATE = 'new Date',\n        STRING = 'String',\n        REGEXP = 'RegExp';\n\n    return {\n      // MATH functions\n      isNaN:    'Number.isNaN',\n      isFinite: 'Number.isFinite',\n      abs:      'Math.abs',\n      acos:     'Math.acos',\n      asin:     'Math.asin',\n      atan:     'Math.atan',\n      atan2:    'Math.atan2',\n      ceil:     'Math.ceil',\n      cos:      'Math.cos',\n      exp:      'Math.exp',\n      floor:    'Math.floor',\n      log:      'Math.log',\n      max:      'Math.max',\n      min:      'Math.min',\n      pow:      'Math.pow',\n      random:   'Math.random',\n      round:    'Math.round',\n      sin:      'Math.sin',\n      sqrt:     'Math.sqrt',\n      tan:      'Math.tan',\n\n      clamp: function(args) {\n        if (args.length < 3) vegaUtil.error('Missing arguments to clamp function.');\n        if (args.length > 3) vegaUtil.error('Too many arguments to clamp function.');\n        var a = args.map(codegen);\n        return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';\n      },\n\n      // DATE functions\n      now:             'Date.now',\n      utc:             'Date.UTC',\n      datetime:        DATE,\n      date:            fn('getDate', DATE, 0),\n      day:             fn('getDay', DATE, 0),\n      year:            fn('getFullYear', DATE, 0),\n      month:           fn('getMonth', DATE, 0),\n      hours:           fn('getHours', DATE, 0),\n      minutes:         fn('getMinutes', DATE, 0),\n      seconds:         fn('getSeconds', DATE, 0),\n      milliseconds:    fn('getMilliseconds', DATE, 0),\n      time:            fn('getTime', DATE, 0),\n      timezoneoffset:  fn('getTimezoneOffset', DATE, 0),\n      utcdate:         fn('getUTCDate', DATE, 0),\n      utcday:          fn('getUTCDay', DATE, 0),\n      utcyear:         fn('getUTCFullYear', DATE, 0),\n      utcmonth:        fn('getUTCMonth', DATE, 0),\n      utchours:        fn('getUTCHours', DATE, 0),\n      utcminutes:      fn('getUTCMinutes', DATE, 0),\n      utcseconds:      fn('getUTCSeconds', DATE, 0),\n      utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n\n      // sequence functions\n      length:      fn('length', null, -1),\n      join:        fn('join', null),\n      indexof:     fn('indexOf', null),\n      lastindexof: fn('lastIndexOf', null),\n      slice:       fn('slice', null),\n\n      reverse: function(args) {\n        return '('+codegen(args[0])+').slice().reverse()';\n      },\n\n      // STRING functions\n      parseFloat:  'parseFloat',\n      parseInt:    'parseInt',\n      upper:       fn('toUpperCase', STRING, 0),\n      lower:       fn('toLowerCase', STRING, 0),\n      substring:   fn('substring', STRING),\n      split:       fn('split', STRING),\n      replace:     fn('replace', STRING),\n      trim:        fn('trim', STRING, 0),\n\n      // REGEXP functions\n      regexp:  REGEXP,\n      test:    fn('test', REGEXP),\n\n      // Control Flow functions\n      if: function(args) {\n          if (args.length < 3) vegaUtil.error('Missing arguments to if function.');\n          if (args.length > 3) vegaUtil.error('Too many arguments to if function.');\n          var a = args.map(codegen);\n          return '('+a[0]+'?'+a[1]+':'+a[2]+')';\n        }\n    };\n  }\n\n  function stripQuotes(s) {\n    var n = s && s.length - 1;\n    return n && (\n        (s[0]==='\"' && s[n]==='\"') ||\n        (s[0]==='\\'' && s[n]==='\\'')\n      ) ? s.slice(1, -1) : s;\n  }\n\n  function codegen(opt) {\n    opt = opt || {};\n\n    var whitelist = opt.whitelist ? vegaUtil.toSet(opt.whitelist) : {},\n        blacklist = opt.blacklist ? vegaUtil.toSet(opt.blacklist) : {},\n        constants = opt.constants || Constants,\n        functions = (opt.functions || Functions)(visit),\n        globalvar = opt.globalvar,\n        fieldvar = opt.fieldvar,\n        globals = {},\n        fields = {},\n        memberDepth = 0;\n\n    var outputGlobal = vegaUtil.isFunction(globalvar)\n      ? globalvar\n      : function (id) { return globalvar + '[\"' + id + '\"]'; };\n\n    function visit(ast) {\n      if (vegaUtil.isString(ast)) return ast;\n      var generator = Generators[ast.type];\n      if (generator == null) vegaUtil.error('Unsupported type: ' + ast.type);\n      return generator(ast);\n    }\n\n    var Generators = {\n      Literal: function(n) {\n          return n.raw;\n        },\n\n      Identifier: function(n) {\n        var id = n.name;\n        if (memberDepth > 0) {\n          return id;\n        } else if (vegaUtil.hasOwnProperty(blacklist, id)) {\n          return vegaUtil.error('Illegal identifier: ' + id);\n        } else if (vegaUtil.hasOwnProperty(constants, id)) {\n          return constants[id];\n        } else if (vegaUtil.hasOwnProperty(whitelist, id)) {\n          return id;\n        } else {\n          globals[id] = 1;\n          return outputGlobal(id);\n        }\n      },\n\n      MemberExpression: function(n) {\n          var d = !n.computed;\n          var o = visit(n.object);\n          if (d) memberDepth += 1;\n          var p = visit(n.property);\n          if (o === fieldvar) {\n            // strip quotes to sanitize field name (#1653)\n            fields[stripQuotes(p)] = 1;\n          }\n          if (d) memberDepth -= 1;\n          return o + (d ? '.'+p : '['+p+']');\n        },\n\n      CallExpression: function(n) {\n          if (n.callee.type !== 'Identifier') {\n            vegaUtil.error('Illegal callee type: ' + n.callee.type);\n          }\n          var callee = n.callee.name;\n          var args = n.arguments;\n          var fn = vegaUtil.hasOwnProperty(functions, callee) && functions[callee];\n          if (!fn) vegaUtil.error('Unrecognized function: ' + callee);\n          return vegaUtil.isFunction(fn)\n            ? fn(args)\n            : fn + '(' + args.map(visit).join(',') + ')';\n        },\n\n      ArrayExpression: function(n) {\n          return '[' + n.elements.map(visit).join(',') + ']';\n        },\n\n      BinaryExpression: function(n) {\n          return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n        },\n\n      UnaryExpression: function(n) {\n          return '(' + n.operator + visit(n.argument) + ')';\n        },\n\n      ConditionalExpression: function(n) {\n          return '(' + visit(n.test) +\n            '?' + visit(n.consequent) +\n            ':' + visit(n.alternate) +\n            ')';\n        },\n\n      LogicalExpression: function(n) {\n          return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n        },\n\n      ObjectExpression: function(n) {\n          return '{' + n.properties.map(visit).join(',') + '}';\n        },\n\n      Property: function(n) {\n          memberDepth += 1;\n          var k = visit(n.key);\n          memberDepth -= 1;\n          return k + ':' + visit(n.value);\n        }\n    };\n\n    function codegen(ast) {\n      var result = {\n        code:    visit(ast),\n        globals: Object.keys(globals),\n        fields:  Object.keys(fields)\n      };\n      globals = {};\n      fields = {};\n      return result;\n    }\n\n    codegen.functions = functions;\n    codegen.constants = constants;\n\n    return codegen;\n  }\n\n  exports.ASTNode = ASTNode;\n  exports.ArrayExpression = ArrayExpression;\n  exports.BinaryExpression = BinaryExpression;\n  exports.CallExpression = CallExpression;\n  exports.ConditionalExpression = ConditionalExpression;\n  exports.Identifier = Identifier;\n  exports.Literal = Literal;\n  exports.LogicalExpression = LogicalExpression;\n  exports.MemberExpression = MemberExpression;\n  exports.ObjectExpression = ObjectExpression;\n  exports.Property = Property;\n  exports.RawCode = RawCode;\n  exports.UnaryExpression = UnaryExpression;\n  exports.codegen = codegen;\n  exports.constants = Constants;\n  exports.functions = Functions;\n  exports.parse = parser;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","self","vega","vegaUtil","ASTNode","type","children","node","ArrayExpression","elements","BinaryExpression","LogicalExpression","left","right","CallExpression","args","arguments","slice","unshift","callee","ConditionalExpression","test","consequent","alternate","MemberExpression","object","property","ObjectExpression","properties","Property","key","value","UnaryExpression","argument","assert","condition","message","Error","isDecimalDigit","ch","isHexDigit","indexOf","isOctalDigit","isLineTerminator","isIdentifierStart","RegexNonAsciiIdentifierStart","String","fromCharCode","isIdentifierPart","RegexNonAsciiIdentifierPart","skipComment","index","length","source","charCodeAt","scanHexEscape","prefix","code","len","i","toLowerCase","throwError","MessageUnexpectedToken","ILLEGAL","getEscapedIdentifier","id","substr","scanPunctuator","start","ch1","TokenPunctuator","end","code2","ch4","ch3","ch2","scanNumericLiteral","number","TokenNumericLiteral","parseInt","octal","parseFloat","testRegExp","pattern","flags","tmp","replace","$0","$1","MessageInvalidRegExp","RegExp","e","exception","advance","TokenEOF","TokenIdentifier","keywords","hasOwnProperty","TokenKeyword","TokenNullLiteral","TokenBooleanLiteral","str","quote","TokenStringLiteral","lex","token","lookahead","peek","pos","finishBinaryExpression","operator","SyntaxLogicalExpression","SyntaxBinaryExpression","finishIdentifier","name","SyntaxIdentifier","finishLiteral","SyntaxLiteral","raw","regex","finishMemberExpression","accessor","SyntaxMemberExpression","computed","member","finishProperty","kind","SyntaxProperty","messageFormat","Array","prototype","call","msg","whole","error","description","throwUnexpected","MessageUnexpectedEOS","MessageUnexpectedNumber","MessageUnexpectedString","MessageUnexpectedIdentifier","MessageUnexpectedReserved","expect","match","parseObjectPropertyKey","MessageStrictOctalLiteral","parsePrimaryExpression","expr","parseExpression","push","parseConditionalExpression","SyntaxArrayExpression","map","toString","Object","MessageStrictDuplicateProperty","SyntaxObjectExpression","legalKeywords","DISABLED","terminated","classMarker","MessageUnterminatedRegExp","body","search","literal","parsePostfixExpression","SyntaxCallExpression","parseUnaryExpression","SyntaxUnaryExpression","keyword","binaryPrecedence","prec","marker","markers","stack","pop","SyntaxConditionalExpression","Functions","codegen","fn","cast","obj","lastIndexOf","join","isNaN","isFinite","abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan","clamp","a","now","utc","datetime","DATE","date","day","year","month","hours","minutes","seconds","milliseconds","time","timezoneoffset","utcdate","utcday","utcyear","utcmonth","utchours","utcminutes","utcseconds","utcmilliseconds","indexof","lastindexof","reverse","upper","STRING","lower","substring","split","trim","regexp","REGEXP","if","visit","ASTNode.prototype.visit","visitor","n","c","Constants","NaN","E","LN2","LN10","LOG2E","LOG10E","PI","SQRT1_2","SQRT2","MIN_VALUE","MAX_VALUE","Identifier","Literal","RawCode","opt","ast","isString","generator","Generators","result","globals","keys","fields","whitelist","toSet","blacklist","constants","functions","globalvar","fieldvar","memberDepth","outputGlobal","isFunction","d","o","p","k","parse","parser","defineProperty"]
}
